{
    "pipes": [
        {
            "name": "TranslatePipe",
            "id": "pipe-TranslatePipe-23008a0188c4558e16a4bf41ae08d2ea",
            "file": "src/app/i18n/pipes/translate.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "i18n",
                            "type": "I18n | null"
                        },
                        {
                            "name": "language",
                            "type": "Language | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i18n",
                            "type": "I18n | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "language",
                            "type": "Language | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "translate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Language, I18n } from '../../shared/model/model';\nimport { DEFAULT_LANGUAGE } from '../../shared/helpers/constants';\n\n\n@Pipe({name: 'translate'})\nexport class TranslatePipe implements PipeTransform {\n  transform(key: string, i18n: I18n | null, language?: Language | null): string {\n    return (i18n && i18n[language || DEFAULT_LANGUAGE] && i18n[language || DEFAULT_LANGUAGE][key]) ?? key;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AddShoppingListItemAction",
            "id": "interface-AddShoppingListItemAction-5880268a93eb6211d685b19dba9e57b5",
            "file": "src/app/shared/model/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Language, LoginCredentials, ShoppingList, ShoppingListItem, ShoppingListItemMovedEvent } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface LoadI18nAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "shoppingListItem",
                    "type": "BasicShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AddShoppingListItemEvent",
            "id": "interface-AddShoppingListItemEvent-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "shoppingListItem",
                    "type": "ShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AddShoppingListItemSuccessAction",
            "id": "interface-AddShoppingListItemSuccessAction-5880268a93eb6211d685b19dba9e57b5",
            "file": "src/app/shared/model/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Language, LoginCredentials, ShoppingList, ShoppingListItem, ShoppingListItemMovedEvent } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface LoadI18nAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "shoppingListItem",
                    "type": "ShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-73cab2901a8d423ed6e1159f4ccd0acf",
            "file": "src/app/shared/state/states/app-state.ts",
            "type": "interface",
            "sourceCode": "import { Language, I18n, User } from '../../model/model';\nimport { DEFAULT_LANGUAGE } from '../../helpers/constants';\n\nexport interface AppState {\n  readonly language: Language;\n  readonly i18n: I18n | null;\n  readonly user: User | null;\n  readonly requestedUrlBeforeLoginWasRequired: string | null;\n}\n\nexport const initialAppState: AppState = {\n  language: DEFAULT_LANGUAGE,\n  i18n: null,\n  user: null,\n  requestedUrlBeforeLoginWasRequired: null\n};\n",
            "properties": [
                {
                    "name": "i18n",
                    "type": "I18n | null",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "language",
                    "type": "Language",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "requestedUrlBeforeLoginWasRequired",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ArrayItemMovedEvent",
            "id": "interface-ArrayItemMovedEvent-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "currentIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "previousIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ChangeShoppingListAction",
            "id": "interface-ChangeShoppingListAction-5880268a93eb6211d685b19dba9e57b5",
            "file": "src/app/shared/model/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Language, LoginCredentials, ShoppingList, ShoppingListItem, ShoppingListItemMovedEvent } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface LoadI18nAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DeleteShoppingListItemAction",
            "id": "interface-DeleteShoppingListItemAction-5880268a93eb6211d685b19dba9e57b5",
            "file": "src/app/shared/model/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Language, LoginCredentials, ShoppingList, ShoppingListItem, ShoppingListItemMovedEvent } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface LoadI18nAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n",
            "properties": [
                {
                    "name": "shoppingListItem",
                    "type": "ShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DeleteShoppingListItemEvent",
            "id": "interface-DeleteShoppingListItemEvent-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "shoppingListItem",
                    "type": "ShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "GlobalState",
            "id": "interface-GlobalState-18e00c73f114083c7339402bb4d65290",
            "file": "src/app/shared/state/index.ts",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, createFeatureSelector, createSelector, MetaReducer } from '@ngrx/store';\nimport { AppState, initialAppState } from './states/app-state';\nimport { appStateReducer } from './reducers/app-state.reducers';\nimport { isJwtTokenExpired } from '../helpers/helpers';\nimport { initialShoppingListState, ShoppingListState } from './states/shopping-list-state';\nimport { shoppingListReducers } from './reducers/shopping-list.reducers';\n\nexport interface GlobalState {\n  appState: AppState;\n  shoppingListState: ShoppingListState;\n}\n\nexport const initialState: GlobalState = {\n  appState: initialAppState,\n  shoppingListState: initialShoppingListState,\n};\n\nexport const reducers: ActionReducerMap<GlobalState> = {\n  appState: appStateReducer,\n  shoppingListState: shoppingListReducers,\n};\n\nexport const metaReducers: MetaReducer<GlobalState>[] = [];\n\nexport const selectAppState = createFeatureSelector<GlobalState, AppState>('appState');\nexport const selectShoppingListState = createFeatureSelector<GlobalState, ShoppingListState>('shoppingListState');\n\nexport const selectTranslations = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.i18n\n);\n\nexport const selectCurrentLanguage = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.language\n);\n\nexport const selectUser = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user\n);\n\nexport const selectRequestedUrlBeforeLoginWasRequired = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.requestedUrlBeforeLoginWasRequired\n);\n\nexport const selectUserID = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user?.id,\n);\n\nexport const isLoggedIn = createSelector(\n  selectAppState,\n  (appState: AppState) => !!appState.user && !isJwtTokenExpired(appState.user.jwt)\n);\n\nexport const selectShoppingLists = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists.items\n);\n\nexport const activeShoppingListId = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n);\n\nexport const selectCurrentShoppingListItems = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingListItems[shoppingListState.activeShoppingList || ''] || []\n);\n\n",
            "properties": [
                {
                    "name": "appState",
                    "type": "AppState",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "shoppingListState",
                    "type": "ShoppingListState",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Ingredient",
            "id": "interface-Ingredient-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "unit",
                    "type": "Unit",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "JwtPayload",
            "id": "interface-JwtPayload-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "exp",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "iat",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "JwtRefreshResponse",
            "id": "interface-JwtRefreshResponse-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "ok",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 80
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoadI18nAction",
            "id": "interface-LoadI18nAction-5880268a93eb6211d685b19dba9e57b5",
            "file": "src/app/shared/model/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Language, LoginCredentials, ShoppingList, ShoppingListItem, ShoppingListItemMovedEvent } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface LoadI18nAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n",
            "properties": [
                {
                    "name": "language",
                    "type": "Language",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoadShoppingListItemsSuccessAction",
            "id": "interface-LoadShoppingListItemsSuccessAction-5880268a93eb6211d685b19dba9e57b5",
            "file": "src/app/shared/model/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Language, LoginCredentials, ShoppingList, ShoppingListItem, ShoppingListItemMovedEvent } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface LoadI18nAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "shoppingListItems",
                    "type": "ShoppingListItem[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoadShoppingListsSuccessAction",
            "id": "interface-LoadShoppingListsSuccessAction-5880268a93eb6211d685b19dba9e57b5",
            "file": "src/app/shared/model/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Language, LoginCredentials, ShoppingList, ShoppingListItem, ShoppingListItemMovedEvent } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface LoadI18nAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n",
            "properties": [
                {
                    "name": "shoppingLists",
                    "type": "ShoppingList[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoginAction",
            "id": "interface-LoginAction-5880268a93eb6211d685b19dba9e57b5",
            "file": "src/app/shared/model/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Language, LoginCredentials, ShoppingList, ShoppingListItem, ShoppingListItemMovedEvent } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface LoadI18nAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n",
            "properties": [
                {
                    "name": "credentials",
                    "type": "LoginCredentials",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoginCredentials",
            "id": "interface-LoginCredentials-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "identifier",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Recipe",
            "id": "interface-Recipe-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "ingredients",
                    "type": "RecipeIngredient[]",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 112,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 114,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RecipeIngredient",
            "id": "interface-RecipeIngredient-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "isStapleFood",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Ingredient"
        },
        {
            "name": "SelectOption",
            "id": "interface-SelectOption-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "key",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SetActiveShoppingListAction",
            "id": "interface-SetActiveShoppingListAction-5880268a93eb6211d685b19dba9e57b5",
            "file": "src/app/shared/model/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Language, LoginCredentials, ShoppingList, ShoppingListItem, ShoppingListItemMovedEvent } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface LoadI18nAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SetActiveShoppingListAction",
            "id": "interface-SetActiveShoppingListAction-5880268a93eb6211d685b19dba9e57b5-1",
            "file": "src/app/shared/model/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Language, LoginCredentials, ShoppingList, ShoppingListItem, ShoppingListItemMovedEvent } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface LoadI18nAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SetActiveShoppingListAction-1"
        },
        {
            "name": "ShoppingList",
            "id": "interface-ShoppingList-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingListItem",
            "id": "interface-ShoppingListItem-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isChecked",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "shoppingList",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Ingredient"
        },
        {
            "name": "ShoppingListItemMovedAction",
            "id": "interface-ShoppingListItemMovedAction-5880268a93eb6211d685b19dba9e57b5",
            "file": "src/app/shared/model/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Language, LoginCredentials, ShoppingList, ShoppingListItem, ShoppingListItemMovedEvent } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface LoadI18nAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n",
            "properties": [
                {
                    "name": "currentIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "previousIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingListItemMovedEvent",
            "id": "interface-ShoppingListItemMovedEvent-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ArrayItemMovedEvent"
        },
        {
            "name": "ShoppingListState",
            "id": "interface-ShoppingListState-181906f7001a968007bd6ba11a7820cd",
            "file": "src/app/shared/state/states/shopping-list-state.ts",
            "type": "interface",
            "sourceCode": "import { ShoppingList, ShoppingListItem } from '../../model/model';\n\nexport interface ShoppingListState {\n  readonly shoppingLists: {\n    items: ShoppingList[];\n  };\n  readonly shoppingListItems: { [key: string]: ShoppingListItem[] };\n  readonly activeShoppingList: string | undefined;\n}\n\nexport const initialShoppingListState: ShoppingListState = {\n  shoppingLists: {\n    items: [],\n  },\n  shoppingListItems: {},\n  activeShoppingList: undefined,\n};\n",
            "properties": [
                {
                    "name": "activeShoppingList",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "shoppingListItems",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "shoppingLists",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Translations",
            "id": "interface-Translations-fc5746060aa930640920c2ca66363dcd",
            "file": "src/app/shared/model/model-api.ts",
            "type": "interface",
            "sourceCode": "export type I18n = {\n  readonly lang: string;\n  readonly translations: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport interface UserApi {\n  jwt: string;\n  user: {\n    username: string;\n    _id: string;\n    email: string;\n  };\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-fc5746060aa930640920c2ca66363dcd",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "string",
                    "line": 6
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "Translations",
            "id": "interface-Translations-e2650e0535fcdaebbcb31dc3536a037b-1",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-e2650e0535fcdaebbcb31dc3536a037b",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "string",
                    "line": 7
                }
            ],
            "kind": 159,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Translations-1"
        },
        {
            "name": "User",
            "id": "interface-User-e2650e0535fcdaebbcb31dc3536a037b",
            "file": "src/app/shared/model/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../helpers/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient{\n  id: string;\n  shoppingList: string;\n  order?: number;\n  isChecked?: boolean;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  readonly title: string;\n  readonly ingredients: RecipeIngredient [];\n  readonly url?: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "jwt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "UserApi",
            "id": "interface-UserApi-fc5746060aa930640920c2ca66363dcd",
            "file": "src/app/shared/model/model-api.ts",
            "type": "interface",
            "sourceCode": "export type I18n = {\n  readonly lang: string;\n  readonly translations: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport interface UserApi {\n  jwt: string;\n  user: {\n    username: string;\n    _id: string;\n    email: string;\n  };\n}\n",
            "properties": [
                {
                    "name": "jwt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "user",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthApiEffects",
            "id": "injectable-AuthApiEffects-a4cb8e1cd491328e7a5661ed16d56950",
            "file": "src/app/auth/effects/auth-api.effects.ts",
            "properties": [
                {
                    "name": "login",
                    "defaultValue": "this.actions$.pipe(\n    ofType(LoginPageActions.login),\n    exhaustMap(({credentials}: LoginAction) => this.authService.login(credentials).pipe(\n      map((user: User) => AuthApiActions.loginSuccess({user})),\n      catchError(() => of(AuthApiActions.loginFailure()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "logout",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ErrorInterceptorActions.logout, NavActions.logout),\n    exhaustMap(() => this.authService.logout().pipe(\n      map(() => AuthApiActions.logoutSuccess()),\n      catchError(() => of(AuthApiActions.loginFailure()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "redirectWhenLoggedIn",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AuthApiActions.loginSuccess),\n    withLatestFrom(this.store.select(selectRequestedUrlBeforeLoginWasRequired)),\n    tap(([_, url]) => {\n      this.router.navigate([url || DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER]);\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "redirectWhenLoggedOut",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AuthApiActions.logoutSuccess),\n    withLatestFrom(this.store.select(selectRequestedUrlBeforeLoginWasRequired)),\n    tap(([_, url]) => {\n      this.router.navigate(['/']);\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "refreshToken",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AppInitializationActions.refreshToken, LoginServiceActions.refreshToken),\n    exhaustMap(() => this.authService.refreshToken().pipe(\n      map((jwtRenewal: JwtRefreshResponse) => {\n        return (jwtRenewal.ok && jwtRenewal.user) ?\n          AuthApiActions.refreshTokenSuccess({user: jwtRenewal.user}) : AuthApiActions.refreshTokenFailed();\n      }),\n      catchError(() => of(AuthApiActions.refreshTokenFailed()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { GlobalState, selectRequestedUrlBeforeLoginWasRequired } from '../../shared/state';\nimport { AuthApiActions, LoginPageActions, LoginServiceActions } from '../actions';\nimport { catchError, exhaustMap, map, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../services/auth.service';\nimport { LoginAction } from '../../shared/model/model-action';\nimport { JwtRefreshResponse, User } from '../../shared/model/model';\nimport { of } from 'rxjs';\nimport { AppInitializationActions, ErrorInterceptorActions, NavActions } from '../../shared/state/app-actions';\nimport { Router } from '@angular/router';\nimport { DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER } from '../../shared/helpers/constants';\n\n@Injectable()\nexport class AuthApiEffects {\n  constructor(\n    private actions$: Actions,\n    private authService: AuthService,\n    private router: Router,\n    private store: Store<GlobalState>) {\n  }\n\n  @Effect()\n  login = this.actions$.pipe(\n    ofType(LoginPageActions.login),\n    exhaustMap(({credentials}: LoginAction) => this.authService.login(credentials).pipe(\n      map((user: User) => AuthApiActions.loginSuccess({user})),\n      catchError(() => of(AuthApiActions.loginFailure()))\n    )),\n  );\n\n  @Effect()\n  refreshToken = this.actions$.pipe(\n    ofType(AppInitializationActions.refreshToken, LoginServiceActions.refreshToken),\n    exhaustMap(() => this.authService.refreshToken().pipe(\n      map((jwtRenewal: JwtRefreshResponse) => {\n        return (jwtRenewal.ok && jwtRenewal.user) ?\n          AuthApiActions.refreshTokenSuccess({user: jwtRenewal.user}) : AuthApiActions.refreshTokenFailed();\n      }),\n      catchError(() => of(AuthApiActions.refreshTokenFailed()))\n    )),\n  );\n\n  @Effect()\n  logout = this.actions$.pipe(\n    ofType(ErrorInterceptorActions.logout, NavActions.logout),\n    exhaustMap(() => this.authService.logout().pipe(\n      map(() => AuthApiActions.logoutSuccess()),\n      catchError(() => of(AuthApiActions.loginFailure()))\n    )),\n  );\n\n  @Effect({dispatch: false})\n  redirectWhenLoggedIn = this.actions$.pipe(\n    ofType(AuthApiActions.loginSuccess),\n    withLatestFrom(this.store.select(selectRequestedUrlBeforeLoginWasRequired)),\n    tap(([_, url]) => {\n      this.router.navigate([url || DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER]);\n    }),\n  );\n\n  @Effect({dispatch: false})\n  redirectWhenLoggedOut = this.actions$.pipe(\n    ofType(AuthApiActions.logoutSuccess),\n    withLatestFrom(this.store.select(selectRequestedUrlBeforeLoginWasRequired)),\n    tap(([_, url]) => {\n      this.router.navigate(['/']);\n    }),\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-f45ff565d87d881cc1caac504a0cf4af",
            "file": "src/app/auth/services/auth.service.ts",
            "properties": [
                {
                    "name": "refreshTokenTimeout",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "LoginCredentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "LoginCredentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<undefined>",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "refreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<JwtRefreshResponse>",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "startRefreshTokenTimer",
                    "args": [
                        {
                            "name": "jwt",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "jwt",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopRefreshTokenTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { decodeJwtToken, mapUserApiToUserClient } from '../../shared/helpers/helpers';\nimport { UserApi } from '../../shared/model/model-api';\nimport { JwtRefreshResponse, LoginCredentials, User } from '../../shared/model/model';\nimport { GlobalState } from '../../shared/state';\nimport { Store } from '@ngrx/store';\nimport { LoginServiceActions } from '../actions';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private refreshTokenTimeout: number | undefined;\n\n  constructor(private httpClient: HttpClient, private store: Store<GlobalState>) {\n  }\n\n  login(credentials: LoginCredentials): Observable<User> {\n    return this.httpClient.post<UserApi>(`${environment.authUrl}/auth/local`, credentials).pipe(\n      map((userApi: UserApi) => mapUserApiToUserClient(userApi)),\n      tap(user => this.startRefreshTokenTimer(user.jwt))\n    );\n  }\n\n  refreshToken(): Observable<JwtRefreshResponse> {\n    return this.httpClient.post<JwtRefreshResponse>(`${environment.authUrl}/auth/refresh-token`, {}).pipe(\n      tap((jwtRenewal: JwtRefreshResponse) => jwtRenewal.user && this.startRefreshTokenTimer(jwtRenewal.user.jwt))\n    );\n  }\n\n  logout(): Observable<true> {\n    this.stopRefreshTokenTimer();\n    return this.httpClient.post<true>(`${environment.authUrl}/auth/logout`, {});\n  }\n\n  private startRefreshTokenTimer(jwt: string): void {\n    const {exp} = decodeJwtToken(jwt);\n\n    const expires = new Date(exp * 1000);\n    // set a timeout to refresh the token a minute before it expires\n    const timeout = expires.getTime() - Date.now() - (60 * 1000);\n    this.stopRefreshTokenTimer();\n    this.refreshTokenTimeout = window.setTimeout(() => this.store.dispatch(LoginServiceActions.refreshToken()), timeout);\n  }\n\n  private stopRefreshTokenTimer(): void {\n    clearTimeout(this.refreshTokenTimeout);\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "I18nApiEffects",
            "id": "injectable-I18nApiEffects-b91d503df5112dafe2c1f6cfc1033a91",
            "file": "src/app/i18n/effects/i18n-api.effects.ts",
            "properties": [
                {
                    "name": "getI18n",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AppInitializationActions.setLanguage),\n    exhaustMap(({language}: LoadI18nAction) => this.i18nService.getI18n(language).pipe(\n      map((i18n: I18n) => I18nApiActions.getI18nSuccess({i18n})),\n      catchError(() => of(I18nApiActions.getI18nFailure()))\n    ))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { catchError, exhaustMap, map } from 'rxjs/operators';\nimport { I18n } from '../../shared/model/model';\nimport { I18nApiActions } from '../actions';\nimport { I18nService } from '../services/i18n.service';\nimport { of } from 'rxjs';\nimport { AppInitializationActions } from '../../shared/state/app-actions';\nimport { LoadI18nAction } from '../../shared/model/model-action';\n\n@Injectable()\nexport class I18nApiEffects {\n  constructor(\n    private actions$: Actions,\n    private i18nService: I18nService) {\n  }\n\n  @Effect()\n  getI18n = this.actions$.pipe(\n    ofType(AppInitializationActions.setLanguage),\n    exhaustMap(({language}: LoadI18nAction) => this.i18nService.getI18n(language).pipe(\n      map((i18n: I18n) => I18nApiActions.getI18nSuccess({i18n})),\n      catchError(() => of(I18nApiActions.getI18nFailure()))\n    ))\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "i18nService",
                        "type": "I18nService"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i18nService",
                        "type": "I18nService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "I18nService",
            "id": "injectable-I18nService-c362d7a94254ad1ad1128c3b74642a6a",
            "file": "src/app/i18n/services/i18n.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getI18n",
                    "args": [
                        {
                            "name": "lang",
                            "type": "Language"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<I18nClient>",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "Language",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { mapI18nApiToI18nClient } from '../../shared/helpers/helpers';\nimport { Language, I18n as I18nClient } from '../../shared/model/model';\nimport { I18n as I18nApi } from '../../shared/model/model-api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nService {\n  constructor(private httpClient: HttpClient) {\n  }\n\n  getI18n(lang: Language): Observable<I18nClient> {\n    return this.httpClient.get<I18nApi>(`${environment.apiUrl}/i18n/${lang}`).pipe(\n      map((i18n: I18nApi) => mapI18nApiToI18nClient(i18n))\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingListApiEffects",
            "id": "injectable-ShoppingListApiEffects-afe716020b7599f61e5a0c15d5bcfd0f",
            "file": "src/app/shopping-list/effects/shopping-list-api.effects.ts",
            "properties": [
                {
                    "name": "addShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.addShoppingListItem),\n    concatMap(({optimisticId, shoppingListItem}) => this.shoppingListService.addShoppingListItem(shoppingListItem).pipe(\n      map((shoppingListItemApi: ShoppingListItem) => {\n        return ShoppingListApiActions.addShoppingListItemSuccess({optimisticId, shoppingListItem: shoppingListItemApi});\n      }),\n      catchError(() => of(ShoppingListApiActions.addShoppingListItemFailure({shoppingListItem})))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "chooseCurrentShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListApiActions.loadShoppingListsSuccess),\n    switchMap(({shoppingLists}) => {\n      const requestedShoppingListId = this.activatedRoute.snapshot.queryParams.shoppingListId;\n      const shoppingListsIds = shoppingLists.map((shoppingList) => shoppingList.id);\n      const selectedShoppingListId  = requestedShoppingListId && shoppingListsIds.includes(requestedShoppingListId) ?\n        requestedShoppingListId : shoppingListsIds[0];\n\n      return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: selectedShoppingListId})\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingListItem),\n    concatMap(({shoppingListItem}) => this.shoppingListService.deleteShoppingListItem(shoppingListItem.id).pipe(\n      map(() => {\n        return ShoppingListApiActions.deleteShoppingListItemSuccess({shoppingListItem});\n      }),\n      catchError(() => of(ShoppingListApiActions.deleteShoppingListItemFailure({shoppingListItem})))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "getShoppingListItems$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListEffectActions.setActiveShoppingList, ShoppingListContainerActions.changeShoppingList),\n    exhaustMap(({shoppingListId}: SetActiveShoppingListAction | ChangeShoppingListAction) => {\n      return this.shoppingListService.getShoppingListItems(shoppingListId).pipe(\n        map((shoppingListItems: ShoppingListItem[]) => {\n          return ShoppingListApiActions.loadShoppingListItemsSuccess({shoppingListId, shoppingListItems});\n        }),\n        catchError(() => of(ShoppingListApiActions.loadShoppingListItemsFailure()))\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "getShoppingLists$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.loadShoppingLists),\n    withLatestFrom(this.store.select(selectUserID)),\n    filter(([_, userId]) => !!userId),\n    exhaustMap(([_, userId]) => this.shoppingListService.getShoppingLists(userId!).pipe(\n      map((shoppingLists: ShoppingList[]) => ShoppingListApiActions.loadShoppingListsSuccess({shoppingLists})),\n      catchError(() => of(ShoppingListApiActions.loadShoppingListsFailure()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "moveShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.moveShoppingListItem),\n    withLatestFrom(this.store.select(selectCurrentShoppingListItems)),\n    map(([{shoppingListId, previousIndex, currentIndex}, shoppingListItems]): ShoppingListItem[] => {\n      const [fromIndex, toIndex] = [previousIndex, currentIndex].sort();\n      const itemsToUpdate = shoppingListItems.slice(fromIndex, toIndex + 1);\n      const maxOrder = Math.max(...itemsToUpdate.map((shoppingListItem: ShoppingListItem) => shoppingListItem.order || 0));\n\n      return itemsToUpdate\n        .map((item, index) => ({...item, order: maxOrder - index}));\n    }),\n    map((shoppingListItems: ShoppingListItem[]) => {\n      return shoppingListItems.map(shoppingListItem => this.shoppingListService.updateShoppingListItem(shoppingListItem));\n    }),\n    concatMap((updateObservables: Observable<ShoppingListItem>[]) => {\n      console.log('here', updateObservables);\n\n      const a = forkJoin(updateObservables);\n      console.log('a', a);\n\n      return a.pipe(\n        map(() => ShoppingListApiActions.updateShoppingListItemSuccess()),\n        catchError(() => of(ShoppingListApiActions.updateShoppingListItemFailure({updateObservables}))));\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "setQueryParameterForActiveShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListEffectActions.setActiveShoppingList, ShoppingListContainerActions.changeShoppingList),\n    tap(({shoppingListId}) => {\n      this.router.navigate([], {relativeTo: this.activatedRoute, queryParams: {shoppingListId}});\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { GlobalState, selectCurrentShoppingListItems, selectUser, selectUserID } from '../../shared/state';\nimport { ShoppingListApiActions, ShoppingListContainerActions, ShoppingListEffectActions } from '../actions';\nimport { catchError, concatMap, exhaustMap, filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { ChangeShoppingListAction, SetActiveShoppingListAction, ShoppingListItemMovedAction } from '../../shared/model/model-action';\nimport { ShoppingList, ShoppingListItem, ShoppingListItemMovedEvent } from '../../shared/model/model';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { ShoppingListService } from '../service/shopping-list.service';\nimport { ActivatedRoute, ActivatedRouteSnapshot, Router } from '@angular/router';\n\n@Injectable()\nexport class ShoppingListApiEffects {\n  constructor(\n    private actions$: Actions,\n    private shoppingListService: ShoppingListService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private store: Store<GlobalState>) {\n  }\n\n  @Effect()\n  getShoppingLists$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.loadShoppingLists),\n    withLatestFrom(this.store.select(selectUserID)),\n    filter(([_, userId]) => !!userId),\n    exhaustMap(([_, userId]) => this.shoppingListService.getShoppingLists(userId!).pipe(\n      map((shoppingLists: ShoppingList[]) => ShoppingListApiActions.loadShoppingListsSuccess({shoppingLists})),\n      catchError(() => of(ShoppingListApiActions.loadShoppingListsFailure()))\n    )),\n  );\n\n  @Effect()\n  chooseCurrentShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListApiActions.loadShoppingListsSuccess),\n    switchMap(({shoppingLists}) => {\n      const requestedShoppingListId = this.activatedRoute.snapshot.queryParams.shoppingListId;\n      const shoppingListsIds = shoppingLists.map((shoppingList) => shoppingList.id);\n      const selectedShoppingListId  = requestedShoppingListId && shoppingListsIds.includes(requestedShoppingListId) ?\n        requestedShoppingListId : shoppingListsIds[0];\n\n      return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: selectedShoppingListId})\n      );\n    }),\n  );\n\n  @Effect({dispatch: false})\n  setQueryParameterForActiveShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListEffectActions.setActiveShoppingList, ShoppingListContainerActions.changeShoppingList),\n    tap(({shoppingListId}) => {\n      this.router.navigate([], {relativeTo: this.activatedRoute, queryParams: {shoppingListId}});\n    })\n  );\n\n  @Effect()\n  getShoppingListItems$ = this.actions$.pipe(\n    ofType(ShoppingListEffectActions.setActiveShoppingList, ShoppingListContainerActions.changeShoppingList),\n    exhaustMap(({shoppingListId}: SetActiveShoppingListAction | ChangeShoppingListAction) => {\n      return this.shoppingListService.getShoppingListItems(shoppingListId).pipe(\n        map((shoppingListItems: ShoppingListItem[]) => {\n          return ShoppingListApiActions.loadShoppingListItemsSuccess({shoppingListId, shoppingListItems});\n        }),\n        catchError(() => of(ShoppingListApiActions.loadShoppingListItemsFailure()))\n      );\n    }),\n  );\n\n  @Effect()\n  addShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.addShoppingListItem),\n    concatMap(({optimisticId, shoppingListItem}) => this.shoppingListService.addShoppingListItem(shoppingListItem).pipe(\n      map((shoppingListItemApi: ShoppingListItem) => {\n        return ShoppingListApiActions.addShoppingListItemSuccess({optimisticId, shoppingListItem: shoppingListItemApi});\n      }),\n      catchError(() => of(ShoppingListApiActions.addShoppingListItemFailure({shoppingListItem})))\n    )),\n  );\n\n  @Effect()\n  deleteShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingListItem),\n    concatMap(({shoppingListItem}) => this.shoppingListService.deleteShoppingListItem(shoppingListItem.id).pipe(\n      map(() => {\n        return ShoppingListApiActions.deleteShoppingListItemSuccess({shoppingListItem});\n      }),\n      catchError(() => of(ShoppingListApiActions.deleteShoppingListItemFailure({shoppingListItem})))\n    )),\n  );\n\n  @Effect({dispatch: false})\n  moveShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.moveShoppingListItem),\n    withLatestFrom(this.store.select(selectCurrentShoppingListItems)),\n    map(([{shoppingListId, previousIndex, currentIndex}, shoppingListItems]): ShoppingListItem[] => {\n      const [fromIndex, toIndex] = [previousIndex, currentIndex].sort();\n      const itemsToUpdate = shoppingListItems.slice(fromIndex, toIndex + 1);\n      const maxOrder = Math.max(...itemsToUpdate.map((shoppingListItem: ShoppingListItem) => shoppingListItem.order || 0));\n\n      return itemsToUpdate\n        .map((item, index) => ({...item, order: maxOrder - index}));\n    }),\n    map((shoppingListItems: ShoppingListItem[]) => {\n      return shoppingListItems.map(shoppingListItem => this.shoppingListService.updateShoppingListItem(shoppingListItem));\n    }),\n    concatMap((updateObservables: Observable<ShoppingListItem>[]) => {\n      console.log('here', updateObservables);\n\n      const a = forkJoin(updateObservables);\n      console.log('a', a);\n\n      return a.pipe(\n        map(() => ShoppingListApiActions.updateShoppingListItemSuccess()),\n        catchError(() => of(ShoppingListApiActions.updateShoppingListItemFailure({updateObservables}))));\n    })\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "shoppingListService",
                        "type": "ShoppingListService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shoppingListService",
                        "type": "ShoppingListService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingListService",
            "id": "injectable-ShoppingListService-9ddeae8bde2cb1ffa67a1ab999fcd4c1",
            "file": "src/app/shopping-list/service/shopping-list.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addShoppingListItem",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingListItem>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteShoppingListItem",
                    "args": [
                        {
                            "name": "shoppingListItemId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getShoppingListItems",
                    "args": [
                        {
                            "name": "shoppingListId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingListItem[]>",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "shoppingListId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getShoppingLists",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingList[]>",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateShoppingListItem",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingListItem>",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { BasicShoppingListItem, ShoppingList, ShoppingListItem } from '../../shared/model/model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShoppingListService {\n  constructor(private httpClient: HttpClient) {\n  }\n\n  getShoppingLists(userId: string): Observable<ShoppingList[]> {\n    return this.httpClient.get<ShoppingList[]>(`${environment.apiUrl}/shopping-lists?user=${userId}`);\n  }\n\n  getShoppingListItems(shoppingListId: string): Observable<ShoppingListItem[]> {\n    return this.httpClient.get<ShoppingListItem[]>(`${environment.apiUrl}/shopping-list-items?shoppingList=${shoppingListId}`);\n  }\n\n  addShoppingListItem(shoppingListItem: BasicShoppingListItem): Observable<ShoppingListItem> {\n    return this.httpClient.post<ShoppingListItem>(`${environment.apiUrl}/shopping-list-items`, shoppingListItem);\n  }\n\n  updateShoppingListItem(shoppingListItem: ShoppingListItem): Observable<ShoppingListItem> {\n    return this.httpClient.put<ShoppingListItem>(`${environment.apiUrl}/shopping-list-items/${shoppingListItem.id}`, shoppingListItem);\n  }\n\n  deleteShoppingListItem(shoppingListItemId: string): Observable<{ DELETED: true }> {\n    return this.httpClient.delete<{ DELETED: true }>(`${environment.apiUrl}/shopping-list-items/${shoppingListItemId}`);\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "RouterLinkDirectiveStub",
            "id": "directive-RouterLinkDirectiveStub-c9217ce2763c98d52dd892c167c14067",
            "file": "testing/router-link-directive.stub.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[routerLink]'\n})\nexport class RouterLinkDirectiveStub {\n  @Input('routerLink') linkParams: any;\n  navigatedTo: any = null;\n\n  @HostListener('click')\n  onClick(): void {\n    this.navigatedTo = this.linkParams;\n  }\n}\n",
            "selector": "[routerLink]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "routerLink",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 12
                }
            ],
            "propertiesClass": [
                {
                    "name": "navigatedTo",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": []
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-6a514fae88415aa3f87d60a137a5519c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLang$",
                    "defaultValue": "this.store.select(selectCurrentLanguage)",
                    "type": "Observable<Language | null>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "this.store.select(isLoggedIn)",
                    "type": "Observable<boolean | null>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { I18n, Language } from './shared/model/model';\nimport { GlobalState, isLoggedIn, selectCurrentLanguage, selectTranslations } from './shared/state';\nimport { NavActions } from './shared/state/app-actions';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLang$: Observable<Language | null> = this.store.select(selectCurrentLanguage);\n  isLoggedIn: Observable<boolean | null> = this.store.select(isLoggedIn);\n\n  constructor(private store: Store<GlobalState>) {\n  }\n\n  onLogout(): void {\n    this.store.dispatch(NavActions.logout());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-navigation\n  [isLoggedIn]=\"isLoggedIn | async\"\n  [translations]=\"translations$ | async\"\n  [currentLang]=\"currentLang$ | async\"\n  (logout)=\"onLogout()\"></app-navigation>\n\n<div id=\"main-page\">\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "BetaTeaserComponent",
            "id": "component-BetaTeaserComponent-23a6d6f56d062c80d200eee7b0ae0820",
            "file": "src/app/components/beta-teaser/beta-teaser.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-beta-teaser",
            "styleUrls": [
                "./beta-teaser.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./beta-teaser.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLang$",
                    "defaultValue": "this.store.select(selectCurrentLanguage)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "url",
                    "defaultValue": "'https://mealplaner.app'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { getI18n } from '../../i18n/actions/i18n-api.actions';\nimport { GlobalState, selectCurrentLanguage, selectTranslations } from '../../shared/state';\n\n@Component({\n  selector: 'app-beta-teaser',\n  templateUrl: './beta-teaser.component.html',\n  styleUrls: ['./beta-teaser.component.scss']\n})\nexport class BetaTeaserComponent implements OnInit {\n  url = 'https://mealplaner.app';\n  translations$ = this.store.select(selectTranslations);\n  currentLang$ = this.store.select(selectCurrentLanguage);\n\n  constructor(\n    private location: Location,\n    private store: Store<GlobalState>) {\n  }\n\n  ngOnInit(): void {\n    this.url = `https://mealplaner.app${this.location.path()}`;\n    // Todo don't load the translations here\n    this.store.dispatch(getI18n());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".beta-teaser {\n  background: #333333;\n  color: white;\n  text-align: center;\n  padding: 8px;\n\n  &--link {\n    color: #1976d2;\n  }\n}\n\n\n",
                    "styleUrl": "./beta-teaser.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"beta-teaser\">👶 {{'beta.teaser' | translate: (translations$ | async): (currentLang$ | async) || 'de' }}\n  <a class=\"beta-teaser--link\" [href]=\"url\">here.</a>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c247e23ed8b0a5f9c92f364a1f7da365",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "line": 12
                },
                {
                    "name": "buttonType",
                    "defaultValue": "'button'",
                    "line": 13
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "line": 16
                },
                {
                    "name": "e2eTestName",
                    "defaultValue": "''",
                    "line": 15
                },
                {
                    "name": "hasErrors",
                    "defaultValue": "false",
                    "line": 20
                },
                {
                    "name": "iconLeft",
                    "line": 17,
                    "type": "IconName | undefined"
                },
                {
                    "name": "iconRight",
                    "line": 18,
                    "type": "IconName | undefined"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 14
                },
                {
                    "name": "isInputGroup",
                    "defaultValue": "false",
                    "line": 19
                }
            ],
            "outputsClass": [
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "line": 21,
                    "type": "EventEmitter<MouseEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IconName } from '@fortawesome/fontawesome-common-types';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent {\n\n  @Input() buttonText = '';\n  @Input() buttonType = 'button';\n  @Input() isDisabled = false;\n  @Input() e2eTestName = '';\n  @Input() color = 'primary';\n  @Input() iconLeft: IconName | undefined;\n  @Input() iconRight: IconName | undefined;\n  @Input() isInputGroup = false;\n  @Input() hasErrors = false;\n  @Output() clicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  onClick(event: MouseEvent): void {\n    this.clicked.emit(event);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/material_theme\";\n@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/mixins/forms\";\n\n.button{\n  background-color: $blue_70;\n  color: $blue-grey_10;\n   @include button();\n\n  &:hover{\n    background-color: $blue_60;\n  }\n\n  &:active {\n    background-color: $blue_80;\n  }\n\n  &--no-left-border-radius{\n    border-radius: 0 4px 4px 0;\n  }\n\n  &--color-inverted{\n    background-color: #FFFFFF;\n    color: $blue_100;\n    font-weight: 400;\n\n    &:hover{\n      background-color: $blue-grey_10;\n    }\n\n    &:active {\n      background-color: $blue-grey_10;\n    }\n  }\n\n  &--color-accent{\n    background-color: $cyan_70;\n    color:$cyan_10;\n\n    &:hover{\n      background-color: $cyan_60;\n    }\n\n    &:active {\n      background-color: $cyan_80;\n    }\n  }\n\n  &--color-warning{\n    background-color: $red_70;\n    color: $red_10;\n\n    &:hover{\n      background-color: $red_60;\n    }\n\n    &:active {\n      background-color: $red_80;\n    }\n  }\n\n  &--color-disabled{\n    background-color: $blue-grey_50;\n    cursor: not-allowed;\n\n    &:hover,\n    &:active{\n      background-color: $blue-grey_50;\n    }\n\n  }\n\n  &--warning-border{\n    border: 2px solid $red_70;\n    border-left: none;\n  }\n\n  .icon-left{\n    padding-right: 0.5rem;\n  }\n\n  .icon-right{\n    padding-left: 0.5rem;\n  }\n\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n  class=\"button\"\n  [disabled]=\"isDisabled\"\n  [attr.data-test]=\"e2eTestName\"\n  [type]=\"buttonType\"\n  (click)=\"onClick($event)\"\n  [ngClass]=\"{\n  'button--no-left-border-radius': isInputGroup,\n  'button--color-inverted': color === 'inverted' && !isDisabled,\n  'button--color-accent': color === 'accent' && !isDisabled,\n  'button--color-warning': color === 'warn' && !isDisabled,\n  'button--color-disabled': isDisabled,\n  'button--warning-border': isInputGroup && hasErrors\n  }\"\n>\n  <fa-icon *ngIf=\"iconLeft\"\n           [icon]=\"['fas', iconLeft]\"\n           class=\"icon-left\"\n  ></fa-icon>\n  {{buttonText}}\n  <fa-icon *ngIf=\"iconRight\"\n           [icon]=\"['fas', iconRight]\"\n           class=\"icon-right\"\n  ></fa-icon>\n</button>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-da401a55a41976aba202adee8d87ca38",
            "file": "src/app/shared/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "defaultValue": "'on'",
                    "line": 30
                },
                {
                    "name": "buttonTestName",
                    "defaultValue": "''",
                    "line": 20
                },
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "line": 18
                },
                {
                    "name": "buttonType",
                    "defaultValue": "'button'",
                    "line": 19
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "line": 21
                },
                {
                    "name": "e2eTestName",
                    "defaultValue": "''",
                    "line": 32
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "line": 28,
                    "type": "string[]"
                },
                {
                    "name": "iconLeft",
                    "line": 22,
                    "type": "string | undefined"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 29
                },
                {
                    "name": "label",
                    "line": 27,
                    "type": "string | undefined"
                },
                {
                    "name": "minValue",
                    "defaultValue": "null",
                    "line": 23,
                    "type": "number | null"
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "line": 26
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 31
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "line": 25
                }
            ],
            "outputsClass": [
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "line": 33,
                    "type": "EventEmitter<MouseEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentValue",
                    "defaultValue": "''",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "inputId",
                    "defaultValue": "uuid()",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "markAsTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "option",
                            "type": "string | number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "string | number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { v4 as uuid } from 'uuid';\n\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true\n    }\n  ]})\nexport class InputComponent implements ControlValueAccessor {\n\n  @Input() buttonText = '';\n  @Input() buttonType = 'button';\n  @Input() buttonTestName = '';\n  @Input() color = 'primary';\n  @Input() iconLeft: string | undefined;\n  @Input() minValue: number | null = null;\n\n  @Input() type = 'text';\n  @Input() name = '';\n  @Input() label: string | undefined;\n  @Input() errors: string[] = [];\n  @Input() isDisabled = false;\n  @Input() autocomplete = 'on';\n  @Input() placeholder = '';\n  @Input() e2eTestName = '';\n  @Output() clicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  inputId: string = uuid();\n\n  currentValue: string | number = '';\n\n  onChange(option: string | number): void {\n    this.propagateChange(option);\n  }\n\n  onBlur(): void {\n    this.markAsTouched();\n  }\n\n  onClicked(event: MouseEvent): void {\n    this.clicked.emit(event);\n  }\n\n  propagateChange = (value: string | number) => {};\n  markAsTouched = () => {};\n\n  registerOnChange(fn: () => {}): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.markAsTouched = fn;\n  }\n\n  writeValue(value: string | number): void {\n    if (value !== undefined) {\n      this.currentValue = value;\n    }\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/material_theme\";\n@import \"../../../../styles/mixins/forms\";\n\n\n\n.input-group {\n  display: flex;\n  justify-content: center;\n\n  .input {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n\n    .field-wrapper {\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-start;\n    }\n\n    &__label {\n      @include label;\n    }\n\n    &__field {\n      @include form-field;\n\n      &--border-accent {\n        border: 2px solid $cyan_70;\n      }\n\n      &--short {\n        border-right: none;\n        border-radius: 4px 0 0 4px;\n      }\n\n    }\n\n    &__button {\n      flex: 0 0 20%;\n      border-radius: 0 4px 4px 0;\n    }\n\n    &__error {\n      @include form-errors;\n    }\n  }\n}\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"input-group\">\n  <div class=\"input\">\n    <label class=\"input__label\" *ngIf=\"label\" [for]=\"inputId\">{{label}}</label>\n    <div class=\"field-wrapper\">\n      <input class=\"input__field\"\n             [type]=\"type\"\n             [id]=\"inputId\"\n             [(ngModel)]=\"currentValue\"\n             (ngModelChange)=\"onChange($event)\"\n             (blur)=\"onBlur()\"\n             name=\"{{name}}\"\n             [autocomplete]=\"autocomplete\"\n             [placeholder]=\"placeholder\"\n             [attr.data-test]=\"e2eTestName\"\n             [attr.min]=\"minValue\"\n      >\n      <app-button class=\"input__button\"\n                  *ngIf=\"!!buttonText\"\n                  [buttonText]=\"buttonText\"\n                  [buttonType]=\"buttonType\"\n                  [attr.data-test]=\"buttonTestName\"\n                  [isDisabled]=\"isDisabled\"\n                  [isInputGroup]=\"true\"\n                  [color]=\"color\"\n                  [hasErrors]=\"errors && errors.length > 0\"\n                  (clicked)=\"onClicked($event)\"\n      ></app-button>\n    </div>\n    <div>\n      <div class=\"input__error\" *ngFor=\"let error of errors\">{{error}}</div>\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "LoginContainerComponent",
            "id": "component-LoginContainerComponent-022720eb30720226967f28372309df4c",
            "file": "src/app/auth/containers/login-container/login-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-container",
            "styleUrls": [
                "./login-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.pipe(select(state => state.appState.language))",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "LoginCredentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "LoginCredentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { I18n, Language, LoginCredentials } from '../../../shared/model/model';\nimport { select, Store } from '@ngrx/store';\nimport { GlobalState, selectTranslations } from '../../../shared/state';\nimport { LoginPageActions } from '../../actions';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-login-container',\n  templateUrl: './login-container.component.html',\n  styleUrls: ['./login-container.component.scss']\n})\nexport class LoginContainerComponent implements OnInit {\n\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.pipe(select(state => state.appState.language));\n\n  constructor(private store: Store<GlobalState>) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  login(credentials: LoginCredentials): void {\n    this.store.dispatch(LoginPageActions.login({credentials}));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <app-login-form\n    [translations]=\"translations$ | async\"\n    [currentLang]=\"currentLanguage$ | async\"\n    (credentialsReceived)=\"login($event)\"\n  ></app-login-form>\n</div>\n"
        },
        {
            "name": "LoginFormComponent",
            "id": "component-LoginFormComponent-af64b8413f8d535ac14eb15ea4d83d7c",
            "file": "src/app/auth/components/login-form/login-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-form",
            "styleUrls": [
                "./login-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "'login'",
                    "line": 16
                },
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 18,
                    "type": "Language | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 17,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "credentialsReceived",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<LoginCredentials>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslatePipe } from '../../../i18n/pipes/translate.pipe';\nimport { DEFAULT_LANGUAGE } from '../../../shared/helpers/constants';\nimport { translateValidationErrors } from '../../../shared/helpers/helpers';\nimport { I18n, Language, LoginCredentials } from '../../../shared/model/model';\nimport * as CustomValidators from '../../../shared/validators/custom-validators.validator';\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.scss']\n})\nexport class LoginFormComponent {\n\n  @Input() buttonText = 'login';\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Output() credentialsReceived: EventEmitter<LoginCredentials> = new EventEmitter();\n\n  loginForm: FormGroup;\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.loginForm = new FormGroup({\n      identifier: new FormControl('', [\n        Validators.required,\n        CustomValidators.email,\n      ]),\n      password: new FormControl('', [\n        Validators.required,\n        Validators.minLength(4),\n      ])\n    });\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.loginForm?.controls[key] as FormControl;\n  }\n\n  onSubmit(): void {\n    this.credentialsReceived.emit(this.loginForm?.value);\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLang);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/settings/variables\";\n\n.form-wrapper{\n  padding: 1rem;\n  border: 1px solid $blue_80;\n  border-radius: $border-radius-default;\n\n  .login-form__input {\n    display: block;\n    margin-bottom: 0.5rem;\n  }\n\n  .form-button{\n    display: block;\n    margin-top: 1rem;\n  }\n}\n",
                    "styleUrl": "./login-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"form-wrapper\">\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n    <app-input\n      class=\"login-form__input\"\n      formControlName=\"identifier\"\n      [type]=\"'email'\"\n      [autocomplete]=\"'email'\"\n      [placeholder]=\"'Email'\"\n      [label]=\"'email' | translate:translations:currentLang\"\n      [errors]=\"getErrorsFor('identifier')\"\n    ></app-input>\n    <app-input\n      class=\"login-form__input\"\n      [formControl]=\"getFormControl('password')\"\n      [type]=\"'password'\"\n      [autocomplete]=\"buttonText==='login' ? 'current-password' : 'new-password'\"\n      [label]=\"'password' | translate:translations:currentLang\"\n      [errors]=\" getErrorsFor('password')\"\n    ></app-input>\n    <app-button class=\"form-button\"\n      [buttonText]=\"buttonText | translate:translations:currentLang\"\n      [buttonType]=\"'submit'\"\n      [isDisabled]=\"!loginForm.valid\"\n    >\n    </app-button>\n  </form>\n</div>\n"
        },
        {
            "name": "MealplanerContainerComponent",
            "id": "component-MealplanerContainerComponent-259d23fa59c464ba980a80f3ba9e3f90",
            "file": "src/app/meal-planer/containers/mealplaner-container/mealplaner-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mealplaner-container",
            "styleUrls": [
                "./mealplaner-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mealplaner-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-mealplaner-container',\n  templateUrl: './mealplaner-container.component.html',\n  styleUrls: ['./mealplaner-container.component.scss']\n})\nexport class MealplanerContainerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mealplaner-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>mealplaner-container works!</p>\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-21392c418863bfcd91975df7f42151bc",
            "file": "src/app/components/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [
                "./navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "null",
                    "line": 11,
                    "type": "Language | null"
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "null",
                    "line": 12,
                    "type": "boolean | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "null",
                    "line": 10,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "logout",
                    "defaultValue": "new EventEmitter()",
                    "line": 13,
                    "type": "EventEmitter<null>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { I18n, Language } from '../../shared/model/model';\n\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.scss']\n})\nexport class NavigationComponent implements OnInit {\n  @Input() translations: I18n | null = null;\n  @Input() currentLang: Language | null = null;\n  @Input() isLoggedIn: boolean | null = null;\n  @Output() logout: EventEmitter<null> = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onLogout(): void {\n    this.logout.emit();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles/settings/colors\";\n@import \"../../../styles/settings/breakpoints\";\n\n.main-navigation {\n  background: $blue_100;\n  width: 100%;\n  height: 3.5rem;\n  position: fixed;\n  top: 0;\n  display: flex;\n  align-items: center;\n\n  &__logo {\n    height: 2rem;\n    width: auto;\n    padding-right: 2rem;\n  }\n\n  &__content {\n    display: flex;\n    height: 100%;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  &__actions {\n    height: 2rem;\n    display: flex;\n  }\n\n  &__wrapper {\n    display: flex;\n    height: 100%;\n    align-items: center;\n  }\n\n  &__secondary-action {\n    color: white;\n    padding-right: 1.5rem;\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n  }\n\n  &__primary-action {\n    background: white;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 4px;\n    color: $blue_100;\n    text-decoration: none;\n    width: 7rem;\n  }\n}\n\n\n.mobile-navigation {\n  position: fixed;\n  background: #FFFFFF;\n  bottom: 0;\n  height: 4.5rem;\n  width: 100%;\n  box-shadow: 0px -4px 6px 0px rgba(224, 224, 224, 1);\n  border-bottom: 0.3rem solid $blue-grey_20;\n\n  @include large {\n    display: none;\n  }\n\n  &__link-list {\n    list-style: none;\n    display: flex;\n    margin-top: 0.4rem;\n  }\n\n  &__link-list-element {\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n    text-decoration: none;\n    text-align: center;\n  }\n\n  &__link-icon {\n    color: $blue_80;\n    font-size: 1.8rem;\n  }\n\n  &__link-text {\n    color: $blue_80;\n    font-size: 0.8rem;\n    margin-top: -0.3rem;\n    display: block;\n    margin-bottom: 0.3rem;\n  }\n\n\n  &__link {\n    text-decoration: none;\n  }\n\n  &__link--active {\n    text-decoration: none;\n\n    .mobile-navigation__status {\n      width: 5.5rem;\n      margin: 0 auto;\n      background-color: $blue_80;\n      height: 0.3rem;\n      position: relative;\n      bottom: 0;\n    }\n  }\n}\n\n.desktop-navigation {\n  display: none;\n  color: white;\n  list-style: none;\n  height: 100%;\n\n  @include large {\n    display: flex;\n  }\n\n  &__link-list {\n    color: white;\n    list-style: none;\n    display: flex;\n    height: 100%;\n  }\n\n  &__link {\n    color: #FFFFFF;\n    text-decoration: none;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    border-bottom: 4px solid transparent;\n  }\n\n  &__link--active {\n    border-bottom: 4px solid $blue-grey_10;\n  }\n\n  &__link-list-element {\n    padding-left: 1rem;\n    padding-right: 1rem;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    color: white;\n  }\n}\n\n\n",
                    "styleUrl": "./navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"main-navigation\">\n  <div class=\"container main-navigation__content\">\n    <div class=\"main-navigation__wrapper\">\n      <img class=\"main-navigation__logo\" src=\"../../../assets/logo-inverted.png\" [routerLink]=\"['/']\">\n      <div class=\"desktop-navigation\" *ngIf=\"isLoggedIn\">\n        <ul class=\"desktop-navigation__link-list\" data-test=\"desktop-navigation\">\n          <li class=\"desktop-navigation__link-list-element\">\n            <a [routerLink]=\"['/meal-planer']\"\n               class=\"desktop-navigation__link\"\n               routerLinkActive=\"desktop-navigation__link--active\">\n              {{'app.navigation.planer' | translate:translations:currentLang}}\n            </a>\n          </li>\n          <li class=\"desktop-navigation__link-list-element\">\n            <a [routerLink]=\"['/cook-book']\"\n               class=\"desktop-navigation__link\"\n               routerLinkActive=\"desktop-navigation__link--active\">\n              {{'app.navigation.menus' | translate:translations:currentLang}}\n            </a>\n          </li>\n          <li class=\"desktop-navigation__link-list-element\">\n            <a [routerLink]=\"['/shopping-list']\"\n               class=\"desktop-navigation__link\"\n               routerLinkActive=\"desktop-navigation__link--active\">\n              {{'app.navigation.shopping-list' | translate:translations:currentLang}}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <div class=\"main-navigation__actions\">\n\n\n      <app-button *ngIf=\"isLoggedIn; else registerTemplate\"\n                  [buttonText]=\"'app.navigation.logout' | translate:translations:currentLang\"\n                  color=\"inverted\" (click)=\"onLogout()\"\n                  class=\"main-navigation__primary-action\"\n                  data-test=\"logout-button\"></app-button>\n\n\n      <ng-template #registerTemplate>\n        <a class=\"main-navigation__secondary-action\"\n           [routerLink]=\"['/auth/login']\"\n           data-test=\"login-link\">\n          {{'app.navigation.login' | translate:translations:currentLang}}\n        </a>\n\n        <a          [routerLink]=\"['/auth/register']\"\n                    class=\"main-navigation__primary-action\"\n                    data-test=\"register-link\">\n          {{'app.navigation.register' | translate:translations:currentLang }}\n        </a>\n      </ng-template>\n    </div>\n  </div>\n</nav>\n\n\n<nav *ngIf=\"isLoggedIn\" class=\"mobile-navigation\">\n  <ul class=mobile-navigation__link-list data-test=\"mobile-navigation\">\n    <li class=\"mobile-navigation__link-list-element\">\n      <a class=\"mobile-navigation__link\" [routerLink]=\"['/meal-planer']\"\n         routerLinkActive=\"mobile-navigation__link--active\">\n        <fa-icon class=\"shopping-list__ellipsis mobile-navigation__link-icon\"\n                 [icon]=\"['fas','calendar-alt']\"></fa-icon>\n        <span\n          class=\"mobile-navigation__link-text\">{{'app.navigation.planer' | translate:translations:currentLang}}</span>\n        <div\n          class=\"mobile-navigation__status\"></div>\n      </a>\n    </li>\n\n    <li class=\"mobile-navigation__link-list-element\">\n      <a class=\"mobile-navigation__link\" [routerLink]=\"['/cook-book']\"\n         routerLinkActive=\"mobile-navigation__link--active\">\n        <fa-icon class=\"shopping-list__ellipsis mobile-navigation__link-icon\"\n                 [icon]=\"['fas','hamburger']\"></fa-icon>\n        <span\n          class=\"mobile-navigation__link-text\">{{'app.navigation.menus' | translate:translations:currentLang}}</span>\n        <div class=\"mobile-navigation__status\"></div>\n      </a>\n    </li>\n\n    <li class=\"mobile-navigation__link-list-element\">\n      <a class=\"mobile-navigation__link\" [routerLink]=\"['/shopping-list']\"\n         routerLinkActive=\"mobile-navigation__link--active\">\n        <fa-icon class=\"shopping-list__ellipsis mobile-navigation__link-icon\"\n                 [icon]=\"['fas','shopping-cart']\"></fa-icon>\n        <span\n          class=\"mobile-navigation__link-text\">{{'app.navigation.shopping-list' | translate:translations:currentLang}}</span>\n        <div class=\"mobile-navigation__status\"></div>\n      </a>\n    </li>\n  </ul>\n</nav>\n"
        },
        {
            "name": "RecipeFormComponent",
            "id": "component-RecipeFormComponent-c46ec9c0b5449a03ea4e66d9b30defe0",
            "file": "src/app/cookbook/components/recipe-form/recipe-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-form",
            "styleUrls": [
                "./recipe-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 16,
                    "type": "Language"
                },
                {
                    "name": "recipe",
                    "line": 17,
                    "type": "Recipe | undefined"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 15,
                    "type": "I18n"
                }
            ],
            "outputsClass": [
                {
                    "name": "recipeSaved",
                    "defaultValue": "new EventEmitter<Recipe>()",
                    "line": 18,
                    "type": "EventEmitter<Recipe>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "ingredients",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "recipeForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "units",
                    "defaultValue": "[]",
                    "type": "SelectOption<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "addEmptyIngredientRow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "createNewIngredientFormGroup",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "optional": true
                        },
                        {
                            "name": "unit",
                            "type": "Unit",
                            "optional": true
                        },
                        {
                            "name": "isStapleFood",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 81,
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "unit",
                            "type": "Unit",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isStapleFood",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUnits",
                    "args": [],
                    "optional": false,
                    "returnType": "SelectOption[]",
                    "typeParameters": [],
                    "line": 112
                },
                {
                    "name": "deleteIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIngredientFormControl",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 77,
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "overwriteFirstIngredient",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "RecipeIngredient"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "RecipeIngredient",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslatePipe } from '../../../i18n/pipes/translate.pipe';\nimport { DEFAULT_LANGUAGE } from '../../../shared/helpers/constants';\nimport { translateValidationErrors } from '../../../shared/helpers/helpers';\nimport { I18n, Language, Recipe, RecipeIngredient, SelectOption, Unit } from '../../../shared/model/model';\n\n@Component({\n  selector: 'app-recipe-form',\n  templateUrl: './recipe-form.component.html',\n  styleUrls: ['./recipe-form.component.scss']\n})\nexport class RecipeFormComponent implements OnInit {\n\n  @Input() translations: I18n = {};\n  @Input() currentLang: Language = DEFAULT_LANGUAGE;\n  @Input() recipe: Recipe | undefined;\n  @Output() recipeSaved: EventEmitter<Recipe> = new EventEmitter<Recipe>();\n\n  recipeForm: FormGroup;\n  ingredients: FormArray;\n  units: SelectOption<string>[] = [];\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.recipeForm = new FormGroup({\n      title: new FormControl('', [Validators.required]),\n      url: new FormControl(''),\n      ingredients: new FormArray([\n        this.createNewIngredientFormGroup()\n      ])\n    });\n    this.ingredients = this.recipeForm?.controls.ingredients as FormArray;\n  }\n\n  ngOnInit(): void {\n    this.units = this.createUnits();\n    this.fillForm();\n  }\n\n  fillForm(): void {\n    if (!!this.recipe) {\n      Object.keys(this.recipe).forEach((key: string) => {\n        if (key === 'ingredients') {\n          this.recipe?.ingredients.forEach((ingredient: RecipeIngredient, index: number) => {\n            if (index === 0) {\n              this.overwriteFirstIngredient(ingredient);\n            } else {\n              (this.recipeForm.controls.ingredients as FormArray)\n                .push(this.createNewIngredientFormGroup(\n                  ingredient.title,\n                  ingredient.amount,\n                  ingredient.unit,\n                  ingredient.isStapleFood)\n                );\n            }\n          });\n        } else {\n          // @ts-ignore\n          this.getFormControl(key).setValue(this.recipe[key]);\n        }\n      });\n    }\n  }\n\n  overwriteFirstIngredient(ingredient: RecipeIngredient): void {\n    Object.keys(ingredient).forEach((key: string) => {\n      ((this.recipeForm.controls.ingredients as FormArray).at(0) as FormGroup).controls[key]\n        // @ts-ignore\n        .setValue(ingredient[key]);\n    });\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.recipeForm?.controls[key] as FormControl;\n  }\n\n  getIngredientFormControl(ingredient: AbstractControl, key: string): FormControl {\n    return (ingredient as FormGroup).controls[key] as FormControl;\n  }\n\n  createNewIngredientFormGroup(name?: string, amount?: number, unit?: Unit, isStapleFood?: boolean): FormGroup {\n    return new FormGroup({\n      title: new FormControl(name || '', [Validators.required]),\n      amount: new FormControl(amount || null, [Validators.required, Validators.min(1)]),\n      unit: new FormControl(unit || 'kg', [Validators.required]),\n      isStapleFood: new FormControl(isStapleFood || false, [Validators.required])\n    });\n  }\n\n  onSubmit(): void {\n    const recipe = this.recipeForm?.value;\n    recipe.ingredients.map((ingredient: RecipeIngredient) => ingredient.amount = +ingredient.amount);\n    this.recipeSaved.emit(recipe);\n  }\n\n  addEmptyIngredientRow(): void {\n    this.ingredients.push(this.createNewIngredientFormGroup());\n  }\n\n  deleteIngredient(index: number): void {\n    (this.recipeForm?.controls.ingredients as FormArray).removeAt(index);\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLang);\n  }\n\n  createUnits(): SelectOption<string>[] {\n    return [\n      {\n        value: 'tableSpoon',\n        key: this.translatePipe.transform('forms.units.tablespoon', this.translations, this.currentLang)\n      },\n      {\n        value: 'coffeeSpoon',\n        key: this.translatePipe.transform('forms.units.coffee-spoon', this.translations, this.currentLang)\n      },\n      {\n        value: 'pinch',\n        key: this.translatePipe.transform('forms.units.pinch', this.translations, this.currentLang)\n      },\n      {\n        value: 'pack',\n        key: this.translatePipe.transform('forms.units.pack', this.translations, this.currentLang)\n      },\n      {\n        value: 'piece',\n        key: this.translatePipe.transform('forms.units.piece', this.translations, this.currentLang)\n      },\n      {value: 'kg', key: 'kg'},\n      {value: 'g', key: 'g'},\n      {value: 'l', key: 'l'},\n      {value: 'dl', key: 'dl'},\n      {value: 'ml', key: 'ml'},\n    ];\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/settings/breakpoints\";\n@import \"../../../../styles/mixins/forms\";\n@import \"../../../../styles/settings/variables\";\n\n.recipe-form {\n\n  &__input {\n    display: block;\n    margin-bottom: 1rem;\n  }\n\n  &__button {\n    display: block;\n    margin-top: 2rem;\n  }\n\n  .ingredients-label{\n    @include label;\n  }\n\n}\n\n.ingredients {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  overflow: hidden;\n  border: $border-primary;\n  border-radius: $border-radius-default;\n\n  &__button{\n    margin: 0 2rem 1rem 2rem;\n  }\n\n  &__row {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    //mixin\n    border-bottom: 1px solid $blue_70;\n    padding: 1rem 2rem;\n\n    @include large {\n      flex-direction: row;\n    }\n\n    &--last {\n      border-bottom: none;\n    }\n\n    &--input-amount {\n      @include large {\n        max-width: 8rem;\n      }\n    }\n\n    &--input {\n      padding-bottom: 1rem;\n      flex: 1 1 auto;\n\n      @include large {\n        padding-bottom: 0;\n        padding-right: 1rem;\n\n        &:last-child {\n          padding-right: 0;\n        }\n      }\n    }\n\n    &--input-unit {\n      @include large {\n        max-width: 8.5rem;\n      }\n    }\n\n    &--input-toggle {\n      margin-bottom: 1rem;\n      color: $blue_70;\n      @include large {\n        max-width: 10rem;\n        margin: auto 0;\n      }\n    }\n\n  }\n\n  .icon-wrapper {\n    background-color: $red_70;\n    border-radius: $border-radius-default;\n    @include button();\n\n    &--disabled {\n      background-color: $blue-grey_50;\n      cursor: not-allowed;\n    }\n\n    @include large {\n      background: none;\n      border: none;\n      width: fit-content;\n      height: unset;\n    }\n\n    .delete-icon {\n      color: $red_70;\n      cursor: pointer;\n      margin: auto;\n      font-size: 1.5rem;\n      visibility: hidden;\n\n      @include large() {\n        visibility: visible;\n      }\n\n      &--disabled {\n        color: $blue-grey_10;\n        cursor: not-allowed;\n\n        @include large {\n          color: $blue-grey_50;\n        }\n      }\n    }\n\n    .delete-text {\n      color: $blue-grey_10;\n\n      @include large() {\n        display: none;\n      }\n    }\n  }\n\n}\n\n\n",
                    "styleUrl": "./recipe-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form class=\"recipe-form\" [formGroup]=\"recipeForm\" (ngSubmit)=\"onSubmit()\">\n  <app-input\n    class=\"recipe-form__input recipe-form--input-title\"\n    [name]=\"'title'\"\n    [placeholder]=\"'recipe-form.placeholder.title' | translate:translations:currentLang\"\n    [label]=\"'recipe-form.label.title' | translate:translations:currentLang\"\n    [errors]=\"getErrorsFor('title')\"\n    [formControl]=\"getFormControl('title')\"></app-input>\n  <app-input\n    class=\"recipe-form__input recipe-form--input-url\"\n    [name]=\"'url'\"\n    [placeholder]=\"'recipe-form.placeholder.url' | translate:translations:currentLang\"\n    [label]=\"'recipe-form.label.url' | translate:translations:currentLang\"\n    [formControl]=\"getFormControl('url')\"></app-input>\n\n  <label class=\"ingredients-label\">{{'recipe-form.ingredients.label-text' | translate:translations:currentLang}}</label>\n  <div class=\"ingredients recipe-form__input\">\n    <div *ngFor=\"let ingredient of ingredients.controls; let last = last; let index = index\"\n         class=\"ingredients__row\"\n         [ngClass]=\"{'ingredients__row--last': last}\">\n      <app-input\n        class=\"ingredients__row--input ingredients__row--input-amount\"\n        [type]=\"'number'\"\n        [minValue]=\"0\"\n        [name]=\"'amount'\"\n        [placeholder]=\"'recipe-form.placeholder.amount' | translate:translations:currentLang\"\n        [formControl]=\"getIngredientFormControl(ingredient, 'amount')\">\n      </app-input>\n      <app-select\n        class=\"ingredients__row--input ingredients__row--input-unit\"\n        [options]=\"units\"\n        [name]=\"'unit'\"\n        [formControl]=\"getIngredientFormControl(ingredient, 'unit')\">\n      </app-select>\n      <app-input\n        class=\"ingredients__row--input\"\n        [name]=\"'title'\"\n        [placeholder]=\"'recipe-form.placeholder.title' | translate:translations:currentLang\"\n        [formControl]=\"getIngredientFormControl(ingredient, 'title')\">\n      </app-input>\n      <mat-slide-toggle\n        class=\"ingredients__row--input ingredients__row--input-toggle\"\n        [color]=\"'primary'\"\n        [formControl]=\"getIngredientFormControl(ingredient, 'isStapleFood')\">\n        {{'recipe-form.text.toggle' | translate:translations:currentLang}}\n      </mat-slide-toggle>\n      <button\n        class=\"icon-wrapper\"\n        (click)=\"deleteIngredient(index)\"\n        [disabled]=\"ingredients?.length === 1\"\n        [ngClass]=\"{'icon-wrapper--disabled': ingredients?.length === 1}\">\n        <fa-icon\n          class=\"delete-icon\"\n          [ngClass]=\"{'delete-icon--disabled': ingredients?.length === 1}\"\n          [icon]=\"['fas', 'times']\">\n        </fa-icon>\n        <span class=\"delete-text\">{{'recipe-form.button.delete' | translate:translations:currentLang}}</span>\n      </button>\n    </div>\n    <app-button\n      class=\"ingredients__button\"\n      [buttonText]=\"'recipe-form.button.new-ingredient' | translate:translations:currentLang\"\n      [isDisabled]=\"ingredients.invalid\"\n      [color]=\"'accent'\"\n      (clicked)=\"addEmptyIngredientRow()\">\n    </app-button>\n  </div>\n\n  <app-button\n    class=\"recipe-form__button\"\n    [buttonType]=\"'submit'\"\n    [buttonText]=\"(recipe ? 'recipe-form.button.modify' : 'recipe-form.button.submit') | translate:translations:currentLang\"\n    [isDisabled]=\"recipeForm.invalid\"></app-button>\n</form>\n\n\n\n"
        },
        {
            "name": "RegisterContainerComponent",
            "id": "component-RegisterContainerComponent-f7459dd6c8f743efcfeb8ad6c5029d48",
            "file": "src/app/auth/containers/register-container/register-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-container",
            "styleUrls": [
                "./register-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-register-container',\n  templateUrl: './register-container.component.html',\n  styleUrls: ['./register-container.component.scss']\n})\nexport class RegisterContainerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./register-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>register-container works!</p>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-c98c5d0c72c15c4ab5e548f9a19a7243",
            "file": "src/app/shared/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 20,
                    "type": "FormControl | undefined"
                },
                {
                    "name": "e2eTestName",
                    "defaultValue": "''",
                    "line": 26
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "line": 24,
                    "type": "string[]"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 25
                },
                {
                    "name": "label",
                    "line": 23,
                    "type": "string | undefined"
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "line": 21
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 22,
                    "type": "SelectOption<T>[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanged",
                    "defaultValue": "new EventEmitter()",
                    "line": 27,
                    "type": "EventEmitter<T | string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "inputId",
                    "defaultValue": "uuid()",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "selectedValue",
                    "defaultValue": "null",
                    "type": "T | string | null",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "getOptionKey",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOption<T>"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOption<T>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "option",
                            "type": "T | string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "T | string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, OnInit, Output } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { SelectOption } from '../../model/model';\nimport { v4 as uuid } from 'uuid';\n\n\n\n@Component({\n  selector: 'app-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectComponent),\n      multi: true\n    }\n  ]})\nexport class SelectComponent<T> implements OnInit, ControlValueAccessor {\n  @Input() control: FormControl | undefined;\n  @Input() name = '';\n  @Input() options: SelectOption<T>[] = [];\n  @Input() label: string | undefined;\n  @Input() errors: string[] = [];\n  @Input() isDisabled = false;\n  @Input() e2eTestName = '';\n  @Output() valueChanged: EventEmitter<T | string> = new EventEmitter();\n\n  selectedValue: T | string | null = null;\n  inputId: string = uuid();\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.selectedValue = this.options[0].value;\n    this.propagateChange(this.options[0].value);\n  }\n\n  onChange(option: T | string): void {\n    this.propagateChange(option);\n  }\n\n  getOptionKey(option: SelectOption<T>): string {\n    return option?.key ?? ((typeof option.value === 'string') ? option.value : JSON.stringify(option.value));\n  }\n\n  propagateChange = (value: T | string) => {};\n\n  registerOnChange(fn: () => {}): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n  }\n\n  writeValue(value: T | string): void {\n    if (value !== undefined) {\n      this.selectedValue = value;\n    }\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/mixins/forms\";\n\n.select {\n\n  &__field {\n    @include form-field;\n  }\n\n  &__label {\n    @include label;\n  }\n\n  &__error {\n    @include form-errors;\n  }\n}\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 30
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<label *ngIf=\"label\" class=\"select__label\" for=\"{{inputId}}\">{{label}}</label>\n\n<select\n  [(ngModel)]=\"selectedValue\"\n  ngDefaultControl\n  (ngModelChange)=\"onChange($event)\"\n  [attr.disabled]=\"isDisabled ? '' : null\"\n  [attr.data-test]=\"e2eTestName\"\n  class=\"select__field\"\n  name=\"{{name}}\"\n  id=\"{{inputId}}\"\n  [ngClass]=\"{'select__field--error': errors && errors.length > 0}\"\n>\n  <option\n    *ngFor=\"let option of options\"\n    [ngValue]=\"option.value\">\n    {{getOptionKey(option)}}\n  </option>\n</select>\n\n<div class=\"error-wrapper\">\n  <div class=\"select__error\" *ngFor=\"let error of errors\">{{error}}</div>\n</div>\n\n"
        },
        {
            "name": "ShoppingListComponent",
            "id": "component-ShoppingListComponent-43947d253f4375d72a182bbba5b9fae3",
            "file": "src/app/shopping-list/components/shopping-list/shopping-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list",
            "styleUrls": [
                "./shopping-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 13,
                    "type": "Language"
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "line": 11,
                    "type": "ShoppingListItem[] | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 12,
                    "type": "I18n"
                }
            ],
            "outputsClass": [
                {
                    "name": "itemDeleted",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter<ShoppingListItem>"
                },
                {
                    "name": "listItemMoved",
                    "defaultValue": "new EventEmitter()",
                    "line": 15,
                    "type": "EventEmitter<ArrayItemMovedEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "type": "ArrayItemMovedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "type": "ArrayItemMovedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemChecked",
                    "args": [
                        {
                            "name": "item",
                            "type": "ShoppingListItem"
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { ArrayItemMovedEvent, Language, I18n, ShoppingListItem } from '../../../shared/model/model';\nimport { DEFAULT_LANGUAGE } from '../../../shared/helpers/constants';\n\n@Component({\n  selector: 'app-shopping-list',\n  templateUrl: './shopping-list.component.html',\n  styleUrls: ['./shopping-list.component.scss']\n})\nexport class ShoppingListComponent{\n  @Input() items: ShoppingListItem[] | null = [];\n  @Input() translations: I18n = {};\n  @Input() currentLang: Language = DEFAULT_LANGUAGE;\n  @Output() itemDeleted: EventEmitter<ShoppingListItem> = new EventEmitter();\n  @Output() listItemMoved: EventEmitter<ArrayItemMovedEvent> = new EventEmitter();\n\n\n  itemChecked(item: ShoppingListItem, isChecked: boolean): void {\n    this.itemDeleted.emit(item);\n  }\n\n  drop({previousIndex, currentIndex}: ArrayItemMovedEvent): void {\n    if ( currentIndex !== previousIndex) {\n      this.listItemMoved.emit({currentIndex, previousIndex});\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n\n.shopping-list {\n  width: 100%;\n  display: block;\n  overflow: hidden;\n\n  &__item {\n    border-bottom: solid 1px $blue-grey_30;\n    color: $text-70;\n    font-size: 16px;\n    box-sizing: border-box;\n    background: white;\n\n    &:last-child {\n      border: none;\n    }\n  }\n\n  &__item-column-wrapper {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  &__item-text {\n    padding: 20px 10px 15px 10px;\n    display: block;\n  }\n\n  &__ellipsis {\n    color: $blue-grey_50;\n    padding: 0 20px;\n    cursor: move;\n  }\n\n  &__status {\n    height: 5px;\n    width: 0;\n    flex-basis: 100%;\n    background: $blue_50;\n\n    &--deleted {\n      width: 100%;\n      transition: width 1.5s linear;\n    }\n  }\n}\n\n.cdk-drag-preview {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow: 0 5px 5px -3px $blue-grey_30,\n  0 8px 10px 1px $blue-grey_20,\n  0 3px 14px 2px $blue-grey_10;\n}\n\n.cdk-drag-placeholder {\n  opacity: 0;\n}\n\n.cdk-drag-animating {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n.shopping-list-item.cdk-drop-list-dragging .shopping-list-item:not(.cdk-drag-placeholder) {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n",
                    "styleUrl": "./shopping-list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div cdkDropList class=\"shopping-list\" (cdkDropListDropped)=\"drop($event)\">\n  <div class=\"shopping-list__item\" *ngFor=\"let item of items\" cdkDrag>\n    <div class=\"shopping-list__item-column-wrapper\">\n      <mat-checkbox\n        class=\"shopping-list__item-text\"\n        [checked]=\"item.isChecked\"\n        [color]=\"'primary'\"\n        [disableRipple]=\"true\"\n        (change)=\"itemChecked(item, $event.checked)\">\n        <span>{{item.amount}} {{item.unit | translate:translations:currentLang }} {{item.title}}</span>\n      </mat-checkbox>\n      <fa-icon\n        cdkDragHandle\n        class=\"shopping-list__ellipsis\"\n        [icon]=\"['fas','ellipsis-v']\"\n      ></fa-icon>\n    </div>\n    <div class=\"shopping-list__status\" [class.shopping-list__status--deleted]=\"item.isChecked\"></div>\n  </div>\n</div>\n\n\n\n"
        },
        {
            "name": "ShoppingListContainerComponent",
            "id": "component-ShoppingListContainerComponent-52ff9ee8f0120b76aa5a43e93ad8250f",
            "file": "src/app/shopping-list/containers/shopping-list-container/shopping-list-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list-container",
            "styleUrls": [
                "./shopping-list-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeShoppingListId$",
                    "defaultValue": "this.store.select(activeShoppingListId)",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.select(selectCurrentLanguage)",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "shoppingLists$",
                    "defaultValue": "this.store.select(selectShoppingLists)",
                    "type": "Observable<[] | null>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "shoppingListsItems$",
                    "defaultValue": "this.store.select(selectCurrentShoppingListItems)",
                    "type": "Observable<ShoppingListItem[]>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "onShoppingListChange",
                    "args": [
                        {
                            "name": "shoppingListId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "shoppingListId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemAdded",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemDeleted",
                    "args": [
                        {
                            "type": "DeleteShoppingListItemEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "type": "DeleteShoppingListItemEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemMoved",
                    "args": [
                        {
                            "type": "ShoppingListItemMovedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "type": "ShoppingListItemMovedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  BasicShoppingListItem,\n  DeleteShoppingListItemEvent,\n  I18n,\n  Language,\n  ShoppingList,\n  ShoppingListItem,\n  ShoppingListItemMovedEvent\n} from '../../../shared/model/model';\nimport {\n  activeShoppingListId,\n  GlobalState,\n  selectCurrentLanguage,\n  selectCurrentShoppingListItems,\n  selectShoppingLists,\n  selectTranslations\n} from '../../../shared/state';\nimport { ShoppingListContainerActions } from '../../actions';\nimport { Store } from '@ngrx/store';\nimport { v4 as uuid } from 'uuid';\n\n@Component({\n  selector: 'app-shopping-list-container',\n  templateUrl: './shopping-list-container.component.html',\n  styleUrls: ['./shopping-list-container.component.scss']\n})\nexport class ShoppingListContainerComponent implements OnInit {\n\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.select(selectCurrentLanguage);\n  shoppingListsItems$: Observable<ShoppingListItem[]> = this.store.select(selectCurrentShoppingListItems);\n  shoppingLists$: Observable<ShoppingList[] | null> = this.store.select(selectShoppingLists);\n  activeShoppingListId$: Observable<string | undefined> = this.store.select(activeShoppingListId);\n\n  constructor(private store: Store<GlobalState>) {\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(ShoppingListContainerActions.loadShoppingLists());\n  }\n\n  onShoppingListChange(shoppingListId: string): void {\n    this.store.dispatch(ShoppingListContainerActions.changeShoppingList({shoppingListId}));\n  }\n\n  onShoppingListItemAdded(shoppingListItem: BasicShoppingListItem): void {\n    this.store.dispatch(ShoppingListContainerActions.addShoppingListItem({optimisticId: uuid(), shoppingListItem}));\n  }\n\n  onShoppingListItemDeleted({shoppingListId, shoppingListItem}: DeleteShoppingListItemEvent): void {\n    this.store.dispatch(ShoppingListContainerActions.deleteShoppingListItem({shoppingListItem}));\n  }\n\n  onShoppingListItemMoved({shoppingListId, previousIndex, currentIndex}: ShoppingListItemMovedEvent): void {\n    this.store.dispatch(ShoppingListContainerActions.moveShoppingListItem({shoppingListId, previousIndex, currentIndex}));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shopping-list-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-shopping-list-page\n  [shoppingLists]=\"shoppingLists$ | async\"\n  [activeShoppingListId]=\"activeShoppingListId$ | async\"\n  [shoppingListItems]=\"shoppingListsItems$ | async\"\n  [translations]=\"translations$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n  (changeShoppingList)=\"onShoppingListChange($event)\"\n  (addShoppingListItem)=\"onShoppingListItemAdded($event)\"\n  (deleteShoppingListItem)=\"onShoppingListItemDeleted($event)\"\n  (moveShoppingListItem)=\"onShoppingListItemMoved($event)\">\n</app-shopping-list-page>\n"
        },
        {
            "name": "ShoppingListFormComponent",
            "id": "component-ShoppingListFormComponent-6e077664103bb5353f8558a256c7aab0",
            "file": "src/app/shopping-list/components/shopping-list-form/shopping-list-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list-form",
            "styleUrls": [
                "./shopping-list-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 15,
                    "type": "Language"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 14,
                    "type": "I18n"
                }
            ],
            "outputsClass": [
                {
                    "name": "itemAdded",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter<BasicShoppingListItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "addItemForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "units",
                    "defaultValue": "[]",
                    "type": "SelectOption<Unit>[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 55,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { BasicShoppingListItem, I18n, Language, SelectOption, Unit } from '../../../shared/model/model';\nimport { DEFAULT_LANGUAGE } from '../../../shared/helpers/constants';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslatePipe } from '../../../i18n/pipes/translate.pipe';\nimport { translateValidationErrors } from '../../../shared/helpers/helpers';\n\n@Component({\n  selector: 'app-shopping-list-form',\n  templateUrl: './shopping-list-form.component.html',\n  styleUrls: ['./shopping-list-form.component.scss']\n})\nexport class ShoppingListFormComponent implements OnInit {\n  @Input() translations: I18n = {};\n  @Input() currentLang: Language = DEFAULT_LANGUAGE;\n  @Output() itemAdded: EventEmitter<BasicShoppingListItem> = new EventEmitter();\n\n  addItemForm: FormGroup;\n\n  units: SelectOption<Unit>[] = [];\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.addItemForm = new FormGroup({\n      amount:  new FormControl('', [\n        Validators.required,\n      ]),\n      unit:  new FormControl('pack', [\n        Validators.required,\n      ]),\n      title:  new FormControl('', [\n        Validators.required,\n      ]),\n    });\n  }\n\n  ngOnInit(): void {\n    this.units = [\n      {value: 'pack', key: this.translatePipe.transform('shoppingList.addForm.pack', this.translations, this.currentLang)},\n      {value: 'piece', key: this.translatePipe.transform('shoppingList.addForm.piece', this.translations, this.currentLang)},\n      {value: 'kg', key: 'kg'},\n      {value: 'g', key: 'g'},\n      {value: 'l', key: 'l'},\n      {value: 'dl', key: 'dl'},\n    ];\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.addItemForm?.controls[key] as FormControl;\n  }\n\n  onSubmit(): void {\n    this.itemAdded.emit(this.addItemForm?.value);\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLang);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/settings/breakpoints\";\n@import \"../../../../styles/settings/variables\";\n\n.add-items-form {\n  display: flex;\n  flex-direction: column;\n  border: 1px solid $blue_80;\n  border-radius: $border-radius-default;\n  padding: 1rem 2rem;\n\n  @include large {\n    flex-direction:  row;\n  }\n\n  &--input-amount {\n    @include large {\n      max-width: 8rem;\n    }\n  }\n\n  &--input {\n    padding-bottom: 1rem;\n    flex: 1 1 auto;\n\n    @include large {\n      padding-bottom: 0;\n      padding-right: 1rem;\n    }\n  }\n\n  &--input-unit {\n    @include large {\n      max-width: 8.5rem;\n    }\n  }\n\n  &--submit {\n    height: 2.5rem;\n\n    @include large {\n      height: auto;\n    }\n  }\n}\n",
                    "styleUrl": "./shopping-list-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form-wrapper\">\n  <form class=\"add-items-form\" [formGroup]=\"addItemForm\" (ngSubmit)=\"onSubmit()\">\n    <app-input\n      class=\"add-items-form--input add-items-form--input-amount\"\n      type=\"number\"\n      [minValue]=\"0\"\n      [name]=\"'amount'\"\n      [placeholder]=\"'shoppingList.addForm.amount' | translate:translations:currentLang\"\n      [formControl]=\"getFormControl('amount')\"></app-input>\n\n    <app-select\n      class=\"add-items-form--input add-items-form--input-unit\"\n      [options]=\"units\"\n      [name]=\"'unit'\"\n      [formControl]=\"getFormControl('unit')\">\n    </app-select>\n\n    <app-input\n      class=\"add-items-form--input\"\n      [placeholder]=\"'shoppingList.addForm.product' | translate:translations:currentLang\"\n      [formControl]=\"getFormControl('title')\">\n    </app-input>\n\n    <app-button\n      class=\"add-items-form--submit\"\n      [buttonType]=\"'submit'\"\n      [buttonText]=\"'shoppingList.addForm.addLabel' | translate:translations:currentLang\"\n      [isDisabled]=\"addItemForm.invalid\"></app-button>\n  </form>\n</div>\n\n"
        },
        {
            "name": "ShoppingListPageComponent",
            "id": "component-ShoppingListPageComponent-478cfcf9c399c74250ab56121dfbe98e",
            "file": "src/app/shopping-list/components/shopping-list-page/shopping-list-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list-page",
            "styleUrls": [
                "./shopping-list-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeShoppingListId",
                    "defaultValue": "undefined",
                    "line": 20,
                    "type": "string | undefined | null"
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 22,
                    "type": "Language | null"
                },
                {
                    "name": "shoppingListItems",
                    "defaultValue": "[]",
                    "line": 19,
                    "type": "ShoppingListItem[] | null"
                },
                {
                    "name": "shoppingLists",
                    "defaultValue": "[]",
                    "line": 18,
                    "type": "ShoppingList[] | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 21,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "addShoppingListItem",
                    "defaultValue": "new EventEmitter()",
                    "line": 25,
                    "type": "EventEmitter<BasicShoppingListItem>"
                },
                {
                    "name": "changeShoppingList",
                    "defaultValue": "new EventEmitter()",
                    "line": 24,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "deleteShoppingListItem",
                    "defaultValue": "new EventEmitter()",
                    "line": 26,
                    "type": "EventEmitter<DeleteShoppingListItemEvent>"
                },
                {
                    "name": "moveShoppingListItem",
                    "defaultValue": "new EventEmitter()",
                    "line": 27,
                    "type": "EventEmitter<ShoppingListItemMovedEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "onItemAdded",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListChange",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemDeleted",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemMoved",
                    "args": [
                        {
                            "name": "arrayItemMovedEvent",
                            "type": "ArrayItemMovedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "arrayItemMovedEvent",
                            "type": "ArrayItemMovedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport {\n  AddShoppingListItemEvent,\n  ArrayItemMovedEvent, BasicShoppingListItem,\n  DeleteShoppingListItemEvent, I18n, Language,\n  ShoppingList,\n  ShoppingListItem,\n  ShoppingListItemMovedEvent\n} from '../../../shared/model/model';\nimport { DEFAULT_LANGUAGE } from '../../../shared/helpers/constants';\n\n@Component({\n  selector: 'app-shopping-list-page',\n  templateUrl: './shopping-list-page.component.html',\n  styleUrls: ['./shopping-list-page.component.scss']\n})\nexport class ShoppingListPageComponent implements OnInit {\n  @Input() shoppingLists: ShoppingList[] | null = [];\n  @Input() shoppingListItems: ShoppingListItem[] | null = [];\n  @Input() activeShoppingListId: string | undefined | null = undefined;\n  @Input() translations: I18n | null = {};\n  @Input() currentLanguage: Language | null = DEFAULT_LANGUAGE;\n\n  @Output() changeShoppingList: EventEmitter<string> = new EventEmitter();\n  @Output() addShoppingListItem: EventEmitter<BasicShoppingListItem> = new EventEmitter();\n  @Output() deleteShoppingListItem: EventEmitter<DeleteShoppingListItemEvent> = new EventEmitter();\n  @Output() moveShoppingListItem: EventEmitter<ShoppingListItemMovedEvent> = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  onShoppingListChange(id: string): void {\n    this.changeShoppingList.emit(id);\n  }\n\n  onItemAdded(shoppingListItem: BasicShoppingListItem): void {\n    if (this.activeShoppingListId) {\n      this.addShoppingListItem.emit({...shoppingListItem, shoppingList: this.activeShoppingListId});\n    }\n  }\n\n  onShoppingListItemDeleted(shoppingListItem: ShoppingListItem): void {\n    if (this.activeShoppingListId) {\n      this.deleteShoppingListItem.emit({shoppingListItem, shoppingListId: this.activeShoppingListId});\n    }\n  }\n\n  onShoppingListItemMoved(arrayItemMovedEvent: ArrayItemMovedEvent): void {\n    if (this.activeShoppingListId) {\n      this.moveShoppingListItem.emit({shoppingListId: this.activeShoppingListId, ...arrayItemMovedEvent});\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".active {\n  font-weight: 500;\n}\n",
                    "styleUrl": "./shopping-list-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 27
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"container\">\n  <div>\n    <ul>\n      <li *ngFor=\"let shoppingList of shoppingLists\" [ngClass]=\"{active: shoppingList.id === activeShoppingListId}\" (click)=\"onShoppingListChange(shoppingList.id)\">\n        {{shoppingList | json}}\n      </li>\n    </ul>\n  </div>\n  <app-shopping-list-form [translations]=\"translations\" [currentLang]=\"currentLanguage\" (itemAdded)=\"onItemAdded($event)\">\n  </app-shopping-list-form>\n  <app-shopping-list\n  [items]=\"shoppingListItems\"\n  (listItemMoved)=\"onShoppingListItemMoved($event)\"\n  (itemDeleted)=\"onShoppingListItemDeleted($event)\">\n\n  </app-shopping-list>\n</div>\n\n\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ErrorInterceptor"
                        },
                        {
                            "name": "JwtInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BetaTeaserComponent"
                        },
                        {
                            "name": "NavigationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "I18nModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginContainerComponent"
                        },
                        {
                            "name": "LoginFormComponent"
                        },
                        {
                            "name": "RegisterContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "I18nModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CookbookModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RecipeFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CookbookRoutingModule"
                        },
                        {
                            "name": "I18nModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CookbookRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "I18nModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "I18nService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TranslatePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TranslatePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MealPlanerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MealplanerContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MealPlanerRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MealPlanerRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "SelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShoppingListComponent"
                        },
                        {
                            "name": "ShoppingListContainerComponent"
                        },
                        {
                            "name": "ShoppingListFormComponent"
                        },
                        {
                            "name": "ShoppingListPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "I18nModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "ShoppingListRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingListRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Accent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Accent',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    color: 'accent'\n  }\n})"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/navigation/navigation.stories.ts",
                "type": "object",
                "defaultValue": "{\n  logout: action('clicked')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/components/login-form/login-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  credentialsReceived: action('credentialsReceived')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cookbook/components/recipe-form/recipe-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  recipeSaved: action('recipeSaved')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "object",
                "defaultValue": "{\n  clicked: action('clicked')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "object",
                "defaultValue": "{\n  valueChanged: action('valueChanged'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "object",
                "defaultValue": "{\n  clicked: action('clicked'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  itemAdded: action('itemAdded'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "object",
                "defaultValue": "{\n  itemDeleted: action('itemDeleted'),\n  listItemMoved: action('listItemMoved'),\n}"
            },
            {
                "name": "activeShoppingListId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n)"
            },
            {
                "name": "addShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Add Shopping List Items',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>()\n)"
            },
            {
                "name": "addShoppingListItemFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Items Failure',\n  props<{ shoppingListItem: BasicShoppingListItem }>()\n)"
            },
            {
                "name": "addShoppingListItemSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Items Success',\n  props<{ optimisticId: string, shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "appStateReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/reducers/app-state.reducers.ts",
                "type": "",
                "defaultValue": "createReducer<AppState, Action>(\n  initialAppState,\n  on(\n    I18nApiActions.getI18nSuccess,\n    (state, {i18n}: { i18n: I18n }) => {\n      return {\n        ...state,\n        i18n: {\n          ...state.i18n,\n          ...i18n\n        }\n      };\n    }),\n  on(\n    AuthApiActions.refreshTokenSuccess,\n    (state, {user}: { user: User }) => {\n      return {\n        ...state,\n        user: {\n          ...user\n        }\n      };\n    }),\n  on(\n    AuthApiActions.refreshTokenFailed,\n    (state) => {\n      return {\n        ...state,\n        user: null\n      };\n    }),\n  on(\n    AuthApiActions.loginSuccess,\n    (state, {user}: { user: User }) => {\n      return {\n        ...state,\n        user: {\n          ...user\n        },\n      };\n    }),\n  on(\n    AuthenticatedGuardActions.setRequestedUrlBeforeLoginWasRequired,\n    (state, {url}: { url: string }) => {\n      return {\n        ...state,\n        requestedUrlBeforeLoginWasRequired: url\n      };\n    }),\n  on(\n    AppInitializationActions.setLanguage,\n    (state, {language}: { language: Language }) => {\n      return {\n        ...state,\n        language,\n      };\n    }),\n  on(\n    ErrorInterceptorActions.logout,\n    NavActions.logout,\n    (state) => {\n      return {\n        ...state,\n        user: null,\n      };\n    })\n)"
            },
            {
                "name": "buttonData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/navigation/navigation.stories.ts",
                "type": "object",
                "defaultValue": "{\n  isLoggedIn: false,\n  currentLang: 'de',\n  translations: {\n    de: {\n      'app.navigation.login': 'Login',\n      'app.navigation.logout': 'Abmelden',\n      'app.navigation.register': 'Registrieren',\n      'app.navigation.planer': 'Menuplaner',\n      'app.navigation.menus': 'Menüs',\n      'app.navigation.shopping-list': 'Einkaufsliste',\n    }\n  }\n}"
            },
            {
                "name": "buttonData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "object",
                "defaultValue": "{\n  text: 'Primary',\n  isDisabled: false,\n  e2eTestName: 'buttonTest'\n}"
            },
            {
                "name": "changeShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Shopping List Container] Change Shopping List', props<{ shoppingListId: string }>())"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cookbook/components/recipe-form/recipe-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: RecipeFormComponent,\n  props: {\n    ...formData,\n    ...actionsData\n  }\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: buttonData.text,\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked\n  }\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    errors: []\n  }\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ShoppingListFormComponent,\n  props: {\n    ...taskData,\n    ...actionsData\n  },\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ShoppingListComponent,\n  props: {\n    ...taskData,\n    ...actionsData\n  },\n})"
            },
            {
                "name": "DEFAULT_LANGUAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/helpers/constants.ts",
                "type": "Language",
                "defaultValue": "'de'"
            },
            {
                "name": "DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/helpers/constants.ts",
                "type": "string",
                "defaultValue": "'shopping-list'"
            },
            {
                "name": "deleteShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Delete Shopping List Items',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "deleteShoppingListItemFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Failure',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "deleteShoppingListItemSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Success',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Disabled',\n    isDisabled: true,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n  }\n})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    isDisabled: true,\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "Edit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cookbook/components/recipe-form/recipe-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: RecipeFormComponent,\n  props: {\n    ...formData,\n    ...actionsData,\n    recipe: {\n      title: 'Beef & beer pie',\n      url: 'https://www.bbcgoodfood.com/recipes/beef-beer-pie',\n      ingredients: [\n        {\n          name: 'Beer',\n          amount: 1,\n          unit: 'l',\n          isStapleFood: true,\n        },\n        {\n          name: 'Beef',\n          amount: 1,\n          unit: 'kg',\n          isStapleFood: false,\n        }\n      ]\n    }\n  }\n})"
            },
            {
                "name": "EMAIL_PATTERN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/helpers/constants.ts",
                "type": "",
                "defaultValue": "/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  showBetaTeaser: false,\n  apiUrl: 'https://api.mealplaner.app',\n  authUrl: 'https://api.mealplaner.app',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.qa.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  showBetaTeaser: false,\n  apiUrl: 'https://api.mealplaner.app',\n  authUrl: 'https://api.mealplaner.app',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  showBetaTeaser: true,\n  apiUrl: 'http://localhost:4200/api',\n  authUrl: 'http://localhost:4200',\n}"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/components/login-form/login-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      email: 'Email Adresse',\n      password: 'Passwort',\n      login: 'Anmelden',\n      register: 'Registrieren',\n      'errors.validation.email.required': 'Bitte geben Sie Ihre Email Adresse ein',\n      'errors.validation.email.pattern': 'Valid Email Format braucht @ ein . dann mindestens 2 Zeichen',\n      'errors.validation.password.required': 'Bitte geben Sie Ihre Passwort ein',\n      'errors.validation.password.minlength': 'Passwort muss mindestens 4 character lang sein',\n      'errors.validation.password.pattern': 'Passwort braucht klein und gross Buchstaben und ein Zahl'\n      }\n    }\n}"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/cookbook/components/recipe-form/recipe-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      'recipe-form.placeholder.title': 'Title',\n      'recipe-form.label.title': 'Recipe Title',\n      'recipe-form.placeholder.url': 'Link',\n      'recipe-form.label.url': 'Link to Recipe',\n      'recipe-form.ingredients.label-text': 'Ingredients',\n      'recipe-form.placeholder.amount': 'Quantity',\n      'recipe-form.placeholder.name': 'Name',\n      'recipe-form.text.toggle': 'Basic Ingredient',\n      'recipe-form.button.delete': 'Delete',\n      'recipe-form.button.new-ingredient': 'Add new Ingredient',\n      'recipe-form.button.submit': 'Create',\n      'errors.validation.title.required': 'Titel is required',\n      'recipe-form.button.modify': 'Edit'\n    }\n  }\n}"
            },
            {
                "name": "getI18n",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/i18n/actions/i18n-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Initialize App] Get i18n')"
            },
            {
                "name": "getI18nFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/i18n/actions/i18n-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Initialize App] Get i18n Failure')"
            },
            {
                "name": "getI18nSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/i18n/actions/i18n-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Initialize App] Get i18n Success',\n  props<{ i18n: I18n }>())"
            },
            {
                "name": "IconLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Add',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    iconLeft: 'plus'\n  }\n})"
            },
            {
                "name": "IconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Delete',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    iconRight: 'trash'\n  }\n})"
            },
            {
                "name": "initialAppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/states/app-state.ts",
                "type": "AppState",
                "defaultValue": "{\n  language: DEFAULT_LANGUAGE,\n  i18n: null,\n  user: null,\n  requestedUrlBeforeLoginWasRequired: null\n}"
            },
            {
                "name": "initialized",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/app-actions/app-initialization.actions.ts",
                "type": "",
                "defaultValue": "createAction('[App Initialization] App Initialized')"
            },
            {
                "name": "initialShoppingListState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/states/shopping-list-state.ts",
                "type": "ShoppingListState",
                "defaultValue": "{\n  shoppingLists: {\n    items: [],\n  },\n  shoppingListItems: {},\n  activeShoppingList: undefined,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "GlobalState",
                "defaultValue": "{\n  appState: initialAppState,\n  shoppingListState: initialShoppingListState,\n}"
            },
            {
                "name": "inputData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "object",
                "defaultValue": "{\n  options: [\n    {key: 'Tesla', value: 'Tesla'},\n    {key: 'Audi', value: 'Audi'},\n    {key: 'Skoda', value: 'Skoda'},\n    {key: 'BMW', value: 'BMW'},\n  ],\n  isDisabled: false,\n}"
            },
            {
                "name": "inputData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "object",
                "defaultValue": "{\n  isDisabled: false,\n  e2eTestName: 'test',\n  label: 'Label',\n  errors: ['Ooops!', 'An error has occured!'],\n  placeholder: 'Placeholder',\n  formControl: createFormControl()\n}"
            },
            {
                "name": "isLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => !!appState.user && !isJwtTokenExpired(appState.user.jwt)\n)"
            },
            {
                "name": "loadShoppingListItemsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Shopping List API] Load Shopping List Items Failure')"
            },
            {
                "name": "loadShoppingListItemsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Load Shopping List Items Success',\n  props<{ shoppingListId: string, shoppingListItems: ShoppingListItem[] }>()\n)"
            },
            {
                "name": "loadShoppingLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Shopping List Container] Load Shopping Lists')"
            },
            {
                "name": "loadShoppingListsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Shopping List API] Load Shopping Lists Failure')"
            },
            {
                "name": "loadShoppingListsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Load Shopping Lists Success',\n  props<{ shoppingLists: ShoppingList[] }>()\n)"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/navigation/navigation.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: NavigationComponent,\n  props: {\n    ...buttonData,\n    isLoggedIn: true,\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/navigation/navigation.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: NavigationComponent,\n  props: {\n    ...buttonData,\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/login-page.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Login Page] Login',\n  props<{ credentials: LoginCredentials }>())"
            },
            {
                "name": "Login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/components/login-form/login-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: LoginFormComponent,\n  props: {\n    credentialsReceived: actionsData.credentialsReceived,\n    translations: formData.translations\n  }\n})"
            },
            {
                "name": "loginFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth] Login Failure')"
            },
            {
                "name": "loginSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Login Success', props<{ user: User }>())"
            },
            {
                "name": "logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/app-actions/error-interceptor.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Error Interceptor] Logout')"
            },
            {
                "name": "logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/app-actions/navigation.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Nav] Logout')"
            },
            {
                "name": "logoutFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Logout Failure')"
            },
            {
                "name": "logoutSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Logout Success')"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "MetaReducer[]",
                "defaultValue": "[]"
            },
            {
                "name": "moveShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Move Shopping List Items',\n  props<{ shoppingListId: string, currentIndex: number, previousIndex: number }>()\n)"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/navigation/navigation.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "ActionReducerMap<GlobalState>",
                "defaultValue": "{\n  appState: appStateReducer,\n  shoppingListState: shoppingListReducers,\n}"
            },
            {
                "name": "refreshToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/login-service.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth Service] Refresh Token')"
            },
            {
                "name": "refreshToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/app-actions/app-initialization.actions.ts",
                "type": "",
                "defaultValue": "createAction('[App Initialization] Refresh JWT Token')"
            },
            {
                "name": "refreshTokenFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth App] Refresh Token Failed')"
            },
            {
                "name": "refreshTokenSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Refresh Token Success', props<{ user: User }>())"
            },
            {
                "name": "Register",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/auth/components/login-form/login-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: LoginFormComponent,\n  props: {\n    credentialsReceived: actionsData.credentialsReceived,\n    translations: formData.translations,\n    buttonText: 'register'\n  }\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "selectAppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<GlobalState, AppState>('appState')"
            },
            {
                "name": "selectCurrentLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.language\n)"
            },
            {
                "name": "selectCurrentShoppingListItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingListItems[shoppingListState.activeShoppingList || ''] || []\n)"
            },
            {
                "name": "selectRequestedUrlBeforeLoginWasRequired",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.requestedUrlBeforeLoginWasRequired\n)"
            },
            {
                "name": "selectShoppingLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists.items\n)"
            },
            {
                "name": "selectShoppingListState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<GlobalState, ShoppingListState>('shoppingListState')"
            },
            {
                "name": "selectTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.i18n\n)"
            },
            {
                "name": "selectUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user\n)"
            },
            {
                "name": "selectUserID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user?.id,\n)"
            },
            {
                "name": "setActiveShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Effect] Set Active ShoppingList',\n  props<{ shoppingListId: string }>()\n)"
            },
            {
                "name": "setLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/app-actions/app-initialization.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[App Initialization] Set Application Startup Language',\n  props<{ language: Language }>())"
            },
            {
                "name": "setRequestedUrlBeforeLoginWasRequired",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/app-actions/auth-guard.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth Guard] Set Set Requested Url Before Login Was Required',\n  props<{ url: string }>())"
            },
            {
                "name": "shoppingListReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/state/reducers/shopping-list.reducers.ts",
                "type": "",
                "defaultValue": "createReducer<ShoppingListState, Action>(\n  initialShoppingListState,\n  on(\n    ShoppingListApiActions.loadShoppingListsSuccess,\n    (state: ShoppingListState, {shoppingLists}: LoadShoppingListsSuccessAction) => {\n      return {\n        ...state,\n        shoppingLists: {\n          items: shoppingLists,\n        }\n      };\n    }),\n  on(\n    ShoppingListEffectActions.setActiveShoppingList,\n    ShoppingListContainerActions.changeShoppingList,\n    (state: ShoppingListState, {shoppingListId}: ChangeShoppingListAction | SetActiveShoppingListAction) => {\n      return {\n        ...state,\n        activeShoppingList: shoppingListId || undefined,\n      };\n    }),\n  on(\n    ShoppingListApiActions.loadShoppingListItemsSuccess,\n    (state: ShoppingListState, {shoppingListId, shoppingListItems}: LoadShoppingListItemsSuccessAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListId]: shoppingListItems,\n        }\n      };\n    }),\n  on(\n    ShoppingListContainerActions.addShoppingListItem,\n    (state: ShoppingListState, {optimisticId, shoppingListItem}: AddShoppingListItemAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: [\n            {id: optimisticId, ...shoppingListItem},\n            ...state.shoppingListItems[shoppingListItem.shoppingList]\n          ],\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.addShoppingListItemSuccess,\n    (state: ShoppingListState, action: AddShoppingListItemSuccessAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [action.shoppingListItem.shoppingList]: state.shoppingListItems[action.shoppingListItem.shoppingList].map(shoppingListItem => {\n            return shoppingListItem.id === action.optimisticId ? action.shoppingListItem : shoppingListItem;\n          })\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.deleteShoppingListItem,\n    (state: ShoppingListState, {shoppingListItem}: DeleteShoppingListItemAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: state.shoppingListItems[shoppingListItem.shoppingList]\n            .filter((current) => current.id !== shoppingListItem.id),\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.moveShoppingListItem,\n    (state: ShoppingListState, {shoppingListId, currentIndex, previousIndex}: ShoppingListItemMovedAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListId]: moveItemInArray(state.shoppingListItems[shoppingListId], previousIndex, currentIndex),\n        }\n      };\n    }\n  )\n)"
            },
            {
                "name": "StringUnion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/model/model.ts",
                "type": "",
                "defaultValue": "<UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n}"
            },
            {
                "name": "SUPPORTED_LANGUAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/helpers/constants.ts",
                "type": "",
                "defaultValue": "StringUnion('de', 'en')"
            },
            {
                "name": "taskData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      'shoppingList.addForm.amount': 'Menge',\n      'shoppingList.addForm.product': 'Zucker',\n      'shoppingList.addForm.piece': 'Stück',\n      'shoppingList.addForm.pack': 'Packung',\n      'shoppingList.addForm.addLabel': 'Hinzufügen',\n    }\n  },\n  currentLang: 'de'\n}"
            },
            {
                "name": "taskData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "literal type",
                "defaultValue": "{\n  items: [\n    {id: '1', title: 'Mehl', amount: 1, unit: 'kg', isChecked: false, shoppingList: '42'},\n    {id: '2', title: 'Zucker', amount: 50, unit: 'g', isChecked: false, shoppingList: '42'},\n    {id: '3', title: 'Eier', amount: 1, unit: 'piece', isChecked: false, shoppingList: '42'},\n    {id: '4', title: 'Slaz', amount: 5, unit: 'coffeeSpoon', isChecked: false, shoppingList: '42'},\n  ],\n  translations: {\n    de: {\n      piece: '',\n      tableSpoon: 'Esslöffel',\n      coffeeSpoon: 'Kaffelöffel',\n      pinch: 'Prise',\n    }\n  }\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/navigation/navigation.stories.ts",
                "type": "any",
                "defaultValue": "(args: NavigationComponent) => ({\n  component: NavigationComponent,\n  props: args,\n})"
            },
            {
                "name": "updateShoppingListItemFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Failure',\n  props<{updateObservables: Observable<ShoppingListItem>[]}>()\n)"
            },
            {
                "name": "updateShoppingListItemSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Success'\n)"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Warning',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    color: 'warn'\n  }\n})"
            },
            {
                "name": "WithAccentButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    buttonText: 'Click',\n    errors: [],\n    color: 'accent',\n    clicked: actionsData.clicked\n  }\n})"
            },
            {
                "name": "WithButtonAndError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    buttonText: 'Click',\n    errors: ['Ooops!', 'An error has occured!'],\n    color: 'accent',\n    clicked: actionsData.clicked\n  }\n})"
            },
            {
                "name": "WithError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: ''\n  }\n})"
            },
            {
                "name": "WithErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    errors: ['An error has occured!'],\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "WithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    label: 'Label',\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "WithObjectValues",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    options: [\n      {key: 'Tesla Key', value: {brand: 'Tesla'}},\n      {key: 'Audi Key', value: {brand: 'Audi'}},\n      {key: 'Skoda', value: {brand: 'Skoda'}},\n      {key: 'BMW', value: {brand: 'BMW'}},\n    ],\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "WithoutLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    label: '',\n    errors: []\n  }\n})"
            },
            {
                "name": "WithPrimaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    buttonText: 'Click',\n    errors: [],\n    clicked: actionsData.clicked\n  }\n})"
            }
        ],
        "functions": [
            {
                "name": "appInitializer",
                "file": "src/app/app.initializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "authService"
                    },
                    {
                        "name": "i18nService"
                    },
                    {
                        "name": "store"
                    },
                    {
                        "name": "actions$"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "authService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i18nService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createFormControl",
                "file": "src/app/shared/components/select/select.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "name"
                    }
                ],
                "returnType": "FormControl",
                "jsdoctags": [
                    {
                        "name": "name",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createFormControl",
                "file": "src/app/shared/components/input/input.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "FormControl"
            },
            {
                "name": "decodeJwtToken",
                "file": "src/app/shared/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "token"
                    }
                ],
                "returnType": "JwtPayload",
                "jsdoctags": [
                    {
                        "name": "token",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "email",
                "file": "src/app/shared/validators/custom-validators.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "control"
                    }
                ],
                "returnType": "literal type | null",
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isJwtTokenExpired",
                "file": "src/app/shared/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "token"
                    },
                    {
                        "name": "now"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "token",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "now",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapI18nApiToI18nClient",
                "file": "src/app/shared/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "i18nApi"
                    }
                ],
                "returnType": "I18nClient",
                "jsdoctags": [
                    {
                        "name": "i18nApi",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapUserApiToUserClient",
                "file": "src/app/shared/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "userApi"
                    }
                ],
                "returnType": "User",
                "jsdoctags": [
                    {
                        "name": "userApi",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "moveItemInArray",
                "file": "src/app/shared/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "array"
                    },
                    {
                        "name": "previousIndex"
                    },
                    {
                        "name": "currentIndex"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "array",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "previousIndex",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentIndex",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "translateValidationErrors",
                "file": "src/app/shared/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "formControl"
                    },
                    {
                        "name": "translatePipe"
                    },
                    {
                        "name": "translations"
                    },
                    {
                        "name": "language"
                    }
                ],
                "returnType": "string[]",
                "jsdoctags": [
                    {
                        "name": "formControl",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translations",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "language",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "BasicShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Omit<ShoppingListItem | \"id\" | \"order\">",
                "file": "src/app/shared/model/model.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "I18n",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/model/model-api.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "I18n",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/shared/model/model.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "Language",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/shared/model/model.ts",
                "description": "",
                "kind": 164
            },
            {
                "name": "Unit",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"kg\" | \"g\" | \"tableSpoon\" | \"coffeeSpoon\" | \"l\" | \"dl\" | \"ml\" | \"pinch\" | \"piece\" | \"pack\"",
                "file": "src/app/shared/model/model.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/shared/components/button/button.stories.ts": [
                {
                    "name": "Accent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Accent',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    color: 'accent'\n  }\n})"
                },
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  clicked: action('clicked')\n}"
                },
                {
                    "name": "buttonData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  text: 'Primary',\n  isDisabled: false,\n  e2eTestName: 'buttonTest'\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: buttonData.text,\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked\n  }\n})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Disabled',\n    isDisabled: true,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n  }\n})"
                },
                {
                    "name": "IconLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Add',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    iconLeft: 'plus'\n  }\n})"
                },
                {
                    "name": "IconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Delete',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    iconRight: 'trash'\n  }\n})"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Warning',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    color: 'warn'\n  }\n})"
                }
            ],
            "src/app/components/navigation/navigation.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/navigation/navigation.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  logout: action('clicked')\n}"
                },
                {
                    "name": "buttonData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/navigation/navigation.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  isLoggedIn: false,\n  currentLang: 'de',\n  translations: {\n    de: {\n      'app.navigation.login': 'Login',\n      'app.navigation.logout': 'Abmelden',\n      'app.navigation.register': 'Registrieren',\n      'app.navigation.planer': 'Menuplaner',\n      'app.navigation.menus': 'Menüs',\n      'app.navigation.shopping-list': 'Einkaufsliste',\n    }\n  }\n}"
                },
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/navigation/navigation.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: NavigationComponent,\n  props: {\n    ...buttonData,\n    isLoggedIn: true,\n    ...actionsData,\n  }\n})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/navigation/navigation.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: NavigationComponent,\n  props: {\n    ...buttonData,\n    ...actionsData,\n  }\n})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/navigation/navigation.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/navigation/navigation.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: NavigationComponent) => ({\n  component: NavigationComponent,\n  props: args,\n})"
                }
            ],
            "src/app/auth/components/login-form/login-form.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/components/login-form/login-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  credentialsReceived: action('credentialsReceived')\n}"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/components/login-form/login-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      email: 'Email Adresse',\n      password: 'Passwort',\n      login: 'Anmelden',\n      register: 'Registrieren',\n      'errors.validation.email.required': 'Bitte geben Sie Ihre Email Adresse ein',\n      'errors.validation.email.pattern': 'Valid Email Format braucht @ ein . dann mindestens 2 Zeichen',\n      'errors.validation.password.required': 'Bitte geben Sie Ihre Passwort ein',\n      'errors.validation.password.minlength': 'Passwort muss mindestens 4 character lang sein',\n      'errors.validation.password.pattern': 'Passwort braucht klein und gross Buchstaben und ein Zahl'\n      }\n    }\n}"
                },
                {
                    "name": "Login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/components/login-form/login-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: LoginFormComponent,\n  props: {\n    credentialsReceived: actionsData.credentialsReceived,\n    translations: formData.translations\n  }\n})"
                },
                {
                    "name": "Register",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/components/login-form/login-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: LoginFormComponent,\n  props: {\n    credentialsReceived: actionsData.credentialsReceived,\n    translations: formData.translations,\n    buttonText: 'register'\n  }\n})"
                }
            ],
            "src/app/cookbook/components/recipe-form/recipe-form.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cookbook/components/recipe-form/recipe-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  recipeSaved: action('recipeSaved')\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cookbook/components/recipe-form/recipe-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: RecipeFormComponent,\n  props: {\n    ...formData,\n    ...actionsData\n  }\n})"
                },
                {
                    "name": "Edit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cookbook/components/recipe-form/recipe-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: RecipeFormComponent,\n  props: {\n    ...formData,\n    ...actionsData,\n    recipe: {\n      title: 'Beef & beer pie',\n      url: 'https://www.bbcgoodfood.com/recipes/beef-beer-pie',\n      ingredients: [\n        {\n          name: 'Beer',\n          amount: 1,\n          unit: 'l',\n          isStapleFood: true,\n        },\n        {\n          name: 'Beef',\n          amount: 1,\n          unit: 'kg',\n          isStapleFood: false,\n        }\n      ]\n    }\n  }\n})"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/cookbook/components/recipe-form/recipe-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      'recipe-form.placeholder.title': 'Title',\n      'recipe-form.label.title': 'Recipe Title',\n      'recipe-form.placeholder.url': 'Link',\n      'recipe-form.label.url': 'Link to Recipe',\n      'recipe-form.ingredients.label-text': 'Ingredients',\n      'recipe-form.placeholder.amount': 'Quantity',\n      'recipe-form.placeholder.name': 'Name',\n      'recipe-form.text.toggle': 'Basic Ingredient',\n      'recipe-form.button.delete': 'Delete',\n      'recipe-form.button.new-ingredient': 'Add new Ingredient',\n      'recipe-form.button.submit': 'Create',\n      'errors.validation.title.required': 'Titel is required',\n      'recipe-form.button.modify': 'Edit'\n    }\n  }\n}"
                }
            ],
            "src/app/shared/components/select/select.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  valueChanged: action('valueChanged'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    ...actionsData,\n  }\n})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    isDisabled: true,\n    ...actionsData,\n  }\n})"
                },
                {
                    "name": "inputData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  options: [\n    {key: 'Tesla', value: 'Tesla'},\n    {key: 'Audi', value: 'Audi'},\n    {key: 'Skoda', value: 'Skoda'},\n    {key: 'BMW', value: 'BMW'},\n  ],\n  isDisabled: false,\n}"
                },
                {
                    "name": "WithErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    errors: ['An error has occured!'],\n    ...actionsData,\n  }\n})"
                },
                {
                    "name": "WithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    label: 'Label',\n    ...actionsData,\n  }\n})"
                },
                {
                    "name": "WithObjectValues",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    options: [\n      {key: 'Tesla Key', value: {brand: 'Tesla'}},\n      {key: 'Audi Key', value: {brand: 'Audi'}},\n      {key: 'Skoda', value: {brand: 'Skoda'}},\n      {key: 'BMW', value: {brand: 'BMW'}},\n    ],\n    ...actionsData,\n  }\n})"
                }
            ],
            "src/app/shared/components/input/input.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  clicked: action('clicked'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    errors: []\n  }\n})"
                },
                {
                    "name": "inputData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  isDisabled: false,\n  e2eTestName: 'test',\n  label: 'Label',\n  errors: ['Ooops!', 'An error has occured!'],\n  placeholder: 'Placeholder',\n  formControl: createFormControl()\n}"
                },
                {
                    "name": "WithAccentButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    buttonText: 'Click',\n    errors: [],\n    color: 'accent',\n    clicked: actionsData.clicked\n  }\n})"
                },
                {
                    "name": "WithButtonAndError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    buttonText: 'Click',\n    errors: ['Ooops!', 'An error has occured!'],\n    color: 'accent',\n    clicked: actionsData.clicked\n  }\n})"
                },
                {
                    "name": "WithError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: ''\n  }\n})"
                },
                {
                    "name": "WithoutLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    label: '',\n    errors: []\n  }\n})"
                },
                {
                    "name": "WithPrimaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    buttonText: 'Click',\n    errors: [],\n    clicked: actionsData.clicked\n  }\n})"
                }
            ],
            "src/app/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  itemAdded: action('itemAdded'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ShoppingListFormComponent,\n  props: {\n    ...taskData,\n    ...actionsData\n  },\n})"
                },
                {
                    "name": "taskData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      'shoppingList.addForm.amount': 'Menge',\n      'shoppingList.addForm.product': 'Zucker',\n      'shoppingList.addForm.piece': 'Stück',\n      'shoppingList.addForm.pack': 'Packung',\n      'shoppingList.addForm.addLabel': 'Hinzufügen',\n    }\n  },\n  currentLang: 'de'\n}"
                }
            ],
            "src/app/shopping-list/components/shopping-list/shopping-list.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/components/shopping-list/shopping-list.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  itemDeleted: action('itemDeleted'),\n  listItemMoved: action('listItemMoved'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/components/shopping-list/shopping-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ShoppingListComponent,\n  props: {\n    ...taskData,\n    ...actionsData\n  },\n})"
                },
                {
                    "name": "taskData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/components/shopping-list/shopping-list.stories.ts",
                    "type": "literal type",
                    "defaultValue": "{\n  items: [\n    {id: '1', title: 'Mehl', amount: 1, unit: 'kg', isChecked: false, shoppingList: '42'},\n    {id: '2', title: 'Zucker', amount: 50, unit: 'g', isChecked: false, shoppingList: '42'},\n    {id: '3', title: 'Eier', amount: 1, unit: 'piece', isChecked: false, shoppingList: '42'},\n    {id: '4', title: 'Slaz', amount: 5, unit: 'coffeeSpoon', isChecked: false, shoppingList: '42'},\n  ],\n  translations: {\n    de: {\n      piece: '',\n      tableSpoon: 'Esslöffel',\n      coffeeSpoon: 'Kaffelöffel',\n      pinch: 'Prise',\n    }\n  }\n}"
                }
            ],
            "src/app/shared/state/index.ts": [
                {
                    "name": "activeShoppingListId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "GlobalState",
                    "defaultValue": "{\n  appState: initialAppState,\n  shoppingListState: initialShoppingListState,\n}"
                },
                {
                    "name": "isLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => !!appState.user && !isJwtTokenExpired(appState.user.jwt)\n)"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "MetaReducer[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "ActionReducerMap<GlobalState>",
                    "defaultValue": "{\n  appState: appStateReducer,\n  shoppingListState: shoppingListReducers,\n}"
                },
                {
                    "name": "selectAppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<GlobalState, AppState>('appState')"
                },
                {
                    "name": "selectCurrentLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.language\n)"
                },
                {
                    "name": "selectCurrentShoppingListItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingListItems[shoppingListState.activeShoppingList || ''] || []\n)"
                },
                {
                    "name": "selectRequestedUrlBeforeLoginWasRequired",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.requestedUrlBeforeLoginWasRequired\n)"
                },
                {
                    "name": "selectShoppingLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists.items\n)"
                },
                {
                    "name": "selectShoppingListState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<GlobalState, ShoppingListState>('shoppingListState')"
                },
                {
                    "name": "selectTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.i18n\n)"
                },
                {
                    "name": "selectUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user\n)"
                },
                {
                    "name": "selectUserID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user?.id,\n)"
                }
            ],
            "src/app/shopping-list/actions/shopping-list-container.actions.ts": [
                {
                    "name": "addShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Add Shopping List Items',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>()\n)"
                },
                {
                    "name": "changeShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Shopping List Container] Change Shopping List', props<{ shoppingListId: string }>())"
                },
                {
                    "name": "deleteShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Delete Shopping List Items',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "loadShoppingLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Shopping List Container] Load Shopping Lists')"
                },
                {
                    "name": "moveShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Move Shopping List Items',\n  props<{ shoppingListId: string, currentIndex: number, previousIndex: number }>()\n)"
                }
            ],
            "src/app/shopping-list/actions/shopping-list-api.actions.ts": [
                {
                    "name": "addShoppingListItemFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Items Failure',\n  props<{ shoppingListItem: BasicShoppingListItem }>()\n)"
                },
                {
                    "name": "addShoppingListItemSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Items Success',\n  props<{ optimisticId: string, shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "deleteShoppingListItemFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Failure',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "deleteShoppingListItemSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Success',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "loadShoppingListItemsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Shopping List API] Load Shopping List Items Failure')"
                },
                {
                    "name": "loadShoppingListItemsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Load Shopping List Items Success',\n  props<{ shoppingListId: string, shoppingListItems: ShoppingListItem[] }>()\n)"
                },
                {
                    "name": "loadShoppingListsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Shopping List API] Load Shopping Lists Failure')"
                },
                {
                    "name": "loadShoppingListsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Load Shopping Lists Success',\n  props<{ shoppingLists: ShoppingList[] }>()\n)"
                },
                {
                    "name": "updateShoppingListItemFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Failure',\n  props<{updateObservables: Observable<ShoppingListItem>[]}>()\n)"
                },
                {
                    "name": "updateShoppingListItemSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Success'\n)"
                }
            ],
            "src/app/shared/state/reducers/app-state.reducers.ts": [
                {
                    "name": "appStateReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/reducers/app-state.reducers.ts",
                    "type": "",
                    "defaultValue": "createReducer<AppState, Action>(\n  initialAppState,\n  on(\n    I18nApiActions.getI18nSuccess,\n    (state, {i18n}: { i18n: I18n }) => {\n      return {\n        ...state,\n        i18n: {\n          ...state.i18n,\n          ...i18n\n        }\n      };\n    }),\n  on(\n    AuthApiActions.refreshTokenSuccess,\n    (state, {user}: { user: User }) => {\n      return {\n        ...state,\n        user: {\n          ...user\n        }\n      };\n    }),\n  on(\n    AuthApiActions.refreshTokenFailed,\n    (state) => {\n      return {\n        ...state,\n        user: null\n      };\n    }),\n  on(\n    AuthApiActions.loginSuccess,\n    (state, {user}: { user: User }) => {\n      return {\n        ...state,\n        user: {\n          ...user\n        },\n      };\n    }),\n  on(\n    AuthenticatedGuardActions.setRequestedUrlBeforeLoginWasRequired,\n    (state, {url}: { url: string }) => {\n      return {\n        ...state,\n        requestedUrlBeforeLoginWasRequired: url\n      };\n    }),\n  on(\n    AppInitializationActions.setLanguage,\n    (state, {language}: { language: Language }) => {\n      return {\n        ...state,\n        language,\n      };\n    }),\n  on(\n    ErrorInterceptorActions.logout,\n    NavActions.logout,\n    (state) => {\n      return {\n        ...state,\n        user: null,\n      };\n    })\n)"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/shared/helpers/constants.ts": [
                {
                    "name": "DEFAULT_LANGUAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/helpers/constants.ts",
                    "type": "Language",
                    "defaultValue": "'de'"
                },
                {
                    "name": "DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/helpers/constants.ts",
                    "type": "string",
                    "defaultValue": "'shopping-list'"
                },
                {
                    "name": "EMAIL_PATTERN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/helpers/constants.ts",
                    "type": "",
                    "defaultValue": "/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/"
                },
                {
                    "name": "SUPPORTED_LANGUAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/helpers/constants.ts",
                    "type": "",
                    "defaultValue": "StringUnion('de', 'en')"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  showBetaTeaser: false,\n  apiUrl: 'https://api.mealplaner.app',\n  authUrl: 'https://api.mealplaner.app',\n}"
                }
            ],
            "src/environments/environment.qa.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.qa.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  showBetaTeaser: false,\n  apiUrl: 'https://api.mealplaner.app',\n  authUrl: 'https://api.mealplaner.app',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  showBetaTeaser: true,\n  apiUrl: 'http://localhost:4200/api',\n  authUrl: 'http://localhost:4200',\n}"
                }
            ],
            "src/app/i18n/actions/i18n-api.actions.ts": [
                {
                    "name": "getI18n",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/i18n/actions/i18n-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Initialize App] Get i18n')"
                },
                {
                    "name": "getI18nFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/i18n/actions/i18n-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Initialize App] Get i18n Failure')"
                },
                {
                    "name": "getI18nSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/i18n/actions/i18n-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Initialize App] Get i18n Success',\n  props<{ i18n: I18n }>())"
                }
            ],
            "src/app/shared/state/states/app-state.ts": [
                {
                    "name": "initialAppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/states/app-state.ts",
                    "type": "AppState",
                    "defaultValue": "{\n  language: DEFAULT_LANGUAGE,\n  i18n: null,\n  user: null,\n  requestedUrlBeforeLoginWasRequired: null\n}"
                }
            ],
            "src/app/shared/state/app-actions/app-initialization.actions.ts": [
                {
                    "name": "initialized",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/app-actions/app-initialization.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[App Initialization] App Initialized')"
                },
                {
                    "name": "refreshToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/app-actions/app-initialization.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[App Initialization] Refresh JWT Token')"
                },
                {
                    "name": "setLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/app-actions/app-initialization.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[App Initialization] Set Application Startup Language',\n  props<{ language: Language }>())"
                }
            ],
            "src/app/shared/state/states/shopping-list-state.ts": [
                {
                    "name": "initialShoppingListState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/states/shopping-list-state.ts",
                    "type": "ShoppingListState",
                    "defaultValue": "{\n  shoppingLists: {\n    items: [],\n  },\n  shoppingListItems: {},\n  activeShoppingList: undefined,\n}"
                }
            ],
            "src/app/auth/actions/login-page.actions.ts": [
                {
                    "name": "login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/login-page.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Login Page] Login',\n  props<{ credentials: LoginCredentials }>())"
                }
            ],
            "src/app/auth/actions/auth-api.actions.ts": [
                {
                    "name": "loginFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth] Login Failure')"
                },
                {
                    "name": "loginSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Login Success', props<{ user: User }>())"
                },
                {
                    "name": "logoutFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Logout Failure')"
                },
                {
                    "name": "logoutSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Logout Success')"
                },
                {
                    "name": "refreshTokenFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth App] Refresh Token Failed')"
                },
                {
                    "name": "refreshTokenSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Refresh Token Success', props<{ user: User }>())"
                }
            ],
            "src/app/shared/state/app-actions/error-interceptor.actions.ts": [
                {
                    "name": "logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/app-actions/error-interceptor.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Error Interceptor] Logout')"
                }
            ],
            "src/app/shared/state/app-actions/navigation.actions.ts": [
                {
                    "name": "logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/app-actions/navigation.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Nav] Logout')"
                }
            ],
            "src/app/auth/actions/login-service.actions.ts": [
                {
                    "name": "refreshToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/auth/actions/login-service.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth Service] Refresh Token')"
                }
            ],
            "src/app/shopping-list/actions/shopping-list-effect.actions.ts": [
                {
                    "name": "setActiveShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shopping-list/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Effect] Set Active ShoppingList',\n  props<{ shoppingListId: string }>()\n)"
                }
            ],
            "src/app/shared/state/app-actions/auth-guard.actions.ts": [
                {
                    "name": "setRequestedUrlBeforeLoginWasRequired",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/app-actions/auth-guard.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth Guard] Set Set Requested Url Before Login Was Required',\n  props<{ url: string }>())"
                }
            ],
            "src/app/shared/state/reducers/shopping-list.reducers.ts": [
                {
                    "name": "shoppingListReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/state/reducers/shopping-list.reducers.ts",
                    "type": "",
                    "defaultValue": "createReducer<ShoppingListState, Action>(\n  initialShoppingListState,\n  on(\n    ShoppingListApiActions.loadShoppingListsSuccess,\n    (state: ShoppingListState, {shoppingLists}: LoadShoppingListsSuccessAction) => {\n      return {\n        ...state,\n        shoppingLists: {\n          items: shoppingLists,\n        }\n      };\n    }),\n  on(\n    ShoppingListEffectActions.setActiveShoppingList,\n    ShoppingListContainerActions.changeShoppingList,\n    (state: ShoppingListState, {shoppingListId}: ChangeShoppingListAction | SetActiveShoppingListAction) => {\n      return {\n        ...state,\n        activeShoppingList: shoppingListId || undefined,\n      };\n    }),\n  on(\n    ShoppingListApiActions.loadShoppingListItemsSuccess,\n    (state: ShoppingListState, {shoppingListId, shoppingListItems}: LoadShoppingListItemsSuccessAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListId]: shoppingListItems,\n        }\n      };\n    }),\n  on(\n    ShoppingListContainerActions.addShoppingListItem,\n    (state: ShoppingListState, {optimisticId, shoppingListItem}: AddShoppingListItemAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: [\n            {id: optimisticId, ...shoppingListItem},\n            ...state.shoppingListItems[shoppingListItem.shoppingList]\n          ],\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.addShoppingListItemSuccess,\n    (state: ShoppingListState, action: AddShoppingListItemSuccessAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [action.shoppingListItem.shoppingList]: state.shoppingListItems[action.shoppingListItem.shoppingList].map(shoppingListItem => {\n            return shoppingListItem.id === action.optimisticId ? action.shoppingListItem : shoppingListItem;\n          })\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.deleteShoppingListItem,\n    (state: ShoppingListState, {shoppingListItem}: DeleteShoppingListItemAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: state.shoppingListItems[shoppingListItem.shoppingList]\n            .filter((current) => current.id !== shoppingListItem.id),\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.moveShoppingListItem,\n    (state: ShoppingListState, {shoppingListId, currentIndex, previousIndex}: ShoppingListItemMovedAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListId]: moveItemInArray(state.shoppingListItems[shoppingListId], previousIndex, currentIndex),\n        }\n      };\n    }\n  )\n)"
                }
            ],
            "src/app/shared/model/model.ts": [
                {
                    "name": "StringUnion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/model/model.ts",
                    "type": "",
                    "defaultValue": "<UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & {type: UnionType});\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/app.initializer.ts": [
                {
                    "name": "appInitializer",
                    "file": "src/app/app.initializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "authService"
                        },
                        {
                            "name": "i18nService"
                        },
                        {
                            "name": "store"
                        },
                        {
                            "name": "actions$"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "authService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i18nService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "store",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actions$",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/components/select/select.stories.ts": [
                {
                    "name": "createFormControl",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "name"
                        }
                    ],
                    "returnType": "FormControl",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/components/input/input.stories.ts": [
                {
                    "name": "createFormControl",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "FormControl"
                }
            ],
            "src/app/shared/helpers/helpers.ts": [
                {
                    "name": "decodeJwtToken",
                    "file": "src/app/shared/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "token"
                        }
                    ],
                    "returnType": "JwtPayload",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isJwtTokenExpired",
                    "file": "src/app/shared/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "token"
                        },
                        {
                            "name": "now"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "now",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapI18nApiToI18nClient",
                    "file": "src/app/shared/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "i18nApi"
                        }
                    ],
                    "returnType": "I18nClient",
                    "jsdoctags": [
                        {
                            "name": "i18nApi",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapUserApiToUserClient",
                    "file": "src/app/shared/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "userApi"
                        }
                    ],
                    "returnType": "User",
                    "jsdoctags": [
                        {
                            "name": "userApi",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveItemInArray",
                    "file": "src/app/shared/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "array"
                        },
                        {
                            "name": "previousIndex"
                        },
                        {
                            "name": "currentIndex"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "previousIndex",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentIndex",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateValidationErrors",
                    "file": "src/app/shared/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "formControl"
                        },
                        {
                            "name": "translatePipe"
                        },
                        {
                            "name": "translations"
                        },
                        {
                            "name": "language"
                        }
                    ],
                    "returnType": "string[]",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "translatePipe",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "translations",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "language",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/validators/custom-validators.validator.ts": [
                {
                    "name": "email",
                    "file": "src/app/shared/validators/custom-validators.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "control"
                        }
                    ],
                    "returnType": "literal type | null",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/shared/model/model.ts": [
                {
                    "name": "BasicShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Omit<ShoppingListItem | \"id\" | \"order\">",
                    "file": "src/app/shared/model/model.ts",
                    "description": "",
                    "kind": 161
                },
                {
                    "name": "I18n",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/model/model.ts",
                    "description": "",
                    "kind": 165
                },
                {
                    "name": "Language",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/shared/model/model.ts",
                    "description": "",
                    "kind": 164
                },
                {
                    "name": "Unit",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"kg\" | \"g\" | \"tableSpoon\" | \"coffeeSpoon\" | \"l\" | \"dl\" | \"ml\" | \"pinch\" | \"piece\" | \"pack\"",
                    "file": "src/app/shared/model/model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/shared/model/model-api.ts": [
                {
                    "name": "I18n",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/shared/model/model-api.ts",
                    "description": "",
                    "kind": 165
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/auth/auth-routing.module.ts",
                "module": "AuthRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginContainerComponent",
                        "canActivate": [
                            "LoggedOutGuard"
                        ]
                    },
                    {
                        "path": "register",
                        "component": "RegisterContainerComponent",
                        "canActivate": [
                            "LoggedOutGuard"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.initializer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "appInitializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logoutFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logoutSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshTokenFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshTokenSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/login-page.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/actions/login-service.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/login-form/login-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/components/login-form/login-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Register",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/containers/login-container/login-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/containers/register-container/register-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/effects/auth-api.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthApiEffects",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/beta-teaser/beta-teaser.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BetaTeaserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cookbook/components/recipe-form/recipe-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/cookbook/components/recipe-form/recipe-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cookbook/components/recipe-form/recipe-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cookbook/components/recipe-form/recipe-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Edit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/cookbook/components/recipe-form/recipe-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/i18n/actions/i18n-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getI18n",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/i18n/actions/i18n-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getI18nFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/i18n/actions/i18n-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getI18nSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/i18n/effects/i18n-api.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "I18nApiEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/i18n/pipes/translate.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TranslatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/i18n/services/i18n.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "I18nService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/meal-planer/containers/mealplaner-container/mealplaner-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MealplanerContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Accent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "inputData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithAccentButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithButtonAndError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPrimaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "inputData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithObjectValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guards/authenticated.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthenticatedGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/guards/logged-out.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LoggedOutGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_LANGUAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMAIL_PATTERN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SUPPORTED_LANGUAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "decodeJwtToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isJwtTokenExpired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapI18nApiToI18nClient",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapUserApiToUserClient",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "moveItemInArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "translateValidationErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptors/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/interceptors/jwt.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddShoppingListItemAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddShoppingListItemSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChangeShoppingListAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteShoppingListItemAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadI18nAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadShoppingListItemsSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadShoppingListsSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SetActiveShoppingListAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SetActiveShoppingListAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListItemMovedAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Translations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model-api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserApi",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddShoppingListItemEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArrayItemMovedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteShoppingListItemEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Ingredient",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JwtPayload",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JwtRefreshResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginCredentials",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Recipe",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RecipeIngredient",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListItemMovedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Translations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/model/model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StringUnion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/app-actions/app-initialization.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialized",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/app-actions/app-initialization.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/app-actions/app-initialization.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/app-actions/auth-guard.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setRequestedUrlBeforeLoginWasRequired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/app-actions/error-interceptor.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/app-actions/navigation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GlobalState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activeShoppingListId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentShoppingListItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRequestedUrlBeforeLoginWasRequired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShoppingLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShoppingListState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/reducers/app-state.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appStateReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/reducers/shopping-list.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shoppingListReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/states/app-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/states/app-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/states/shopping-list-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/state/states/shopping-list-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialShoppingListState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/custom-validators.validator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "email",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShoppingListItemFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShoppingListItemSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListItemFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListItemSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingListItemsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingListItemsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingListsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingListsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateShoppingListItemFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateShoppingListItemSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changeShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moveShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setActiveShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/components/shopping-list-form/shopping-list-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "taskData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/components/shopping-list-page/shopping-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/components/shopping-list/shopping-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "taskData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/containers/shopping-list-container/shopping-list-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/effects/shopping-list-api.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingListApiEffects",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shopping-list/service/shopping-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingListService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.qa.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "testing/router-link-directive.stub.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RouterLinkDirectiveStub",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            }
        ]
    }
}
