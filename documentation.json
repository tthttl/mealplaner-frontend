{
    "pipes": [
        {
            "name": "TranslatePipe",
            "id": "pipe-TranslatePipe-34054ae509045d1556d03e7bf9e757bd",
            "file": "src/app/shared/pipes/translate.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "i18n",
                            "type": "I18n | null"
                        },
                        {
                            "name": "language",
                            "type": "Language | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i18n",
                            "type": "I18n | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "language",
                            "type": "Language | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "translate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Language, I18n } from '../../core/models/model';\nimport { DEFAULT_LANGUAGE } from '../../core/constants/constants';\n\n\n@Pipe({name: 'translate'})\nexport class TranslatePipe implements PipeTransform {\n  transform(key: string, i18n: I18n | null, language?: Language | null): string {\n    return (i18n && i18n[language || DEFAULT_LANGUAGE] && i18n[language || DEFAULT_LANGUAGE][key]) ?? key;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AddShoppingListItemAction",
            "id": "interface-AddShoppingListItemAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "shoppingListItem",
                    "type": "BasicShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AddShoppingListItemEvent",
            "id": "interface-AddShoppingListItemEvent-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "shoppingListItem",
                    "type": "ShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AddShoppingListItemSuccessAction",
            "id": "interface-AddShoppingListItemSuccessAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "shoppingListItem",
                    "type": "ShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-feb842873b2863eacf3d5b22cfe20df3",
            "file": "src/app/core/store/state/app-state.ts",
            "type": "interface",
            "sourceCode": "import { Language, I18n, User } from '../../models/model';\nimport { DEFAULT_LANGUAGE } from '../../constants/constants';\n\nexport interface AppState {\n  readonly language: Language;\n  readonly i18n: I18n | null;\n  readonly user: User | null;\n  readonly requestedUrlBeforeLoginWasRequired: string | null;\n}\n\nexport const initialAppState: AppState = {\n  language: DEFAULT_LANGUAGE,\n  i18n: null,\n  user: null,\n  requestedUrlBeforeLoginWasRequired: null\n};\n",
            "properties": [
                {
                    "name": "i18n",
                    "type": "I18n | null",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "language",
                    "type": "Language",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "requestedUrlBeforeLoginWasRequired",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ArrayItemMovedEvent",
            "id": "interface-ArrayItemMovedEvent-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "currentIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "previousIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ChangeShoppingListAction",
            "id": "interface-ChangeShoppingListAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Cookbook",
            "id": "interface-Cookbook-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 138,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 139,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookApi",
            "id": "interface-CookbookApi-6bf04a620b138b1e009fb1eb1ab6fb3f",
            "file": "src/app/core/models/model-api.ts",
            "type": "interface",
            "sourceCode": "import { Unit } from './model';\n\nexport type I18n = {\n  readonly lang: string;\n  readonly translations: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport interface ShoppingListItemApi {\n  id: string;\n  title: string;\n  order: number;\n  shoppingList: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface UserApi {\n  jwt: string;\n  user: {\n    username: string;\n    _id: string;\n    email: string;\n  };\n}\n\nexport interface RecipeApi {\n  readonly id: string;\n  readonly title: string;\n  readonly url?: string;\n  readonly cookbookId: string;\n  readonly ingredients: IngredientApi[];\n}\n\nexport interface IngredientApi {\n  readonly id: string;\n  readonly title: string;\n  readonly unit: Unit;\n  readonly amount: number;\n  readonly isStapleFood: boolean;\n}\n\nexport interface CookbookApi {\n  readonly id: string;\n  readonly title: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookCreatedAction",
            "id": "interface-CookbookCreatedAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 117
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookCreatedFailureAction",
            "id": "interface-CookbookCreatedFailureAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 129
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookCreatedSuccessAction",
            "id": "interface-CookbookCreatedSuccessAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "cookbook",
                    "type": "Cookbook",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 123
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookDeletedFromStateAction",
            "id": "interface-CookbookDeletedFromStateAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "cookbook",
                    "type": "Cookbook",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 139
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookEditedSuccessAction",
            "id": "interface-CookbookEditedSuccessAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "cookbook",
                    "type": "Cookbook",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 134
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookSelectedAction",
            "id": "interface-CookbookSelectedAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "selectedCookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 112
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookState",
            "id": "interface-CookbookState-269807f576ca8a91be70d6c6e1209922",
            "file": "src/app/features/cookbook/store/state/cookbook-state.ts",
            "type": "interface",
            "sourceCode": "import { Cookbook, Recipe } from '../../../../core/models/model';\n\nexport interface CookbookState {\n  readonly activeCookbookId: string;\n  readonly cookbooks: Cookbook[];\n  readonly recipes: {\n    [cookbookId: string]: Recipe[]\n  };\n}\n\nexport const initialCookbookState: CookbookState = {\n  activeCookbookId: '',\n  cookbooks: [],\n  recipes: {}\n};\n",
            "properties": [
                {
                    "name": "activeCookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "cookbooks",
                    "type": "Cookbook[]",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "recipes",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CreateListDialogEvent",
            "id": "interface-CreateListDialogEvent-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 148
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 149
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CreateRecipeAction",
            "id": "interface-CreateRecipeAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "recipeToSave",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CreateRecipeSuccessAction",
            "id": "interface-CreateRecipeSuccessAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "recipe",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CreateRecipeSuccessFailureAction",
            "id": "interface-CreateRecipeSuccessFailureAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "cookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DeleteRecipeFromStateAction",
            "id": "interface-DeleteRecipeFromStateAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "recipeToDelete",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DeleteRecipeSuccessAction",
            "id": "interface-DeleteRecipeSuccessAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "deletedRecipe",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DeleteShoppingListItemAction",
            "id": "interface-DeleteShoppingListItemAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingListItem",
                    "type": "ShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DeleteShoppingListItemEvent",
            "id": "interface-DeleteShoppingListItemEvent-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "shoppingListItem",
                    "type": "ShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "data",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 133,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "translations",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 134,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "EditListDialogEvent",
            "id": "interface-EditListDialogEvent-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 153
                },
                {
                    "name": "list",
                    "type": "List",
                    "optional": false,
                    "description": "",
                    "line": 154
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "EditRecipeSuccessAction",
            "id": "interface-EditRecipeSuccessAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "recipe",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "GlobalState",
            "id": "interface-GlobalState-75ff99332a1e5d911087ee36ab568962",
            "file": "src/app/core/store/index.ts",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, createFeatureSelector, createSelector, MetaReducer } from '@ngrx/store';\nimport { cookbookStateReducer } from '../../features/cookbook/store/reducers/cookbook-state.reducers';\nimport { CookbookState, initialCookbookState } from '../../features/cookbook/store/state/cookbook-state';\nimport { isJwtTokenExpired } from '../helpers/helpers';\nimport { appStateReducer } from './reducers/app-state.reducers';\nimport { shoppingListReducers } from '../../features/shopping-list/store/reducers/shopping-list.reducers';\nimport { AppState, initialAppState } from './state/app-state';\nimport { initialShoppingListState, shoppingListAdapter, shoppingListItemAdapter, ShoppingListState } from '../../features/shopping-list/store/state/shopping-list-state';\n\nexport interface GlobalState {\n  appState: AppState;\n  cookbookState: CookbookState;\n  shoppingListState: ShoppingListState;\n}\n\nexport const initialState: GlobalState = {\n  appState: initialAppState,\n  cookbookState: initialCookbookState,\n  shoppingListState: initialShoppingListState,\n};\n\nexport const reducers: ActionReducerMap<GlobalState> = {\n  appState: appStateReducer,\n  shoppingListState: shoppingListReducers,\n  cookbookState: cookbookStateReducer\n};\n\nexport const metaReducers: MetaReducer<GlobalState>[] = [];\n\nexport const selectAppState = createFeatureSelector<GlobalState, AppState>('appState');\nexport const selectCookbookState =\n  createFeatureSelector<GlobalState, CookbookState>('cookbookState');\nexport const selectShoppingListState = createFeatureSelector<GlobalState, ShoppingListState>('shoppingListState');\n\nexport const selectTranslations = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.i18n || {}\n);\n\nexport const selectRecipes = createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.recipes\n);\n\nexport const selectCurrentLanguage = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.language\n);\n\nexport const selectUser = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user\n);\n\nexport const selectRequestedUrlBeforeLoginWasRequired = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.requestedUrlBeforeLoginWasRequired\n);\n\nexport const selectUserID = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user?.id,\n);\n\nexport const isLoggedIn = createSelector(\n  selectAppState,\n  (appState: AppState) => !!appState.user && !isJwtTokenExpired(appState.user.jwt)\n);\n\nexport const selectShoppingListsEntity = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists.items\n);\n\nexport const selectShoppingLists = shoppingListAdapter.getSelectors(selectShoppingListsEntity).selectAll ;\n\nexport const activeShoppingList = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists.items.entities[shoppingListState.activeShoppingList || '']\n);\n\nexport const activeShoppingListId = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n);\n\nexport const isActiveShoppingListLoading = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n);\n\n\nexport const selectCurrentShoppingListEntity = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => {\n    if (!shoppingListState.activeShoppingList) {\n      return shoppingListItemAdapter.getInitialState();\n    }\n\n    const items = shoppingListState.shoppingListItems[shoppingListState.activeShoppingList];\n\n    if (!items) {\n      return shoppingListItemAdapter.getInitialState();\n    }\n\n    return items;\n  },\n);\n\nexport const selectCurrentShoppingListItems = shoppingListItemAdapter.getSelectors(selectCurrentShoppingListEntity).selectAll;\n\nexport const selectCookbooks = createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.cookbooks);\n\nexport const selectActiveCookbook = createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.activeCookbookId);\n",
            "properties": [
                {
                    "name": "appState",
                    "type": "AppState",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "cookbookState",
                    "type": "CookbookState",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "shoppingListState",
                    "type": "ShoppingListState",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Ingredient",
            "id": "interface-Ingredient-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "unit",
                    "type": "Unit",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "IngredientApi",
            "id": "interface-IngredientApi-6bf04a620b138b1e009fb1eb1ab6fb3f",
            "file": "src/app/core/models/model-api.ts",
            "type": "interface",
            "sourceCode": "import { Unit } from './model';\n\nexport type I18n = {\n  readonly lang: string;\n  readonly translations: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport interface ShoppingListItemApi {\n  id: string;\n  title: string;\n  order: number;\n  shoppingList: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface UserApi {\n  jwt: string;\n  user: {\n    username: string;\n    _id: string;\n    email: string;\n  };\n}\n\nexport interface RecipeApi {\n  readonly id: string;\n  readonly title: string;\n  readonly url?: string;\n  readonly cookbookId: string;\n  readonly ingredients: IngredientApi[];\n}\n\nexport interface IngredientApi {\n  readonly id: string;\n  readonly title: string;\n  readonly unit: Unit;\n  readonly amount: number;\n  readonly isStapleFood: boolean;\n}\n\nexport interface CookbookApi {\n  readonly id: string;\n  readonly title: string;\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "isStapleFood",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "unit",
                    "type": "Unit",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "JwtPayload",
            "id": "interface-JwtPayload-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "exp",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "iat",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "JwtRefreshResponse",
            "id": "interface-JwtRefreshResponse-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "ok",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 92
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "List",
            "id": "interface-List-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ListPickerDialogEvent",
            "id": "interface-ListPickerDialogEvent-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "\"select\" | \"create\" | \"edit\" | \"delete\"",
                    "optional": false,
                    "description": "",
                    "line": 143
                },
                {
                    "name": "list",
                    "type": "List",
                    "optional": true,
                    "description": "",
                    "line": 144
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoadRecipeSuccessAction",
            "id": "interface-LoadRecipeSuccessAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "cookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "recipes",
                    "type": "Recipe[]",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoadShoppingListItemsSuccessAction",
            "id": "interface-LoadShoppingListItemsSuccessAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "shoppingListItems",
                    "type": "ShoppingListItem[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoadShoppingListsSuccessAction",
            "id": "interface-LoadShoppingListsSuccessAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingLists",
                    "type": "ShoppingList[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoginAction",
            "id": "interface-LoginAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "credentials",
                    "type": "LoginCredentials",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoginCredentials",
            "id": "interface-LoginCredentials-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "identifier",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoginFailureAction",
            "id": "interface-LoginFailureAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 154
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Recipe",
            "id": "interface-Recipe-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "cookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "ingredients",
                    "type": "RecipeIngredient[]",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 129
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RecipeApi",
            "id": "interface-RecipeApi-6bf04a620b138b1e009fb1eb1ab6fb3f",
            "file": "src/app/core/models/model-api.ts",
            "type": "interface",
            "sourceCode": "import { Unit } from './model';\n\nexport type I18n = {\n  readonly lang: string;\n  readonly translations: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport interface ShoppingListItemApi {\n  id: string;\n  title: string;\n  order: number;\n  shoppingList: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface UserApi {\n  jwt: string;\n  user: {\n    username: string;\n    _id: string;\n    email: string;\n  };\n}\n\nexport interface RecipeApi {\n  readonly id: string;\n  readonly title: string;\n  readonly url?: string;\n  readonly cookbookId: string;\n  readonly ingredients: IngredientApi[];\n}\n\nexport interface IngredientApi {\n  readonly id: string;\n  readonly title: string;\n  readonly unit: Unit;\n  readonly amount: number;\n  readonly isStapleFood: boolean;\n}\n\nexport interface CookbookApi {\n  readonly id: string;\n  readonly title: string;\n}\n",
            "properties": [
                {
                    "name": "cookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "ingredients",
                    "type": "IngredientApi[]",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RecipeIngredient",
            "id": "interface-RecipeIngredient-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "isStapleFood",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Ingredient"
        },
        {
            "name": "RecipeViewDialogEvent",
            "id": "interface-RecipeViewDialogEvent-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "event",
                    "type": "\"selectedIngredients\" | \"recipe\"",
                    "optional": false,
                    "description": "",
                    "line": 162,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "recipe",
                    "type": "Recipe",
                    "optional": true,
                    "description": "",
                    "line": 163,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "selectedIngredients",
                    "type": "SelectedIngredient[]",
                    "optional": true,
                    "description": "",
                    "line": 164,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RegisterCredentials",
            "id": "interface-RegisterCredentials-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "invitationCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SelectedIngredient",
            "id": "interface-SelectedIngredient-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "isSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 158
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Ingredient"
        },
        {
            "name": "SelectOption",
            "id": "interface-SelectOption-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "key",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SetActiveCookbookIdAsQueryParamAction",
            "id": "interface-SetActiveCookbookIdAsQueryParamAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "selectedCookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 150
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 149
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SetActiveShoppingListAction",
            "id": "interface-SetActiveShoppingListAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SetActiveShoppingListAction",
            "id": "interface-SetActiveShoppingListAction-14d6dc39c3c2866ebac7145d720887b3-1",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SetActiveShoppingListAction-1"
        },
        {
            "name": "SetLanguageAction",
            "id": "interface-SetLanguageAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "language",
                    "type": "Language",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingList",
            "id": "interface-ShoppingList-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isInitialized",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingListItem",
            "id": "interface-ShoppingListItem-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "shoppingList",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Ingredient"
        },
        {
            "name": "ShoppingListItemApi",
            "id": "interface-ShoppingListItemApi-6bf04a620b138b1e009fb1eb1ab6fb3f",
            "file": "src/app/core/models/model-api.ts",
            "type": "interface",
            "sourceCode": "import { Unit } from './model';\n\nexport type I18n = {\n  readonly lang: string;\n  readonly translations: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport interface ShoppingListItemApi {\n  id: string;\n  title: string;\n  order: number;\n  shoppingList: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface UserApi {\n  jwt: string;\n  user: {\n    username: string;\n    _id: string;\n    email: string;\n  };\n}\n\nexport interface RecipeApi {\n  readonly id: string;\n  readonly title: string;\n  readonly url?: string;\n  readonly cookbookId: string;\n  readonly ingredients: IngredientApi[];\n}\n\nexport interface IngredientApi {\n  readonly id: string;\n  readonly title: string;\n  readonly unit: Unit;\n  readonly amount: number;\n  readonly isStapleFood: boolean;\n}\n\nexport interface CookbookApi {\n  readonly id: string;\n  readonly title: string;\n}\n",
            "properties": [
                {
                    "name": "amount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "shoppingList",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "unit",
                    "type": "Unit",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingListItemMovedAction",
            "id": "interface-ShoppingListItemMovedAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "currentIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "previousIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingListItemMovedEvent",
            "id": "interface-ShoppingListItemMovedEvent-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ArrayItemMovedEvent"
        },
        {
            "name": "ShoppingListState",
            "id": "interface-ShoppingListState-5900b4bfd245f41361014e6e71ff25e7",
            "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
            "type": "interface",
            "sourceCode": "import { ShoppingList, ShoppingListItem } from '../../../../core/models/model';\nimport { createEntityAdapter, EntityState } from '@ngrx/entity';\n\nexport const shoppingListAdapter = createEntityAdapter<ShoppingList>({\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n});\n\nexport const shoppingListItemAdapter = createEntityAdapter<ShoppingListItem>({\n  sortComparer: ((a, b) => (b.order || Number.MAX_VALUE) - (a.order || Number.MAX_VALUE)),\n});\n\nexport interface ShoppingListState {\n  readonly shoppingLists: {\n    items: EntityState<ShoppingList>\n  };\n  readonly shoppingListItems: { [key: string]: EntityState<ShoppingListItem> };\n  readonly activeShoppingList: string | undefined;\n}\n\nexport const initialShoppingListState: ShoppingListState = {\n  shoppingLists: {\n    items: shoppingListAdapter.getInitialState(),\n  },\n  shoppingListItems: {},\n  activeShoppingList: undefined,\n};\n",
            "properties": [
                {
                    "name": "activeShoppingList",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "shoppingListItems",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "shoppingLists",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Translations",
            "id": "interface-Translations-6bf04a620b138b1e009fb1eb1ab6fb3f",
            "file": "src/app/core/models/model-api.ts",
            "type": "interface",
            "sourceCode": "import { Unit } from './model';\n\nexport type I18n = {\n  readonly lang: string;\n  readonly translations: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport interface ShoppingListItemApi {\n  id: string;\n  title: string;\n  order: number;\n  shoppingList: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface UserApi {\n  jwt: string;\n  user: {\n    username: string;\n    _id: string;\n    email: string;\n  };\n}\n\nexport interface RecipeApi {\n  readonly id: string;\n  readonly title: string;\n  readonly url?: string;\n  readonly cookbookId: string;\n  readonly ingredients: IngredientApi[];\n}\n\nexport interface IngredientApi {\n  readonly id: string;\n  readonly title: string;\n  readonly unit: Unit;\n  readonly amount: number;\n  readonly isStapleFood: boolean;\n}\n\nexport interface CookbookApi {\n  readonly id: string;\n  readonly title: string;\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-6bf04a620b138b1e009fb1eb1ab6fb3f",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "string",
                    "line": 8
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "Translations",
            "id": "interface-Translations-cfed16f343b85e4ed46203b69a252730-1",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-cfed16f343b85e4ed46203b69a252730",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "string",
                    "line": 7
                }
            ],
            "kind": 159,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Translations-1"
        },
        {
            "name": "UndoCookbookDeletedFromStateAction",
            "id": "interface-UndoCookbookDeletedFromStateAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "cookbook",
                    "type": "Cookbook",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 144
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "UndoDeleteRecipeFromStateAction",
            "id": "interface-UndoDeleteRecipeFromStateAction-14d6dc39c3c2866ebac7145d720887b3",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipeSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "recipe",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-cfed16f343b85e4ed46203b69a252730",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: {[key: string]: string};\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "jwt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "UserApi",
            "id": "interface-UserApi-6bf04a620b138b1e009fb1eb1ab6fb3f",
            "file": "src/app/core/models/model-api.ts",
            "type": "interface",
            "sourceCode": "import { Unit } from './model';\n\nexport type I18n = {\n  readonly lang: string;\n  readonly translations: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport interface ShoppingListItemApi {\n  id: string;\n  title: string;\n  order: number;\n  shoppingList: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface UserApi {\n  jwt: string;\n  user: {\n    username: string;\n    _id: string;\n    email: string;\n  };\n}\n\nexport interface RecipeApi {\n  readonly id: string;\n  readonly title: string;\n  readonly url?: string;\n  readonly cookbookId: string;\n  readonly ingredients: IngredientApi[];\n}\n\nexport interface IngredientApi {\n  readonly id: string;\n  readonly title: string;\n  readonly unit: Unit;\n  readonly amount: number;\n  readonly isStapleFood: boolean;\n}\n\nexport interface CookbookApi {\n  readonly id: string;\n  readonly title: string;\n}\n",
            "properties": [
                {
                    "name": "jwt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "user",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AppEffects",
            "id": "injectable-AppEffects-90e18d8de07a630caaf471088d5eb5c2",
            "file": "src/app/core/store/effects/app.effects.ts",
            "properties": [
                {
                    "name": "getI18n",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AppInitializationActions.setLanguage, NavActions.changeLanguage),\n    withLatestFrom(this.store.select(selectTranslations)),\n    filter(([action, i18n]: [SetLanguageAction, I18n]) => !i18n || !i18n[action.language]),\n    exhaustMap(([action, _]: [SetLanguageAction, I18n]) => this.i18nService.getI18n(action.language).pipe(\n      map((i18n: I18n) => I18nApiActions.getI18nSuccess({i18n})),\n      catchError(() => of(I18nApiActions.getI18nFailure()))\n    ))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, filter, map, withLatestFrom } from 'rxjs/operators';\nimport { I18n } from '../../models/model';\nimport { SetLanguageAction } from '../../models/model-action';\nimport { GlobalState, selectTranslations } from '../index';\nimport { AppInitializationActions, I18nApiActions, NavActions } from '../actions';\nimport { I18nService } from '../../services/i18n.service';\n\n@Injectable()\nexport class AppEffects {\n  constructor(\n    private actions$: Actions,\n    private i18nService: I18nService,\n    private store: Store<GlobalState>) {\n  }\n\n  @Effect()\n  getI18n = this.actions$.pipe(\n    ofType(AppInitializationActions.setLanguage, NavActions.changeLanguage),\n    withLatestFrom(this.store.select(selectTranslations)),\n    filter(([action, i18n]: [SetLanguageAction, I18n]) => !i18n || !i18n[action.language]),\n    exhaustMap(([action, _]: [SetLanguageAction, I18n]) => this.i18nService.getI18n(action.language).pipe(\n      map((i18n: I18n) => I18nApiActions.getI18nSuccess({i18n})),\n      catchError(() => of(I18nApiActions.getI18nFailure()))\n    ))\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "i18nService",
                        "type": "I18nService"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i18nService",
                        "type": "I18nService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthApiEffects",
            "id": "injectable-AuthApiEffects-9a55d13cd8a6c5cedceeb5265d43a605",
            "file": "src/app/features/auth/store/effects/auth-api.effects.ts",
            "properties": [
                {
                    "name": "login",
                    "defaultValue": "this.actions$.pipe(\n    ofType(LoginPageActions.login),\n    exhaustMap(({credentials}: LoginAction) => this.authService.login(credentials).pipe(\n      map((user: User) => AuthApiActions.loginSuccess({user})),\n      catchError((error) => {\n        const errorMessage = Array.isArray(error) ? error[0].messages[0].id : 'authBackend.error.connection';\n        return of(AuthApiActions.loginFailure({error: errorMessage}));\n      })\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "logout",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ErrorInterceptorActions.logout, NavActions.logout),\n    exhaustMap(() => this.authService.logout().pipe(\n      map(() => AuthApiActions.logoutSuccess()),\n      catchError(() => of(AuthApiActions.logoutFailure()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "redirectWhenLoggedIn",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AuthApiActions.loginSuccess, AuthApiActions.registerSuccess, AuthApiActions.restPasswordSuccess),\n    withLatestFrom(this.store.select(selectRequestedUrlBeforeLoginWasRequired)),\n    tap(([_, url]) => {\n      this.router.navigate([url || DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER]);\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "redirectWhenLoggedOut",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AuthApiActions.logoutSuccess),\n    withLatestFrom(this.store.select(selectRequestedUrlBeforeLoginWasRequired)),\n    tap(() => {\n      this.router.navigate(['/']);\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "refreshToken",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AppInitializationActions.refreshToken, LoginServiceActions.refreshToken),\n    exhaustMap(() => this.authService.refreshToken().pipe(\n      map((jwtRenewal: JwtRefreshResponse) => {\n        return (jwtRenewal.ok && jwtRenewal.user) ?\n          AuthApiActions.refreshTokenSuccess({user: jwtRenewal.user}) : AuthApiActions.refreshTokenFailed();\n      }),\n      catchError(() => of(AuthApiActions.refreshTokenFailed()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "register$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(RegisterContainerActions.register),\n    exhaustMap(({credentials}) => this.authService.register(credentials).pipe(\n      map((user: User) => AuthApiActions.registerSuccess({user})),\n      catchError((error) => {\n        const errorMessage = Array.isArray(error) ? error[0].messages[0].id : 'authBackend.error.connection';\n        return of(AuthApiActions.registerFailure({error: errorMessage}));\n      })\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "resetPassword$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ResetPasswordContainerActions.resetPassword),\n    exhaustMap(({password, resetPasswordToken}) => this.authService.resetPassword(password, resetPasswordToken).pipe(\n      map((user: User) => AuthApiActions.restPasswordSuccess({user})),\n      tap(() => this.snackBarService.openSnackBar('auth.reset-password.success')),\n      catchError(() => of(AuthApiActions.restPasswordFailure({error: 'authBackend.resetPassword.failed'})))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "sendPasswordResetMail$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ForgotPasswordContainerActions.requestEmail),\n    exhaustMap(({email}) => this.authService.forgotPassword(email).pipe(\n      map(() => AuthApiActions.forgotPasswordSuccess()),\n      catchError(() => of(AuthApiActions.forgotPasswordFailure()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { GlobalState, selectRequestedUrlBeforeLoginWasRequired } from '../../../../core/store';\nimport {\n  AuthApiActions,\n  ForgotPasswordContainerActions,\n  LoginPageActions,\n  LoginServiceActions,\n  RegisterContainerActions, ResetPasswordContainerActions\n} from '../actions';\nimport { catchError, exhaustMap, map, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../services/auth.service';\nimport { LoginAction } from '../../../../core/models/model-action';\nimport { JwtRefreshResponse, User } from '../../../../core/models/model';\nimport { of } from 'rxjs';\nimport { AppInitializationActions, ErrorInterceptorActions, NavActions } from '../../../../core/store/actions';\nimport { Router } from '@angular/router';\nimport { DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER } from '../../../../core/constants/constants';\nimport { SnackbarService } from '../../../../core/services/snackbar.service';\n\n@Injectable()\nexport class AuthApiEffects {\n  constructor(\n    private actions$: Actions,\n    private authService: AuthService,\n    private router: Router,\n    private snackBarService: SnackbarService,\n    private store: Store<GlobalState>) {\n  }\n\n  @Effect()\n  login = this.actions$.pipe(\n    ofType(LoginPageActions.login),\n    exhaustMap(({credentials}: LoginAction) => this.authService.login(credentials).pipe(\n      map((user: User) => AuthApiActions.loginSuccess({user})),\n      catchError((error) => {\n        const errorMessage = Array.isArray(error) ? error[0].messages[0].id : 'authBackend.error.connection';\n        return of(AuthApiActions.loginFailure({error: errorMessage}));\n      })\n    )),\n  );\n\n  @Effect()\n  refreshToken = this.actions$.pipe(\n    ofType(AppInitializationActions.refreshToken, LoginServiceActions.refreshToken),\n    exhaustMap(() => this.authService.refreshToken().pipe(\n      map((jwtRenewal: JwtRefreshResponse) => {\n        return (jwtRenewal.ok && jwtRenewal.user) ?\n          AuthApiActions.refreshTokenSuccess({user: jwtRenewal.user}) : AuthApiActions.refreshTokenFailed();\n      }),\n      catchError(() => of(AuthApiActions.refreshTokenFailed()))\n    )),\n  );\n\n  @Effect()\n  logout = this.actions$.pipe(\n    ofType(ErrorInterceptorActions.logout, NavActions.logout),\n    exhaustMap(() => this.authService.logout().pipe(\n      map(() => AuthApiActions.logoutSuccess()),\n      catchError(() => of(AuthApiActions.logoutFailure()))\n    )),\n  );\n\n  @Effect()\n  register$ = this.actions$.pipe(\n    ofType(RegisterContainerActions.register),\n    exhaustMap(({credentials}) => this.authService.register(credentials).pipe(\n      map((user: User) => AuthApiActions.registerSuccess({user})),\n      catchError((error) => {\n        const errorMessage = Array.isArray(error) ? error[0].messages[0].id : 'authBackend.error.connection';\n        return of(AuthApiActions.registerFailure({error: errorMessage}));\n      })\n    )),\n  );\n\n  @Effect()\n  sendPasswordResetMail$ = this.actions$.pipe(\n    ofType(ForgotPasswordContainerActions.requestEmail),\n    exhaustMap(({email}) => this.authService.forgotPassword(email).pipe(\n      map(() => AuthApiActions.forgotPasswordSuccess()),\n      catchError(() => of(AuthApiActions.forgotPasswordFailure()))\n    )),\n  );\n\n  @Effect()\n  resetPassword$ = this.actions$.pipe(\n    ofType(ResetPasswordContainerActions.resetPassword),\n    exhaustMap(({password, resetPasswordToken}) => this.authService.resetPassword(password, resetPasswordToken).pipe(\n      map((user: User) => AuthApiActions.restPasswordSuccess({user})),\n      tap(() => this.snackBarService.openSnackBar('auth.reset-password.success')),\n      catchError(() => of(AuthApiActions.restPasswordFailure({error: 'authBackend.resetPassword.failed'})))\n    )),\n  );\n\n  @Effect({dispatch: false})\n  redirectWhenLoggedIn = this.actions$.pipe(\n    ofType(AuthApiActions.loginSuccess, AuthApiActions.registerSuccess, AuthApiActions.restPasswordSuccess),\n    withLatestFrom(this.store.select(selectRequestedUrlBeforeLoginWasRequired)),\n    tap(([_, url]) => {\n      this.router.navigate([url || DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER]);\n    }),\n  );\n\n  @Effect({dispatch: false})\n  redirectWhenLoggedOut = this.actions$.pipe(\n    ofType(AuthApiActions.logoutSuccess),\n    withLatestFrom(this.store.select(selectRequestedUrlBeforeLoginWasRequired)),\n    tap(() => {\n      this.router.navigate(['/']);\n    }),\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-f3ddac8d7137e112df5c6dbfa1580f80",
            "file": "src/app/features/auth/services/auth.service.ts",
            "properties": [
                {
                    "name": "refreshTokenTimeout",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "forgotPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "LoginCredentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "LoginCredentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<undefined>",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "refreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<JwtRefreshResponse>",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "RegisterCredentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "RegisterCredentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "password",
                            "type": "string"
                        },
                        {
                            "name": "resetPasswordToken",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resetPasswordToken",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startRefreshTokenTimer",
                    "args": [
                        {
                            "name": "jwt",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "jwt",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopRefreshTokenTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { environment } from '../../../../environments/environment';\nimport { decodeJwtToken, mapUserApiToUserClient } from '../../../core/helpers/helpers';\nimport { UserApi } from '../../../core/models/model-api';\nimport { JwtRefreshResponse, LoginCredentials, RegisterCredentials, User } from '../../../core/models/model';\nimport { GlobalState } from '../../../core/store';\nimport { Store } from '@ngrx/store';\nimport { LoginServiceActions } from '../store/actions';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private refreshTokenTimeout: number | undefined;\n\n  constructor(private httpClient: HttpClient, private store: Store<GlobalState>) {\n  }\n\n  login(credentials: LoginCredentials): Observable<User> {\n    return this.httpClient.post<UserApi>(`${environment.authUrl}/auth/local`, credentials).pipe(\n      map((userApi: UserApi) => mapUserApiToUserClient(userApi)),\n      tap(user => this.startRefreshTokenTimer(user.jwt))\n    );\n  }\n\n  register(credentials: RegisterCredentials): Observable<User> {\n    return this.httpClient.post<UserApi>(`${environment.authUrl}/auth/local/register`, {username: credentials.email, ...credentials}).pipe(\n      map((userApi: UserApi) => mapUserApiToUserClient(userApi)),\n      tap(user => this.startRefreshTokenTimer(user.jwt))\n    );\n  }\n\n  refreshToken(): Observable<JwtRefreshResponse> {\n    return this.httpClient.post<JwtRefreshResponse>(`${environment.authUrl}/auth/refresh-token`, {}).pipe(\n      tap((jwtRenewal: JwtRefreshResponse) => jwtRenewal.user && this.startRefreshTokenTimer(jwtRenewal.user.jwt))\n    );\n  }\n\n  forgotPassword(email: string): Observable<{ ok: boolean }> {\n    return this.httpClient.post<{ ok: boolean }>(`${environment.authUrl}/auth/forgot-password`, {email, user: email});\n  }\n\n  resetPassword(password: string, resetPasswordToken: string): Observable<User> {\n    return this.httpClient.post<UserApi>(\n      `${environment.authUrl}/auth/reset-password`,\n      {code: resetPasswordToken, password, passwordConfirmation: password})\n      .pipe(\n        map((userApi: UserApi) => mapUserApiToUserClient(userApi)),\n        tap(user => this.startRefreshTokenTimer(user.jwt))\n      );\n  }\n\n  logout(): Observable<true> {\n    this.stopRefreshTokenTimer();\n    return this.httpClient.post<true>(`${environment.authUrl}/auth/logout`, {});\n  }\n\n  private startRefreshTokenTimer(jwt: string): void {\n    const {exp} = decodeJwtToken(jwt);\n\n    const expires = new Date(exp * 1000);\n    // set a timeout to refresh the token a minute before it expires\n    const timeout = expires.getTime() - Date.now() - (60 * 1000);\n    this.stopRefreshTokenTimer();\n    this.refreshTokenTimeout = window.setTimeout(() => this.store.dispatch(LoginServiceActions.refreshToken()), timeout);\n  }\n\n  private stopRefreshTokenTimer(): void {\n    clearTimeout(this.refreshTokenTimeout);\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CookbookEffects",
            "id": "injectable-CookbookEffects-7c11ddae46fc5d2648aade532f9b2aba",
            "file": "src/app/features/cookbook/store/effects/cookbook.effects.ts",
            "properties": [
                {
                    "name": "chooseActiveCookbookId$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookApiActions.loadCookbookSuccess),\n    switchMap(({cookbooks}) => {\n      const requestedCookbookId = this.route.snapshot.queryParams.selectedCookbookId;\n      const cookbookIds = cookbooks.map((cookbook) => cookbook.id);\n      const selectedCookbookId = requestedCookbookId && cookbookIds.includes(requestedCookbookId) ?\n        requestedCookbookId : cookbookIds[0];\n      return of(CookbookApiActions.setActiveCookbookIdAsQueryParam({selectedCookbookId})\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "createCookbook$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.createCookbook),\n    exhaustMap(({title, optimisticId}) => this.cookbookService.saveCookbook(title).pipe(\n      map((cookbook: Cookbook) => CookbookApiActions.createCookbookSuccess({optimisticId, cookbook})),\n      catchError(() => of(CookbookApiActions.createCookbookFailure({optimisticId})))\n    ))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteCookbook$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.deleteCookbook),\n    filter(({cookbook}) => !!cookbook.id),\n    mergeMap(({cookbook}) => this.cookbookService.deleteCookbook(cookbook.id!).pipe(\n      map(() => CookbookApiActions.deleteCookbookSuccess({cookbook})),\n      catchError(() => of(CookbookApiActions.undoDeleteCookbookFromState({cookbook})))\n    ))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteRecipe$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.deleteRecipe),\n    filter(({recipe}: { recipe: Recipe }) => !!recipe.id),\n    mergeMap(({recipe}: { recipe: Recipe }) => this.recipeService.deleteRecipe(recipe.id!)\n      .pipe(\n        map(() => CookbookApiActions.deleteRecipeSuccess({deletedRecipe: recipe})),\n        catchError(() => of(CookbookApiActions.undoDeleteRecipeFromState({recipe})))\n      )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "editCookbook$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.editCookbook),\n    concatMap(({cookbook}) => this.cookbookService.editCookbook(cookbook).pipe(\n      map((editedCookbook: Cookbook) => CookbookApiActions.editCookbookSuccess({cookbook: editedCookbook})),\n      catchError(() => of(CookbookApiActions.editCookbookFailure()))\n    ))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 120,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "editRecipe$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.editRecipe),\n    withLatestFrom(this.store.select(((state: GlobalState) => state.cookbookState.activeCookbookId))),\n    concatMap(([action, cookbookId]) => this.recipeService.editRecipe(cookbookId, action.recipeToEdit)\n      .pipe(\n        map((recipe: Recipe) => CookbookApiActions.editRecipeSuccess({recipe})),\n        catchError(() => of(CookbookApiActions.editRecipeFailure()))\n      )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadCookbooks$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.loadCookbook),\n    withLatestFrom(this.store),\n    exhaustMap(([_, store]) => this.cookbookService.loadCookbooks(store.appState.user?.id!).pipe( // select userId from state\n      map((cookbooks: Cookbook[]) => CookbookApiActions.loadCookbookSuccess({cookbooks})),\n      catchError(() => of(CookbookApiActions.loadCookbookFailure()))\n    ))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadRecipes$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.loadRecipes, CookbookApiActions.loadCookbookSuccess, CookbookContainerActions.selectCookbook),\n    withLatestFrom(this.store.select(((state: GlobalState) => state.cookbookState.activeCookbookId))),\n    concatMap(([_, activeCookbookId]) => this.recipeService.loadRecipes(activeCookbookId)\n      .pipe(\n        map((recipes: Recipe[]) => CookbookApiActions.loadRecipesSuccess({cookbookId: activeCookbookId, recipes})),\n        catchError(() => of(CookbookApiActions.loadRecipesFailure()))\n      )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "navigateToCookbook$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookApiActions.createRecipeSuccess, CookbookApiActions.editRecipeSuccess),\n    tap(({recipe}) => this.router.navigate(['/cookbook'], {queryParams: {selectedCookbookId: recipe.cookbookId}}))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "saveRecipe$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.createRecipe),\n    withLatestFrom(this.store.select(((state: GlobalState) => state.cookbookState.activeCookbookId))),\n    concatMap(([action, activeCookbookId]) => this.recipeService.saveRecipe(activeCookbookId, action.recipeToSave)\n      .pipe(\n        map((recipe: Recipe) => CookbookApiActions.createRecipeSuccess({optimisticId: action.optimisticId, recipe})),\n        catchError(() => of(CookbookApiActions.createRecipeFailure({optimisticId: action.optimisticId, cookbookId: activeCookbookId})))\n      )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "setQueryParameterForActiveShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookApiActions.setActiveCookbookIdAsQueryParam, CookbookContainerActions.selectCookbook),\n    tap(({selectedCookbookId}) => {\n      this.router.navigate([], {relativeTo: this.route, queryParams: {selectedCookbookId}});\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 103,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "switchCookbookWhenDeleted$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.deleteCookbookFromState),\n    withLatestFrom(this.store),\n    filter(([{cookbook}, store]) => cookbook.id === store.cookbookState.activeCookbookId && store.cookbookState.cookbooks?.length > 0),\n    map(([_, store]) => {\n      return CookbookContainerActions.selectCookbook({selectedCookbookId: store.cookbookState.cookbooks[0].id});\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 139,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { catchError, concatMap, exhaustMap, filter, map, mergeMap, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { Cookbook, Recipe } from '../../../../core/models/model';\nimport { GlobalState } from '../../../../core/store';\nimport { CookbookApiActions, CookbookContainerActions } from '../actions';\nimport { CookbookService } from '../../services/cookbook.service';\nimport { RecipeService } from '../../services/recipe.service';\n\n@Injectable()\nexport class CookbookEffects {\n  constructor(\n    private actions$: Actions,\n    private cookbookService: CookbookService,\n    private store: Store<GlobalState>,\n    private recipeService: RecipeService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) {\n  }\n\n  @Effect()\n  loadCookbooks$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.loadCookbook),\n    withLatestFrom(this.store),\n    exhaustMap(([_, store]) => this.cookbookService.loadCookbooks(store.appState.user?.id!).pipe( // select userId from state\n      map((cookbooks: Cookbook[]) => CookbookApiActions.loadCookbookSuccess({cookbooks})),\n      catchError(() => of(CookbookApiActions.loadCookbookFailure()))\n    ))\n  );\n\n  @Effect()\n  loadRecipes$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.loadRecipes, CookbookApiActions.loadCookbookSuccess, CookbookContainerActions.selectCookbook),\n    withLatestFrom(this.store.select(((state: GlobalState) => state.cookbookState.activeCookbookId))),\n    concatMap(([_, activeCookbookId]) => this.recipeService.loadRecipes(activeCookbookId)\n      .pipe(\n        map((recipes: Recipe[]) => CookbookApiActions.loadRecipesSuccess({cookbookId: activeCookbookId, recipes})),\n        catchError(() => of(CookbookApiActions.loadRecipesFailure()))\n      )\n    )\n  );\n\n  @Effect()\n  saveRecipe$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.createRecipe),\n    withLatestFrom(this.store.select(((state: GlobalState) => state.cookbookState.activeCookbookId))),\n    concatMap(([action, activeCookbookId]) => this.recipeService.saveRecipe(activeCookbookId, action.recipeToSave)\n      .pipe(\n        map((recipe: Recipe) => CookbookApiActions.createRecipeSuccess({optimisticId: action.optimisticId, recipe})),\n        catchError(() => of(CookbookApiActions.createRecipeFailure({optimisticId: action.optimisticId, cookbookId: activeCookbookId})))\n      )\n    )\n  );\n\n  @Effect({dispatch: false})\n  navigateToCookbook$ = this.actions$.pipe(\n    ofType(CookbookApiActions.createRecipeSuccess, CookbookApiActions.editRecipeSuccess),\n    tap(({recipe}) => this.router.navigate(['/cookbook'], {queryParams: {selectedCookbookId: recipe.cookbookId}}))\n  );\n\n  @Effect()\n  editRecipe$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.editRecipe),\n    withLatestFrom(this.store.select(((state: GlobalState) => state.cookbookState.activeCookbookId))),\n    concatMap(([action, cookbookId]) => this.recipeService.editRecipe(cookbookId, action.recipeToEdit)\n      .pipe(\n        map((recipe: Recipe) => CookbookApiActions.editRecipeSuccess({recipe})),\n        catchError(() => of(CookbookApiActions.editRecipeFailure()))\n      )\n    )\n  );\n\n  @Effect()\n  deleteRecipe$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.deleteRecipe),\n    filter(({recipe}: { recipe: Recipe }) => !!recipe.id),\n    mergeMap(({recipe}: { recipe: Recipe }) => this.recipeService.deleteRecipe(recipe.id!)\n      .pipe(\n        map(() => CookbookApiActions.deleteRecipeSuccess({deletedRecipe: recipe})),\n        catchError(() => of(CookbookApiActions.undoDeleteRecipeFromState({recipe})))\n      )\n    )\n  );\n\n  @Effect()\n  chooseActiveCookbookId$ = this.actions$.pipe(\n    ofType(CookbookApiActions.loadCookbookSuccess),\n    switchMap(({cookbooks}) => {\n      const requestedCookbookId = this.route.snapshot.queryParams.selectedCookbookId;\n      const cookbookIds = cookbooks.map((cookbook) => cookbook.id);\n      const selectedCookbookId = requestedCookbookId && cookbookIds.includes(requestedCookbookId) ?\n        requestedCookbookId : cookbookIds[0];\n      return of(CookbookApiActions.setActiveCookbookIdAsQueryParam({selectedCookbookId})\n      );\n    }),\n  );\n\n  @Effect({dispatch: false})\n  setQueryParameterForActiveShoppingList$ = this.actions$.pipe(\n    ofType(CookbookApiActions.setActiveCookbookIdAsQueryParam, CookbookContainerActions.selectCookbook),\n    tap(({selectedCookbookId}) => {\n      this.router.navigate([], {relativeTo: this.route, queryParams: {selectedCookbookId}});\n    })\n  );\n\n  @Effect()\n  createCookbook$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.createCookbook),\n    exhaustMap(({title, optimisticId}) => this.cookbookService.saveCookbook(title).pipe(\n      map((cookbook: Cookbook) => CookbookApiActions.createCookbookSuccess({optimisticId, cookbook})),\n      catchError(() => of(CookbookApiActions.createCookbookFailure({optimisticId})))\n    ))\n  );\n\n  @Effect()\n  editCookbook$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.editCookbook),\n    concatMap(({cookbook}) => this.cookbookService.editCookbook(cookbook).pipe(\n      map((editedCookbook: Cookbook) => CookbookApiActions.editCookbookSuccess({cookbook: editedCookbook})),\n      catchError(() => of(CookbookApiActions.editCookbookFailure()))\n    ))\n  );\n\n  @Effect()\n  deleteCookbook$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.deleteCookbook),\n    filter(({cookbook}) => !!cookbook.id),\n    mergeMap(({cookbook}) => this.cookbookService.deleteCookbook(cookbook.id!).pipe(\n      map(() => CookbookApiActions.deleteCookbookSuccess({cookbook})),\n      catchError(() => of(CookbookApiActions.undoDeleteCookbookFromState({cookbook})))\n    ))\n  );\n\n  @Effect()\n  switchCookbookWhenDeleted$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.deleteCookbookFromState),\n    withLatestFrom(this.store),\n    filter(([{cookbook}, store]) => cookbook.id === store.cookbookState.activeCookbookId && store.cookbookState.cookbooks?.length > 0),\n    map(([_, store]) => {\n      return CookbookContainerActions.selectCookbook({selectedCookbookId: store.cookbookState.cookbooks[0].id});\n    })\n  );\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "cookbookService",
                        "type": "CookbookService"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "recipeService",
                        "type": "RecipeService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookbookService",
                        "type": "CookbookService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CookbookService",
            "id": "injectable-CookbookService-2b2e827a2382605866323e04173d51cb",
            "file": "src/app/features/cookbook/services/cookbook.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteCookbook",
                    "args": [
                        {
                            "name": "cookbookId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "cookbookId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editCookbook",
                    "args": [
                        {
                            "name": "cookbook",
                            "type": "Cookbook"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Cookbook>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "cookbook",
                            "type": "Cookbook",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCookbooks",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Cookbook[]>",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveCookbook",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Cookbook>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../../environments/environment';\nimport { convertCookbookApisToCookbooks, convertCookbookApiToCookbook } from '../../../core/helpers/helpers';\nimport { Cookbook } from '../../../core/models/model';\nimport { CookbookApi } from '../../../core/models/model-api';\n\n@Injectable()\nexport class CookbookService {\n  constructor(private httpClient: HttpClient) {\n  }\n\n  loadCookbooks(userId: string): Observable<Cookbook[]> {\n    return this.httpClient.get<CookbookApi[]>(`${environment.apiUrl}/cookbooks?user=${userId}&_sort=title:asc`).pipe(\n      map((cookbooks: CookbookApi[]) => convertCookbookApisToCookbooks(cookbooks))\n    );\n  }\n\n  saveCookbook(title: string): Observable<Cookbook> {\n    return this.httpClient.post<CookbookApi>(`${environment.apiUrl}/cookbooks`, {title}).pipe(\n      map((savedCookbook: CookbookApi) => convertCookbookApiToCookbook(savedCookbook))\n    );\n  }\n\n  editCookbook(cookbook: Cookbook): Observable<Cookbook> {\n    return this.httpClient.put<CookbookApi>(`${environment.apiUrl}/cookbooks/${cookbook.id}`, cookbook).pipe(\n      map((editedCookbook: CookbookApi) => convertCookbookApiToCookbook(editedCookbook))\n    );\n  }\n\n  deleteCookbook(cookbookId: string): Observable<boolean> {\n    return this.httpClient.delete<{ DELETED: boolean }>(`${environment.apiUrl}/cookbooks/${cookbookId}`)\n      .pipe(map((result: { DELETED: boolean }) => result.DELETED));\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-5f56c5290ad7daa3e5a1c35a73e01155",
            "file": "src/app/core/services/dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>"
                        },
                        {
                            "name": "data",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<T>",
                    "typeParameters": [
                        "T",
                        "D"
                    ],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ComponentType } from '@angular/cdk/overlay';\nimport { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DialogService {\n\n  constructor(\n    private dialog: MatDialog,\n  ) {\n  }\n\n  openDialog<T, D extends object>(component: ComponentType<T>, data: D): MatDialogRef<T> {\n    return this.dialog.open(component, {\n      data\n    });\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "I18nService",
            "id": "injectable-I18nService-726767442d62a787d5bf33fb513fc507",
            "file": "src/app/core/services/i18n.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getI18n",
                    "args": [
                        {
                            "name": "lang",
                            "type": "Language"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<I18nClient>",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "Language",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { mapI18nApiToI18nClient } from '../helpers/helpers';\nimport { I18n as I18nClient, Language } from '../models/model';\nimport { I18n as I18nApi } from '../models/model-api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nService {\n  constructor(private httpClient: HttpClient) {\n  }\n\n  getI18n(lang: Language): Observable<I18nClient> {\n    return this.httpClient.get<I18nApi>(`${environment.apiUrl}/i18n/${lang}`).pipe(\n      map((i18n: I18nApi) => mapI18nApiToI18nClient(i18n))\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RecipeService",
            "id": "injectable-RecipeService-7f41dd895e065006cdb0e48d966caab3",
            "file": "src/app/features/cookbook/services/recipe.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteRecipe",
                    "args": [
                        {
                            "name": "recipeId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "recipeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editRecipe",
                    "args": [
                        {
                            "name": "cookBookId",
                            "type": "string"
                        },
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Recipe>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "cookBookId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadRecipes",
                    "args": [
                        {
                            "name": "cookBookId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Recipe[]>",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "cookBookId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveRecipe",
                    "args": [
                        {
                            "name": "cookBookId",
                            "type": "string"
                        },
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Recipe>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "cookBookId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../../environments/environment';\nimport { convertRecipeApiToRecipe, convertRecipesApiToRecipes } from '../../../core/helpers/helpers';\nimport { Recipe } from '../../../core/models/model';\nimport { RecipeApi } from '../../../core/models/model-api';\n\n@Injectable()\nexport class RecipeService {\n  constructor(private httpClient: HttpClient) {\n  }\n\n  loadRecipes(cookBookId: string): Observable<Recipe[]> {\n    return this.httpClient.get<RecipeApi[]>(`${environment.apiUrl}/recipes?cookbook=${cookBookId}&_sort=title:asc`).pipe(\n      map((recipes: RecipeApi[]) => convertRecipesApiToRecipes(recipes))\n    );\n  }\n\n  saveRecipe(cookBookId: string, recipe: Recipe): Observable<Recipe> {\n    return this.httpClient.post<RecipeApi>(`${environment.apiUrl}/recipes`, {...recipe, cookbook: cookBookId}).pipe(\n      map((savedRecipe: RecipeApi) => convertRecipeApiToRecipe(savedRecipe))\n    );\n  }\n\n  editRecipe(cookBookId: string, recipe: Recipe): Observable<Recipe> {\n    return this.httpClient.put<RecipeApi>(`${environment.apiUrl}/recipes/${recipe.id}`, {...recipe, cookbook: cookBookId}).pipe(\n      map((editedRecipe: RecipeApi) => convertRecipeApiToRecipe(editedRecipe))\n    );\n  }\n\n  deleteRecipe(recipeId: string): Observable<boolean> {\n    return this.httpClient.delete<{ DELETED: boolean }>(`${environment.apiUrl}/recipes/${recipeId}`)\n      .pipe(map((result: { DELETED: boolean }) => result.DELETED));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingListApiEffects",
            "id": "injectable-ShoppingListApiEffects-908a3594f65652c00658628aaab7be91",
            "file": "src/app/features/shopping-list/store/effects/shopping-list-api.effects.ts",
            "properties": [
                {
                    "name": "addShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.addShoppingListItem, CookbookContainerActions.copyIngredientsToShoppingList),\n    concatMap(({optimisticId, shoppingListItem}) => this.shoppingListService.addShoppingListItem(shoppingListItem).pipe(\n      map((shoppingListItemApi: ShoppingListItem) => {\n        return ShoppingListApiActions.addShoppingListItemSuccess({optimisticId, shoppingListItem: shoppingListItemApi});\n      }),\n      catchError(() => of(ShoppingListApiActions.addShoppingListItemFailure({shoppingListItem})))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "bulkUpdateShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListEffectActions.bulkUpdateShoppingListItems),\n    map(({shoppingListItems}) => {\n      return shoppingListItems.map(shoppingListItem => this.shoppingListService.updateShoppingListItem(shoppingListItem));\n    }),\n    concatMap((updateObservables: Observable<ShoppingListItem>[]) => {\n      const a = forkJoin(updateObservables);\n      return a.pipe(\n        tap(() => console.log('success')),\n        map(() => ShoppingListApiActions.updateShoppingListItemSuccess()),\n        catchError(() => of(ShoppingListApiActions.updateShoppingListItemFailure({updateObservables}))));\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 139,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "changeShoppingListIfCurrentGetsDeleted$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingList),\n    withLatestFrom(this.store),\n    filter(([{shoppingList}, store]) => shoppingList.id === store.shoppingListState.activeShoppingList),\n    map(([_, store]) => {\n      const idOfFirstShoppingList = Object.keys(store.shoppingListState.shoppingLists.items.entities)[0];\n      return ShoppingListEffectActions.setActiveShoppingList({shoppingListId: idOfFirstShoppingList});\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 199,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "chooseCurrentShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListApiActions.loadShoppingListsSuccess),\n    switchMap(({shoppingLists}) => {\n      const shoppingListsIds = shoppingLists.map((shoppingList) => shoppingList.id);\n\n      const requestedShoppingListId = this.activatedRoute.snapshot.queryParams.shoppingListId;\n      if (requestedShoppingListId && shoppingListsIds.includes(requestedShoppingListId)) {\n        return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: requestedShoppingListId}));\n      }\n\n      const savedShoppingListId = localStorage.getItem('selectedShoppingListId');\n      if (savedShoppingListId && shoppingListsIds.includes(savedShoppingListId)) {\n        return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: savedShoppingListId}));\n      }\n\n      return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: shoppingListsIds[0]}));\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "createShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.createShoppingList),\n    concatMap(({title}) => this.shoppingListService.createShoppingList(title).pipe(\n      map((shoppingList) => {\n        return ShoppingListApiActions.createShoppingListSuccess({shoppingList});\n      }),\n      catchError(() => of(ShoppingListApiActions.createShoppingListFailure()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 154,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteShoppingListIfCurrentGetsDeleted$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingList),\n    concatMap(({shoppingList}) => {\n      return of({}).pipe(\n        delay(DELETION_DELAY),\n        takeUntil(this.actions$.pipe(ofType(ShoppingListContainerActions.undoDeleteShoppingList))),\n        mergeMap(() => this.shoppingListService.deleteShoppingList(shoppingList.id).pipe(\n          map(() => {\n            return ShoppingListApiActions.deleteShoppingListSuccess({shoppingList});\n          }),\n          catchError(() => of(ShoppingListApiActions.deleteShoppingListFailure()))\n        ))\n      );\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 182,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingListItem),\n    concatMap(({shoppingListItem}) => {\n      return of({}).pipe(\n        delay(DELETION_DELAY),\n        takeUntil(this.actions$.pipe(ofType(ShoppingListContainerActions.undoDeleteShoppingListItem))),\n        mergeMap(() =>  this.shoppingListService.deleteShoppingListItem(shoppingListItem.id).pipe(\n          map(() => {\n            return ShoppingListApiActions.deleteShoppingListItemSuccess({shoppingListItem});\n          }),\n          catchError(() => of(ShoppingListApiActions.deleteShoppingListItemFailure({shoppingListItem})))\n        ))\n      );\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "editShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.editShoppingList),\n    concatMap(({shoppingList}) => this.shoppingListService.updateShoppingList(shoppingList).pipe(\n      map((editedShoppingList) => {\n        return ShoppingListApiActions.editShoppingListSuccess({shoppingList: editedShoppingList});\n      }),\n      catchError(() => of(ShoppingListApiActions.editShoppingListFailure()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 171,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "getShoppingListItems$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListEffectActions.setActiveShoppingList, ShoppingListContainerActions.changeShoppingList),\n    exhaustMap(({shoppingListId}: SetActiveShoppingListAction | ChangeShoppingListAction) => {\n      return this.shoppingListService.getShoppingListItems(shoppingListId).pipe(\n        map((shoppingListItems: ShoppingListItem[]) => {\n          return ShoppingListApiActions.loadShoppingListItemsSuccess({shoppingListId, shoppingListItems});\n        }),\n        catchError(() => of(ShoppingListApiActions.loadShoppingListItemsFailure()))\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "getShoppingLists$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.loadShoppingLists, CookbookContainerActions.loadShoppingLists),\n    withLatestFrom(this.store.select(selectUserID)),\n    filter(([_, userId]) => !!userId),\n    exhaustMap(([_, userId]) => this.shoppingListService.getShoppingLists(userId!).pipe(\n      map((shoppingLists: ShoppingList[]) => ShoppingListApiActions.loadShoppingListsSuccess({shoppingLists})),\n      catchError(() => of(ShoppingListApiActions.loadShoppingListsFailure()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "moveShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.moveShoppingListItem),\n    withLatestFrom(this.store.select(selectCurrentShoppingListItems)),\n    map(([{shoppingListId, previousIndex, currentIndex}, shoppingListItems]) => {\n      const [fromIndex, toIndex] = [previousIndex, currentIndex].sort();\n      const itemsToUpdate = moveItemInArray(shoppingListItems, previousIndex, currentIndex).slice(fromIndex, toIndex + 1);\n      const maxOrder = Math.max(...itemsToUpdate.map((shoppingListItem: ShoppingListItem) => shoppingListItem.order || 0));\n\n      moveItemInArray(itemsToUpdate, previousIndex, currentIndex);\n\n      return ShoppingListEffectActions.bulkUpdateShoppingListItems({\n        shoppingListId,\n        shoppingListItems: itemsToUpdate.map((item, index) => ({...item, order: maxOrder - index})),\n      });\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "selectNewlyCreatedShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListApiActions.createShoppingListSuccess),\n    map(({shoppingList}) => ShoppingListEffectActions.setActiveShoppingList({shoppingListId: shoppingList.id})),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 165,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "setLocalStorageForActiveShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(\n      ShoppingListEffectActions.setActiveShoppingList,\n      ShoppingListContainerActions.changeShoppingList\n    ),\n    tap(({shoppingListId}) => {\n      localStorage.setItem('selectedShoppingListId', shoppingListId);\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "setQueryParameterForActiveShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(\n      ShoppingListEffectActions.setActiveShoppingList,\n      ShoppingListContainerActions.changeShoppingList,\n    ),\n    tap(({shoppingListId}) => {\n      this.router.navigate([], {relativeTo: this.activatedRoute, queryParams: {shoppingListId}});\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { catchError, concatMap, delay, exhaustMap, filter, map, mergeMap, switchMap, takeUntil, tap, withLatestFrom } from 'rxjs/operators';\nimport { CookbookContainerActions } from '../../../cookbook/store/actions';\nimport { DELETION_DELAY } from '../../../../core/constants/constants';\nimport { ShoppingList, ShoppingListItem } from '../../../../core/models/model';\nimport { ChangeShoppingListAction, SetActiveShoppingListAction } from '../../../../core/models/model-action';\nimport { GlobalState, selectCurrentShoppingListItems, selectUserID } from '../../../../core/store';\nimport { ShoppingListApiActions, ShoppingListContainerActions, ShoppingListEffectActions } from '../actions';\nimport { ShoppingListService } from '../../service/shopping-list.service';\nimport { moveItemInArray } from '../../../../core/helpers/helpers';\n\n@Injectable()\nexport class ShoppingListApiEffects {\n  constructor(\n    private actions$: Actions,\n    private shoppingListService: ShoppingListService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private store: Store<GlobalState>) {\n  }\n\n  @Effect()\n  getShoppingLists$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.loadShoppingLists, CookbookContainerActions.loadShoppingLists),\n    withLatestFrom(this.store.select(selectUserID)),\n    filter(([_, userId]) => !!userId),\n    exhaustMap(([_, userId]) => this.shoppingListService.getShoppingLists(userId!).pipe(\n      map((shoppingLists: ShoppingList[]) => ShoppingListApiActions.loadShoppingListsSuccess({shoppingLists})),\n      catchError(() => of(ShoppingListApiActions.loadShoppingListsFailure()))\n    )),\n  );\n\n  @Effect()\n  chooseCurrentShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListApiActions.loadShoppingListsSuccess),\n    switchMap(({shoppingLists}) => {\n      const shoppingListsIds = shoppingLists.map((shoppingList) => shoppingList.id);\n\n      const requestedShoppingListId = this.activatedRoute.snapshot.queryParams.shoppingListId;\n      if (requestedShoppingListId && shoppingListsIds.includes(requestedShoppingListId)) {\n        return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: requestedShoppingListId}));\n      }\n\n      const savedShoppingListId = localStorage.getItem('selectedShoppingListId');\n      if (savedShoppingListId && shoppingListsIds.includes(savedShoppingListId)) {\n        return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: savedShoppingListId}));\n      }\n\n      return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: shoppingListsIds[0]}));\n    }),\n  );\n\n  @Effect({dispatch: false})\n  setQueryParameterForActiveShoppingList$ = this.actions$.pipe(\n    ofType(\n      ShoppingListEffectActions.setActiveShoppingList,\n      ShoppingListContainerActions.changeShoppingList,\n    ),\n    tap(({shoppingListId}) => {\n      this.router.navigate([], {relativeTo: this.activatedRoute, queryParams: {shoppingListId}});\n    })\n  );\n\n  @Effect({dispatch: false})\n  setLocalStorageForActiveShoppingList$ = this.actions$.pipe(\n    ofType(\n      ShoppingListEffectActions.setActiveShoppingList,\n      ShoppingListContainerActions.changeShoppingList\n    ),\n    tap(({shoppingListId}) => {\n      localStorage.setItem('selectedShoppingListId', shoppingListId);\n    })\n  );\n\n  @Effect()\n  getShoppingListItems$ = this.actions$.pipe(\n    ofType(ShoppingListEffectActions.setActiveShoppingList, ShoppingListContainerActions.changeShoppingList),\n    exhaustMap(({shoppingListId}: SetActiveShoppingListAction | ChangeShoppingListAction) => {\n      return this.shoppingListService.getShoppingListItems(shoppingListId).pipe(\n        map((shoppingListItems: ShoppingListItem[]) => {\n          return ShoppingListApiActions.loadShoppingListItemsSuccess({shoppingListId, shoppingListItems});\n        }),\n        catchError(() => of(ShoppingListApiActions.loadShoppingListItemsFailure()))\n      );\n    }),\n  );\n\n  @Effect()\n  addShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.addShoppingListItem, CookbookContainerActions.copyIngredientsToShoppingList),\n    concatMap(({optimisticId, shoppingListItem}) => this.shoppingListService.addShoppingListItem(shoppingListItem).pipe(\n      map((shoppingListItemApi: ShoppingListItem) => {\n        return ShoppingListApiActions.addShoppingListItemSuccess({optimisticId, shoppingListItem: shoppingListItemApi});\n      }),\n      catchError(() => of(ShoppingListApiActions.addShoppingListItemFailure({shoppingListItem})))\n    )),\n  );\n\n  @Effect()\n  deleteShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingListItem),\n    concatMap(({shoppingListItem}) => {\n      return of({}).pipe(\n        delay(DELETION_DELAY),\n        takeUntil(this.actions$.pipe(ofType(ShoppingListContainerActions.undoDeleteShoppingListItem))),\n        mergeMap(() =>  this.shoppingListService.deleteShoppingListItem(shoppingListItem.id).pipe(\n          map(() => {\n            return ShoppingListApiActions.deleteShoppingListItemSuccess({shoppingListItem});\n          }),\n          catchError(() => of(ShoppingListApiActions.deleteShoppingListItemFailure({shoppingListItem})))\n        ))\n      );\n    })\n  );\n\n  @Effect()\n  moveShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.moveShoppingListItem),\n    withLatestFrom(this.store.select(selectCurrentShoppingListItems)),\n    map(([{shoppingListId, previousIndex, currentIndex}, shoppingListItems]) => {\n      const [fromIndex, toIndex] = [previousIndex, currentIndex].sort();\n      const itemsToUpdate = moveItemInArray(shoppingListItems, previousIndex, currentIndex).slice(fromIndex, toIndex + 1);\n      const maxOrder = Math.max(...itemsToUpdate.map((shoppingListItem: ShoppingListItem) => shoppingListItem.order || 0));\n\n      moveItemInArray(itemsToUpdate, previousIndex, currentIndex);\n\n      return ShoppingListEffectActions.bulkUpdateShoppingListItems({\n        shoppingListId,\n        shoppingListItems: itemsToUpdate.map((item, index) => ({...item, order: maxOrder - index})),\n      });\n    }),\n  );\n\n  @Effect()\n  bulkUpdateShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListEffectActions.bulkUpdateShoppingListItems),\n    map(({shoppingListItems}) => {\n      return shoppingListItems.map(shoppingListItem => this.shoppingListService.updateShoppingListItem(shoppingListItem));\n    }),\n    concatMap((updateObservables: Observable<ShoppingListItem>[]) => {\n      const a = forkJoin(updateObservables);\n      return a.pipe(\n        tap(() => console.log('success')),\n        map(() => ShoppingListApiActions.updateShoppingListItemSuccess()),\n        catchError(() => of(ShoppingListApiActions.updateShoppingListItemFailure({updateObservables}))));\n    })\n  );\n\n  @Effect()\n  createShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.createShoppingList),\n    concatMap(({title}) => this.shoppingListService.createShoppingList(title).pipe(\n      map((shoppingList) => {\n        return ShoppingListApiActions.createShoppingListSuccess({shoppingList});\n      }),\n      catchError(() => of(ShoppingListApiActions.createShoppingListFailure()))\n    )),\n  );\n\n  @Effect()\n  selectNewlyCreatedShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListApiActions.createShoppingListSuccess),\n    map(({shoppingList}) => ShoppingListEffectActions.setActiveShoppingList({shoppingListId: shoppingList.id})),\n  );\n\n  @Effect()\n  editShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.editShoppingList),\n    concatMap(({shoppingList}) => this.shoppingListService.updateShoppingList(shoppingList).pipe(\n      map((editedShoppingList) => {\n        return ShoppingListApiActions.editShoppingListSuccess({shoppingList: editedShoppingList});\n      }),\n      catchError(() => of(ShoppingListApiActions.editShoppingListFailure()))\n    )),\n  );\n\n  @Effect()\n  deleteShoppingListIfCurrentGetsDeleted$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingList),\n    concatMap(({shoppingList}) => {\n      return of({}).pipe(\n        delay(DELETION_DELAY),\n        takeUntil(this.actions$.pipe(ofType(ShoppingListContainerActions.undoDeleteShoppingList))),\n        mergeMap(() => this.shoppingListService.deleteShoppingList(shoppingList.id).pipe(\n          map(() => {\n            return ShoppingListApiActions.deleteShoppingListSuccess({shoppingList});\n          }),\n          catchError(() => of(ShoppingListApiActions.deleteShoppingListFailure()))\n        ))\n      );\n    })\n  );\n\n  @Effect()\n  changeShoppingListIfCurrentGetsDeleted$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingList),\n    withLatestFrom(this.store),\n    filter(([{shoppingList}, store]) => shoppingList.id === store.shoppingListState.activeShoppingList),\n    map(([_, store]) => {\n      const idOfFirstShoppingList = Object.keys(store.shoppingListState.shoppingLists.items.entities)[0];\n      return ShoppingListEffectActions.setActiveShoppingList({shoppingListId: idOfFirstShoppingList});\n    })\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "shoppingListService",
                        "type": "ShoppingListService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shoppingListService",
                        "type": "ShoppingListService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingListService",
            "id": "injectable-ShoppingListService-9522dc4da5030401338e7db677e90262",
            "file": "src/app/features/shopping-list/service/shopping-list.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addShoppingListItem",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingListItem>",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createShoppingList",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingList>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteShoppingList",
                    "args": [
                        {
                            "name": "shoppingListId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "shoppingListId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteShoppingListItem",
                    "args": [
                        {
                            "name": "shoppingListItemId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getShoppingListItems",
                    "args": [
                        {
                            "name": "shoppingListId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingListItem[]>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "shoppingListId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getShoppingLists",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingList[]>",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateShoppingList",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingList>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateShoppingListItem",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingListItem>",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { BasicShoppingListItem, ShoppingList, ShoppingListItem } from '../../../core/models/model';\nimport { ShoppingListItemApi as ShoppingListItemApi } from '../../../core/models/model-api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShoppingListService {\n  constructor(private httpClient: HttpClient) {\n  }\n\n  getShoppingLists(userId: string): Observable<ShoppingList[]> {\n    return this.httpClient.get<ShoppingList[]>(`${environment.apiUrl}/shopping-lists?user=${userId}`);\n  }\n\n  createShoppingList(title: string): Observable<ShoppingList> {\n    return this.httpClient.post<ShoppingList>(`${environment.apiUrl}/shopping-lists`, {title});\n  }\n\n  updateShoppingList(shoppingList: ShoppingList): Observable<ShoppingList> {\n    return this.httpClient.put<ShoppingList>(`${environment.apiUrl}/shopping-lists/${shoppingList.id}`, {title: shoppingList.title});\n  }\n\n  deleteShoppingList(shoppingListId: string): Observable<{ DELETED: true }> {\n    return this.httpClient.delete<{ DELETED: true }>(`${environment.apiUrl}/shopping-lists/${shoppingListId}`);\n  }\n\n  getShoppingListItems(shoppingListId: string): Observable<ShoppingListItem[]> {\n    return this.httpClient.get<ShoppingListItemApi[]>(`${environment.apiUrl}/shopping-list-items?shoppingList=${shoppingListId}`);\n  }\n\n  addShoppingListItem(shoppingListItem: BasicShoppingListItem): Observable<ShoppingListItem> {\n    return this.httpClient.post<ShoppingListItem>(`${environment.apiUrl}/shopping-list-items`, shoppingListItem);\n  }\n\n  updateShoppingListItem(shoppingListItem: ShoppingListItem): Observable<ShoppingListItem> {\n    return this.httpClient.put<ShoppingListItem>(`${environment.apiUrl}/shopping-list-items/${shoppingListItem.id}`, shoppingListItem);\n  }\n\n  deleteShoppingListItem(shoppingListItemId: string): Observable<{ DELETED: true }> {\n    return this.httpClient.delete<{ DELETED: true }>(`${environment.apiUrl}/shopping-list-items/${shoppingListItemId}`);\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SnackbarService",
            "id": "injectable-SnackbarService-0f3fb94234f546550677bb6f5b5d6c90",
            "file": "src/app/core/services/snackbar.service.ts",
            "properties": [
                {
                    "name": "currentLang",
                    "type": "Language | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "translations",
                    "type": "I18n | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "openSnackBar",
                    "args": [
                        {
                            "name": "messageKey",
                            "type": "string"
                        },
                        {
                            "name": "actionKey",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "displayInMilliSeconds",
                            "type": "number",
                            "defaultValue": "10000"
                        }
                    ],
                    "optional": false,
                    "returnType": "MatSnackBarRef<TextOnlySnackBar>",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "messageKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionKey",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "displayInMilliSeconds",
                            "type": "number",
                            "defaultValue": "10000",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { TextOnlySnackBar } from '@angular/material/snack-bar/simple-snack-bar';\nimport { Store } from '@ngrx/store';\nimport { TranslatePipe } from '../../shared/pipes/translate.pipe';\nimport { I18n, Language } from '../models/model';\nimport { GlobalState, selectTranslations } from '../store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackbarService {\n\n  private translations: I18n | null | undefined;\n  private currentLang: Language | undefined;\n\n  constructor(\n    private snackBar: MatSnackBar,\n    private store: Store<GlobalState>,\n    private translatePipe: TranslatePipe\n  ) {\n    this.store.select(selectTranslations).subscribe((translations: I18n | null) => this.translations = translations);\n    this.store.select((state: GlobalState) => state.appState.language).subscribe((lang: Language) => this.currentLang = lang);\n  }\n\n  openSnackBar(messageKey: string, actionKey?: string , displayInMilliSeconds: number = 10000): MatSnackBarRef<TextOnlySnackBar> {\n    const message = this.translatePipe.transform(messageKey, this.translations || null, this.currentLang);\n    const action = actionKey ? this.translatePipe.transform(actionKey, this.translations || null, this.currentLang) : undefined;\n    return this.snackBar.open(message, action, {\n      duration: displayInMilliSeconds,\n      panelClass: 'snackbar'\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "RouterLinkDirectiveStub",
            "id": "directive-RouterLinkDirectiveStub-c9217ce2763c98d52dd892c167c14067",
            "file": "testing/router-link-directive.stub.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[routerLink]'\n})\nexport class RouterLinkDirectiveStub {\n  @Input('routerLink') linkParams: any;\n  navigatedTo: any = null;\n\n  @HostListener('click')\n  onClick(): void {\n    this.navigatedTo = this.linkParams;\n  }\n}\n",
            "selector": "[routerLink]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "routerLink",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 12
                }
            ],
            "propertiesClass": [
                {
                    "name": "navigatedTo",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": []
        }
    ],
    "components": [
        {
            "name": "AddRecipeDialogComponent",
            "id": "component-AddRecipeDialogComponent-7b7d3220b5002e526c2eeb7d0a9131c6",
            "file": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-page",
            "styleUrls": [
                "./add-recipe-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-recipe-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogData",
                    "type": "DialogData<Recipe>",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<AddRecipeDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ingredients",
                    "defaultValue": "new FormArray([])",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "ingredientsForm",
                    "defaultValue": "new FormGroup({\n    ingredients: new FormArray([])\n  })",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "onAddIngredients",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "onAddRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "onEdit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "toggleSelected",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl"
                        },
                        {
                            "name": "isSelected",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSelected",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { DialogData, Recipe, RecipeIngredient } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-recipe-page',\n  templateUrl: './add-recipe-dialog.component.html',\n  styleUrls: ['./add-recipe-dialog.component.scss']\n})\nexport class AddRecipeDialogComponent implements OnInit {\n  ingredientsForm: FormGroup = new FormGroup({\n    ingredients: new FormArray([])\n  });\n  ingredients: FormArray = new FormArray([]);\n\n  constructor(\n    public dialogRef: MatDialogRef<AddRecipeDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public dialogData: DialogData<Recipe>,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.dialogData.data.ingredients.forEach((ingredient: RecipeIngredient) => {\n      ((this.ingredientsForm.controls.ingredients as FormArray).controls).push(new FormGroup({\n        id: new FormControl(ingredient.id),\n        isSelected: new FormControl(ingredient.isStapleFood),\n        title: new FormControl(ingredient.title),\n        amount: new FormControl(ingredient.amount),\n        unit: new FormControl(ingredient.unit)\n      }));\n    });\n    this.ingredients = this.ingredientsForm.controls.ingredients as FormArray;\n  }\n\n  onEdit(): void {\n    this.dialogRef.close();\n  }\n\n  onAddIngredients(): void {\n    this.dialogRef.close({\n      event: 'selectedIngredients',\n      selectedIngredients: this.ingredients.controls.map((control: AbstractControl) => (control as FormGroup).value)\n    });\n  }\n\n  onAddRecipe(): void{\n    this.dialogRef.close({\n      event: 'recipe',\n      recipe: this.dialogData.data\n    });\n  }\n\n  getFormControl(ingredient: AbstractControl, key: string): FormControl {\n    return (ingredient as FormGroup).controls[key] as FormControl;\n  }\n\n  toggleSelected(ingredient: AbstractControl, isSelected: boolean): void {\n    this.getFormControl(ingredient, 'isSelected').setValue(isSelected);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/breakpoints\";\n@import \"../../../../../styles/settings/variables\";\n\n.button-group{\n  margin-top: 1rem;\n\n  .button--margin{\n    margin-right: 1rem;\n    margin-bottom: 1rem;\n    outline: 0;\n\n    @include large{\n      margin-bottom: 0;\n    }\n\n  }\n}\n\n.ingredient{\n  width: 100%;\n  display: block;\n  overflow: hidden;\n\n  .ingredient-column{\n    display: inline-block;\n    margin-right: 0.5rem;\n    padding-left: 0.5rem;\n\n    &:first-child{\n      padding-left: 0;\n    }\n\n    &:last-child{\n      margin-right: 0;\n    }\n  }\n}\n",
                    "styleUrl": "./add-recipe-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddRecipeDialogComponent>"
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<Recipe>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddRecipeDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<Recipe>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\n  <div mat-dialog-title>{{dialogData.data.title}}</div>\n  <h4>{{dialogData.translations['ingredients.label-text']}}</h4>\n  <div *ngFor=\"let ingredient of ingredients.controls\" mat-dialog-content>\n    <form [formGroup]=\"ingredientsForm\" (ngSubmit)=\"onAddIngredients()\">\n      <div class=\"ingredient\">\n        <mat-checkbox\n          class=\"shopping-list__item-text\"\n          [checked]=\"getFormControl(ingredient, 'isSelected').value\"\n          [color]=\"'primary'\"\n          [disableRipple]=\"true\"\n          (change)=\"toggleSelected(ingredient, $event.checked)\">\n          <span class=\"ingredient-column\">{{getFormControl(ingredient, 'amount').value}}</span>\n          <span class=\"ingredient-column\">{{getFormControl(ingredient, 'unit').value}}</span>\n          <span class=\"ingredient-column\">{{getFormControl(ingredient, 'title').value}}</span>\n        </mat-checkbox>\n\n      </div>\n    </form>\n  </div>\n  <div class=\"button-group\" mat-dialog-actions>\n    <app-button (click)=\"onAddIngredients()\"\n                [buttonText]=\"dialogData.translations['button.add-to-shopping-list']\"\n                [color]=\"'accent'\"\n                class=\"button--margin\"\n    >\n    </app-button>\n    <app-button (click)=\"onAddRecipe()\"\n                [buttonText]=\"dialogData.translations['button.add-to-mealplaner']\"\n    >\n    </app-button>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-bc289e7ad9bae7f8189b77a9fa22043b",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLang$",
                    "defaultValue": "this.store.select(selectCurrentLanguage)",
                    "type": "Observable<Language | null>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "this.store.select(isLoggedIn)",
                    "type": "Observable<boolean | null>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "language",
                            "type": "Language"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "Language",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { I18n, Language } from './core/models/model';\nimport { GlobalState, isLoggedIn, selectCurrentLanguage, selectTranslations } from './core/store';\nimport { NavActions } from './core/store/actions';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLang$: Observable<Language | null> = this.store.select(selectCurrentLanguage);\n  isLoggedIn: Observable<boolean | null> = this.store.select(isLoggedIn);\n\n  constructor(private store: Store<GlobalState>) {\n  }\n\n  onLogout(): void {\n    this.store.dispatch(NavActions.logout());\n  }\n\n  changeLanguage(language: Language): void {\n    this.store.dispatch(NavActions.changeLanguage({language}));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-navigation\n  [isLoggedIn]=\"isLoggedIn | async\"\n  [translations]=\"translations$ | async\"\n  [currentLang]=\"currentLang$ | async\"\n  (logout)=\"onLogout()\"\n  (languageChanged)=\"changeLanguage($event)\"\n></app-navigation>\n\n<div id=\"main-page\">\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "AuthFormComponent",
            "id": "component-AuthFormComponent-71d50d8b24efac141cc57d390deaeeb0",
            "file": "src/app/features/auth/components/auth-form/auth-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth-form",
            "styleUrls": [
                "./auth-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "authForm",
                    "defaultValue": "new FormGroup({})",
                    "line": 15,
                    "type": "FormGroup"
                },
                {
                    "name": "backedErrorMessage",
                    "line": 14,
                    "type": "string | undefined"
                },
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "line": 13
                },
                {
                    "name": "heading",
                    "defaultValue": "''",
                    "line": 12
                },
                {
                    "name": "showButton",
                    "defaultValue": "true",
                    "line": 16
                }
            ],
            "outputsClass": [
                {
                    "name": "formSubmit",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter<LoginCredentials>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formFooter",
                    "type": "TemplateRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'formFooter'"
                        }
                    ]
                },
                {
                    "name": "formTemplate",
                    "type": "TemplateRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'formTemplate'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { LoginCredentials } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-auth-form',\n  templateUrl: './auth-form.component.html',\n  styleUrls: ['./auth-form.component.scss']\n})\nexport class AuthFormComponent {\n\n  @Input() heading = '';\n  @Input() buttonText = '';\n  @Input() backedErrorMessage: string | undefined;\n  @Input() authForm: FormGroup = new FormGroup({});\n  @Input() showButton = true;\n  @Output() formSubmit: EventEmitter<LoginCredentials> = new EventEmitter();\n\n  /* tslint:disable no-any*/\n  @ContentChild('formTemplate') formTemplate: TemplateRef<any> | null;\n  @ContentChild('formFooter') formFooter: TemplateRef<any> | null;\n\n  /* tslint:enable no-any*/\n\n  constructor() {\n    this.formTemplate = null;\n    this.formFooter = null;\n  }\n\n  onSubmit(): void {\n    this.formSubmit.emit(this.authForm?.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/variables\";\n\n.auth-form {\n  max-width: 500px;\n\n  &__header {\n    background: $blue_100;\n    color: $blue_10;\n    text-align: center;\n    font-size: 1.4em;\n    letter-spacing: 3px;\n    padding: 1.0em 0;\n    margin: 0 20px;\n  }\n\n  &__form {\n    background: $blue-grey_10;\n    margin: 0 20px;\n    padding: 24px 0;\n    display: flex;\n    flex-direction: column;\n  }\n\n  &__button {\n    background: $blue_100;\n    position: relative;\n    border: none;\n    display: block;\n    color: $blue-grey_10;\n    width: 100%;\n    font-size: 1.3em;\n    padding: 10px 0;\n    cursor: pointer;\n\n    &::before {\n      content: \"\";\n      position: absolute;\n      display: block;\n      height: 10px;\n      width: 10px;\n      top: 32px;\n      left: -20px;\n      border-style: solid;\n      border-width: 20px;\n      border-color: transparent $blue_70 transparent transparent;\n      z-index: -1;\n    }\n\n    &::after {\n      content: \"\";\n      position: absolute;\n      display: block;\n      height: 10px;\n      width: 10px;\n      top: 32px;\n      right: -20px;\n      border-style: solid;\n      border-width: 20px;\n      border-color: transparent  transparent transparent $blue_70;\n      z-index: -1;\n    }\n  }\n\n  &__helper-section {\n    color: $blue_grey_40;\n    background: $blue-grey_10;\n    text-align: center;\n    margin: 0 20px;\n    padding: 24px 0;\n    line-height: 1.5;\n  }\n\n  &__backend-error {\n    width: 80%;\n    padding: 8px 4px;\n    color: $red_10;\n    background: $red_50;\n    margin: 0 auto;\n    border-radius: $border-radius-default;\n  }\n\n  &__link {\n    color: $blue_80;\n  }\n}\n",
                    "styleUrl": "./auth-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "templateData": "<div class=\"container auth-form\">\n  <div class=\"auth-form__header\">\n    {{heading}}\n  </div>\n  <form [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\n\n    <div class=\"auth-form__form\">\n      <div class=\"auth-form__backend-error\" *ngIf=\"backedErrorMessage\">\n        {{backedErrorMessage}}\n      </div>\n\n      <ng-container *ngTemplateOutlet=\"formTemplate; context: {form: authForm}\"></ng-container>\n    </div>\n\n    <button *ngIf=\"showButton\" class=\"auth-form__button\">{{ buttonText }}</button>\n  </form>\n\n  <section *ngIf=\"showButton\" class=\"auth-form__helper-section\">\n    <ng-container [ngTemplateOutlet]=\"formFooter\"></ng-container>\n  </section>\n</div>\n\n\n"
        },
        {
            "name": "BetaTeaserComponent",
            "id": "component-BetaTeaserComponent-c4e03dd51ee7bb8885e6e7c0c02fb1bc",
            "file": "src/app/core/components/beta-teaser/beta-teaser.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-beta-teaser",
            "styleUrls": [
                "./beta-teaser.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./beta-teaser.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLang$",
                    "defaultValue": "this.store.select(selectCurrentLanguage)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "url",
                    "defaultValue": "'https://mealplaner.app'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Location } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { getI18n } from '../../store/actions/i18n-api.actions';\nimport { GlobalState, selectCurrentLanguage, selectTranslations } from '../../store';\n\n@Component({\n  selector: 'app-beta-teaser',\n  templateUrl: './beta-teaser.component.html',\n  styleUrls: ['./beta-teaser.component.scss']\n})\nexport class BetaTeaserComponent implements OnInit {\n  url = 'https://mealplaner.app';\n  translations$ = this.store.select(selectTranslations);\n  currentLang$ = this.store.select(selectCurrentLanguage);\n\n  constructor(\n    private location: Location,\n    private store: Store<GlobalState>) {\n  }\n\n  ngOnInit(): void {\n    this.url = `https://mealplaner.app${this.location.path()}`;\n    // Todo don't load the translations here\n    this.store.dispatch(getI18n());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".beta-teaser {\n  background: #333333;\n  color: white;\n  text-align: center;\n  padding: 8px;\n\n  &--link {\n    color: #1976d2;\n  }\n}\n\n\n",
                    "styleUrl": "./beta-teaser.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"beta-teaser\">👶 {{'beta.teaser' | translate: (translations$ | async): (currentLang$ | async) || 'de' }}\n  <a class=\"beta-teaser--link\" [href]=\"url\">here.</a>\n</div>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c247e23ed8b0a5f9c92f364a1f7da365",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "line": 12
                },
                {
                    "name": "buttonType",
                    "defaultValue": "'button'",
                    "line": 13
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "line": 16
                },
                {
                    "name": "e2eTestName",
                    "defaultValue": "''",
                    "line": 15
                },
                {
                    "name": "hasErrors",
                    "defaultValue": "false",
                    "line": 20
                },
                {
                    "name": "iconLeft",
                    "line": 17,
                    "type": "IconName | undefined"
                },
                {
                    "name": "iconRight",
                    "line": 18,
                    "type": "IconName | undefined"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 14
                },
                {
                    "name": "isInputGroup",
                    "defaultValue": "false",
                    "line": 19
                }
            ],
            "outputsClass": [
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "line": 21,
                    "type": "EventEmitter<MouseEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IconName } from '@fortawesome/fontawesome-common-types';\nimport { RouterLink } from '@angular/router';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent {\n\n  @Input() buttonText = '';\n  @Input() buttonType = 'button';\n  @Input() isDisabled = false;\n  @Input() e2eTestName = '';\n  @Input() color = 'primary';\n  @Input() iconLeft: IconName | undefined;\n  @Input() iconRight: IconName | undefined;\n  @Input() isInputGroup = false;\n  @Input() hasErrors = false;\n  @Output() clicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  onClick(event: MouseEvent): void {\n    this.clicked.emit(event);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/mixins/forms\";\n\n.button{\n  background-color: $blue_70;\n  cursor: pointer;\n  color: $blue-grey_10;\n   @include button();\n\n  &:hover{\n    background-color: $blue_60;\n  }\n\n  &:active {\n    background-color: $blue_80;\n  }\n\n  &--no-left-border-radius{\n    border-radius: 0 4px 4px 0;\n  }\n\n  &--color-inverted{\n    background-color: #FFFFFF;\n    color: $blue_100;\n    font-weight: 400;\n\n    &:hover{\n      background-color: $blue-grey_10;\n    }\n\n    &:active {\n      background-color: $blue-grey_10;\n    }\n  }\n\n  &--color-accent{\n    background-color: $cyan_70;\n    color:$cyan_10;\n\n    &:hover{\n      background-color: $cyan_60;\n    }\n\n    &:active {\n      background-color: $cyan_80;\n    }\n  }\n\n  &--color-warning{\n    background-color: $red_70;\n    color: $red_10;\n\n    &:hover{\n      background-color: $red_60;\n    }\n\n    &:active {\n      background-color: $red_80;\n    }\n  }\n\n  &--color-disabled{\n    background-color: $blue-grey_50;\n    cursor: not-allowed;\n\n    &:hover,\n    &:active{\n      background-color: $blue-grey_50;\n    }\n\n  }\n\n  &--warning-border{\n    border: 2px solid $red_70;\n    border-left: none;\n  }\n\n  .icon-left{\n    padding-right: 0.5rem;\n  }\n\n  .icon-right{\n    padding-left: 0.5rem;\n  }\n\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n  class=\"button\"\n  [disabled]=\"isDisabled\"\n  [attr.data-test]=\"e2eTestName\"\n  [type]=\"buttonType\"\n  (click)=\"onClick($event)\"\n  [ngClass]=\"{\n  'button--no-left-border-radius': isInputGroup,\n  'button--color-inverted': color === 'inverted' && !isDisabled,\n  'button--color-accent': color === 'accent' && !isDisabled,\n  'button--color-warning': color === 'warn' && !isDisabled,\n  'button--color-disabled': isDisabled,\n  'button--warning-border': isInputGroup && hasErrors\n  }\"\n>\n  <fa-icon *ngIf=\"iconLeft\"\n           [icon]=\"['fas', iconLeft]\"\n           class=\"icon-left\"\n  ></fa-icon>\n  {{buttonText}}\n  <fa-icon *ngIf=\"iconRight\"\n           [icon]=\"['fas', iconRight]\"\n           class=\"icon-right\"\n  ></fa-icon>\n</button>\n"
        },
        {
            "name": "CookbookContainerComponent",
            "id": "component-CookbookContainerComponent-ef735b9154d80cef79570468b1b66fee",
            "file": "src/app/features/cookbook/containers/cookbook-container/cookbook-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cookbook-container",
            "styleUrls": [
                "./cookbook-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cookbook-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeShoppingList$",
                    "type": "Observable<ShoppingList | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "cookbooks$",
                    "type": "Observable<Cookbook[]>",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "createListDialogTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentLang$",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "editListDialogTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "recipes$",
                    "type": "Observable<Recipe[]>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "recipeViewTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "selectedCookbook$",
                    "type": "Observable<Cookbook | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "translations$",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79
                },
                {
                    "name": "onClickRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183
                },
                {
                    "name": "onCreateRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126
                },
                {
                    "name": "onDeleteList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditRecipe",
                    "args": [
                        {
                            "name": "recipeId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "recipeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputChanged",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectRecipes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Recipe[]>",
                    "typeParameters": [],
                    "line": 176
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subject } from 'rxjs';\nimport { map, switchMap, take, withLatestFrom } from 'rxjs/operators';\nimport { v4 as uuid } from 'uuid';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\n\n\nimport { EditListDialogComponent } from '../../../../shared/components/edit-list-dialog/edit-list-dialog.component';\nimport { mapSelectedIngredientToBasicShoppingListItem } from '../../../../core/helpers/helpers';\nimport {\n  BasicShoppingListItem,\n  Cookbook,\n  CreateListDialogEvent,\n  EditListDialogEvent,\n  I18n,\n  Language,\n  List,\n  Recipe,\n  RecipeViewDialogEvent,\n  SelectedIngredient,\n  ShoppingList\n} from '../../../../core/models/model';\nimport { DialogService } from '../../../../core/services/dialog.service';\nimport { SnackbarService } from '../../../../core/services/snackbar.service';\nimport {\n  activeShoppingList,\n  activeShoppingListId,\n  GlobalState,\n  selectActiveCookbook,\n  selectCookbooks,\n  selectTranslations\n} from '../../../../core/store';\nimport { CookbookApiActions, CookbookContainerActions } from '../../store/actions';\nimport { copyIngredientsToShoppingList, copyRecipeToMealplaner } from '../../store/actions/cookbook-container.actions';\nimport { AddRecipeDialogComponent } from '../../components/add-recipe-dialog/add-recipe-dialog.component';\n\n@Component({\n  selector: 'app-cookbook-container',\n  templateUrl: './cookbook-container.component.html',\n  styleUrls: ['./cookbook-container.component.scss']\n})\nexport class CookbookContainerComponent implements OnInit, OnDestroy {\n\n  translations$: Observable<I18n | null>;\n  currentLang$: Observable<Language>;\n  recipes$: Observable<Recipe[]>;\n  cookbooks$: Observable<Cookbook[]>;\n  selectedCookbook$: Observable<Cookbook | undefined>;\n  activeShoppingList$: Observable<ShoppingList | undefined>;\n  private destroy$: Subject<void> = new Subject<void>();\n\n  private recipeViewTranslations: {} = {};\n  private createListDialogTranslations: {} = {};\n  private editListDialogTranslations: {} = {};\n\n  constructor(\n    private store: Store<GlobalState>,\n    private router: Router,\n    private snackBarService: SnackbarService,\n    private dialogService: DialogService,\n    private translatePipe: TranslatePipe,\n  ) {\n    this.translations$ = this.store.select(selectTranslations);\n    this.currentLang$ = this.store.select((state: GlobalState) => state.appState.language);\n    this.recipes$ = this.selectRecipes();\n    this.cookbooks$ = this.store.select(selectCookbooks);\n    this.selectedCookbook$ = this.store.select((state: GlobalState) => {\n      if (state.cookbookState.activeCookbookId) {\n        return state.cookbookState.cookbooks.find((cookbook: Cookbook) => cookbook.id === state.cookbookState.activeCookbookId);\n      } else {\n        return state.cookbookState.cookbooks[0];\n      }\n    });\n    this.activeShoppingList$ = this.store.select(activeShoppingList);\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(CookbookContainerActions.loadCookbook());\n    this.activeShoppingList$.pipe(take(1)).subscribe((shoppingList: ShoppingList | undefined) => {\n      if (!shoppingList) {\n        this.store.dispatch(CookbookContainerActions.loadShoppingLists());\n      }\n    });\n    this.store.select(selectTranslations).pipe(\n      withLatestFrom(this.store.select((state: GlobalState) => state.appState.language))\n    ).subscribe(([translations, currentLanguage]: [I18n | null, Language]) => {\n      this.recipeViewTranslations = {\n        'ingredients.label-text': this.translatePipe.transform('ingredients.label-text', translations, currentLanguage),\n        'button.add-to-shopping-list': this.translatePipe.transform('button.add-to-shopping-list', translations, currentLanguage),\n        'button.add-to-mealplaner': this.translatePipe.transform('button.add-to-mealplaner', translations, currentLanguage),\n      };\n      this.createListDialogTranslations = {\n        title: this.translatePipe.transform('create-list.title', translations, currentLanguage),\n        'save-button-text': this.translatePipe.transform('create-list.save-button-text', translations, currentLanguage),\n        'cancel-button-text': this.translatePipe.transform('create-list.cancel-button-text', translations, currentLanguage),\n        placeholder: this.translatePipe.transform('create-cookbook.placeholder', translations, currentLanguage),\n      };\n      this.editListDialogTranslations = {\n        title: this.translatePipe.transform('edit-list.title', translations, currentLanguage),\n        'save-button-text': this.translatePipe.transform('edit-list.save-button-text', translations, currentLanguage),\n        'cancel-button-text': this.translatePipe.transform('edit-list.cancel-button-text', translations, currentLanguage),\n        placeholder: this.translatePipe.transform('edit-list.placeholder', translations, currentLanguage),\n      };\n    });\n  }\n\n  onDeleteRecipe(recipe: Recipe): void {\n    const snackBarRef = this.snackBarService.openSnackBar('message.undo', 'message.action');\n    this.store.dispatch(CookbookContainerActions.deleteRecipeFromState({recipeToDelete: recipe}));\n    snackBarRef.afterDismissed().pipe(take(1))\n      .subscribe(({dismissedByAction}) => {\n        if (dismissedByAction) {\n          this.store.dispatch(CookbookApiActions.undoDeleteRecipeFromState({recipe}));\n        } else {\n          this.store.dispatch(CookbookContainerActions.deleteRecipe({recipe}));\n        }\n      });\n  }\n\n  onEditRecipe(recipeId: string): void {\n    this.router.navigate([`cookbook/recipe/${recipeId}`]);\n  }\n\n  onCreateRecipe(): void {\n    this.router.navigate(['cookbook/recipe']);\n  }\n\n  onClickRecipe(recipe: Recipe): void {\n    const dialogRef = this.dialogService.openDialog(AddRecipeDialogComponent, {\n      data: recipe,\n      translations: this.recipeViewTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(\n        take(1),\n        withLatestFrom(this.store.select(activeShoppingListId))\n      )\n      .subscribe(([event, shoppingListId]: [RecipeViewDialogEvent, string | undefined]) => {\n        switch (event?.event) {\n          case 'recipe':\n            this.store.dispatch(copyRecipeToMealplaner({recipe: event.recipe!}));\n            break;\n          case 'selectedIngredients':\n            event.selectedIngredients?.filter((item: SelectedIngredient) => item.isSelected)\n              .map((item: SelectedIngredient) => mapSelectedIngredientToBasicShoppingListItem(item, shoppingListId))\n              .map((item: BasicShoppingListItem) => {\n                return item;\n              })\n              .forEach((item: BasicShoppingListItem) => this.store.dispatch(copyIngredientsToShoppingList({\n                optimisticId: uuid(),\n                shoppingListItem: item\n              })));\n            this.activeShoppingList$.pipe(take(1)).subscribe((shoppingList: ShoppingList | undefined) => {\n              const snackBarRef = this.snackBarService.openSnackBar('message.ingredients-added-to-shoppinglist', shoppingList?.title || '');\n              snackBarRef.afterDismissed().pipe(take(1)).subscribe(({dismissedByAction}) => {\n                if (dismissedByAction) {\n                  this.router.navigate(['/shopping-list'], {queryParams: {shoppingListId: shoppingList?.id}});\n                }\n              });\n            });\n            break;\n        }\n      });\n  }\n\n  onInputChanged(searchTerm: string): void {\n    this.recipes$ = this.selectRecipes().pipe(\n      map((recipes: Recipe[]) => {\n        return recipes.filter((recipe: Recipe) => recipe.title.toLowerCase().includes(searchTerm.toLowerCase()));\n      })\n    );\n  }\n\n  selectRecipes(): Observable<Recipe[]> {\n    return this.store.select(selectActiveCookbook).pipe(\n      switchMap((activeCookbookId: string) => this.store\n        .select((state: GlobalState) => state.cookbookState.recipes[activeCookbookId]))\n    );\n  }\n\n  onCreateList(): void {\n    const dialogRef = this.dialogService.openDialog(EditListDialogComponent, {\n      data: {},\n      translations: this.createListDialogTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: CreateListDialogEvent | undefined) => {\n        if (result?.event === 'create') {\n          this.store.dispatch(CookbookContainerActions.createCookbook({optimisticId: uuid(), title: result.title}));\n        }\n      });\n  }\n\n  onSelectList(list: List): void {\n    this.store.dispatch(CookbookContainerActions.selectCookbook({selectedCookbookId: list.id}));\n  }\n\n  onEditList(list: List): void {\n    const dialogRef = this.dialogService.openDialog(EditListDialogComponent, {\n      data: list,\n      translations: this.editListDialogTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: EditListDialogEvent | undefined) => {\n        if (result?.event === 'edit') {\n          this.store.dispatch(CookbookContainerActions.editCookbook({cookbook: result.list}));\n        }\n      });\n  }\n\n  onDeleteList(list: List): void {\n    const snackBarRef = this.snackBarService.openSnackBar('message.undo', 'message.action');\n    this.store.dispatch(CookbookContainerActions.deleteCookbookFromState({cookbook: list}));\n    snackBarRef.afterDismissed().pipe(take(1))\n      .subscribe(({dismissedByAction}) => {\n        if (dismissedByAction) {\n          this.store.dispatch(CookbookApiActions.undoDeleteCookbookFromState({cookbook: list}));\n        } else {\n          this.store.dispatch(CookbookContainerActions.deleteCookbook({cookbook: list}));\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cookbook-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 56,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-cookbook-page\n  [translations]=\"translations$ | async\"\n  [currentLang]=\"currentLang$ | async\"\n  [recipes]=\"recipes$ | async\"\n  [cookbooks]=\"cookbooks$ | async\"\n  [selectedList]=\"selectedCookbook$ | async\"\n  (deleteRecipe)=\"onDeleteRecipe($event)\"\n  (editRecipe)=\"onEditRecipe($event)\"\n  (clickRecipe)=\"onClickRecipe($event)\"\n  (inputChanged)=\"onInputChanged($event)\"\n  (createRecipe)=\"onCreateRecipe()\"\n  (createList)=\"onCreateList()\"\n  (selectList)=\"onSelectList($event)\"\n  (editList)=\"onEditList($event)\"\n  (deleteList)=\"onDeleteList($event)\"\n></app-cookbook-page>\n"
        },
        {
            "name": "CookbookPageComponent",
            "id": "component-CookbookPageComponent-87713a81c5b9ad507499877d9998723b",
            "file": "src/app/features/cookbook/pages/cookbook-page/cookbook-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cookbook-page",
            "styleUrls": [
                "./cookbook-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cookbook-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cookbooks",
                    "line": 15,
                    "type": "Cookbook[] | undefined | null"
                },
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 13,
                    "type": "Language | null"
                },
                {
                    "name": "recipes",
                    "line": 14,
                    "type": "Recipe[] | undefined | null"
                },
                {
                    "name": "selectedList",
                    "line": 16,
                    "type": "Cookbook | undefined | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 12,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickRecipe",
                    "defaultValue": "new EventEmitter<Recipe>()",
                    "line": 20,
                    "type": "EventEmitter<Recipe>"
                },
                {
                    "name": "createList",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter<undefined>"
                },
                {
                    "name": "createRecipe",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 21,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "deleteList",
                    "defaultValue": "new EventEmitter()",
                    "line": 25,
                    "type": "EventEmitter<List>"
                },
                {
                    "name": "deleteRecipe",
                    "defaultValue": "new EventEmitter<Recipe>()",
                    "line": 19,
                    "type": "EventEmitter<Recipe>"
                },
                {
                    "name": "editList",
                    "defaultValue": "new EventEmitter()",
                    "line": 24,
                    "type": "EventEmitter<List>"
                },
                {
                    "name": "editRecipe",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 18,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "inputChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 17,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "selectList",
                    "defaultValue": "new EventEmitter()",
                    "line": 23,
                    "type": "EventEmitter<List>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "onClickRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "onDeleteList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditRecipe",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputChanged",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { Cookbook, I18n, Language, List, Recipe } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-cookbook-page',\n  templateUrl: './cookbook-page.component.html',\n  styleUrls: ['./cookbook-page.component.scss']\n})\nexport class CookbookPageComponent {\n\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Input() recipes: Recipe[] | undefined | null;\n  @Input() cookbooks: Cookbook[] | undefined | null;\n  @Input() selectedList: Cookbook | undefined | null;\n  @Output() inputChanged: EventEmitter<string> = new EventEmitter<string>();\n  @Output() editRecipe: EventEmitter<string> = new EventEmitter<string>();\n  @Output() deleteRecipe: EventEmitter<Recipe> = new EventEmitter<Recipe>();\n  @Output() clickRecipe: EventEmitter<Recipe> = new EventEmitter<Recipe>();\n  @Output() createRecipe: EventEmitter<void> = new EventEmitter<void>();\n  @Output() createList: EventEmitter<undefined> = new EventEmitter();\n  @Output() selectList: EventEmitter<List> = new EventEmitter();\n  @Output() editList: EventEmitter<List> = new EventEmitter();\n  @Output() deleteList: EventEmitter<List> = new EventEmitter();\n\n  onEditRecipe(id: string | undefined): void {\n    if (id) {\n      this.editRecipe.emit(id);\n    }\n  }\n\n  onDeleteRecipe(recipe: Recipe): void {\n    this.deleteRecipe.emit(recipe);\n  }\n\n  onClickRecipe(recipe: Recipe): void {\n    this.clickRecipe.emit(recipe);\n  }\n\n  onInputChanged(searchTerm: string): void {\n    this.inputChanged.emit(searchTerm);\n  }\n\n  click(): void {\n    this.createRecipe.emit();\n  }\n\n  onCreateList(): void {\n    this.createList.emit();\n  }\n\n  onSelectList(list: List): void {\n    this.selectList.emit(list);\n  }\n\n  onEditList(list: List): void {\n    this.editList.emit(list);\n  }\n\n  onDeleteList(list: List): void {\n    this.deleteList.emit(list);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".create-recipe-button{\n  display: block;\n  padding-top: 1.5rem;\n}\n",
                    "styleUrl": "./cookbook-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"container\">\n  <app-list-header\n    [selectedList]=\"selectedList\"\n    [lists]=\"cookbooks\"\n    [defaultTitle]=\"'shopping-list.default-title' | translate:translations:currentLang\"\n    [addListLabel]=\"'shopping-list.new-list' | translate:translations:currentLang\"\n    [buttonLabel]=\"'shopping-list.my-lists' | translate:translations:currentLang\"\n    (createList)=\"onCreateList()\"\n    (selectList)=\"onSelectList($event)\"\n    (editList)=\"onEditList($event)\"\n    (deleteList)=\"onDeleteList($event)\"\n  >\n  </app-list-header>\n  <app-recipe-list\n    [translations]=\"translations\"\n    [currentLang]=\"currentLang\"\n    [recipes]=\"recipes\"\n    (deleteRecipe)=\"onDeleteRecipe($event)\"\n    (editRecipe)=\"onEditRecipe($event)\"\n    (clickRecipe)=\"onClickRecipe($event)\"\n    (inputChanged)=\"onInputChanged($event)\"\n  ></app-recipe-list>\n  <app-button\n    class=\"create-recipe-button\"\n    [buttonText]=\"'button.submit' | translate: translations : currentLang\"\n    (click)=\"click()\"\n  >\n  </app-button>\n</div>\n"
        },
        {
            "name": "EditListDialogComponent",
            "id": "component-EditListDialogComponent-38612700b41c19ded58eb9308853e86b",
            "file": "src/app/shared/components/edit-list-dialog/edit-list-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-list-dialog",
            "styleUrls": [
                "./edit-list-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-list-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogData",
                    "type": "DialogData<List>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<EditListDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditing",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "listForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "createList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { DialogData, List } from '../../../core/models/model';\n\n@Component({\n  selector: 'app-edit-list-dialog',\n  templateUrl: './edit-list-dialog.component.html',\n  styleUrls: ['./edit-list-dialog.component.scss']\n})\nexport class EditListDialogComponent {\n  public isEditing = false;\n  public listForm: FormGroup;\n\n  constructor(\n    public dialogRef: MatDialogRef<EditListDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public dialogData: DialogData<List>,\n  ) {\n    if (dialogData.data.id) {\n      this.isEditing = true;\n    }\n\n    this.listForm = new FormGroup({\n      title: new FormControl(this.isEditing ? dialogData.data.title : '', [Validators.required])\n    });\n  }\n\n  createList(): void {\n    this.isEditing ?\n      this.dialogRef.close({\n        event: 'edit',\n        list: {...this.dialogData.data, ...this.listForm.value}\n      }) : this.dialogRef.close({event: 'create', title: this.listForm.value.title});\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.listForm?.controls[key] as FormControl;\n  }\n\n  close(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n\n\n.creat-list-dialog{\n  max-height: 300px;\n  width: 400px;\n  margin: 0;\n  padding: 0;\n  max-width: 100%;\n\n  &__actions {\n    *:nth-child(2) {\n      margin-left: 10px;\n    }\n  }\n}\n",
                    "styleUrl": "./edit-list-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditListDialogComponent>"
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<List>"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditListDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<List>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form [formGroup]=\"listForm\" (ngSubmit)=\"createList()\">\n<h2 mat-dialog-title>{{dialogData.translations['title']}}</h2>\n<mat-dialog-content class=\"mat-typography creat-list-dialog\">\n  <app-input  [placeholder]=\"dialogData.translations['placeholder']\" [name]=\"'title'\"  [formControl]=\"getFormControl('title')\"></app-input>\n</mat-dialog-content>\n<mat-dialog-actions align=\"end\" class=\"creat-list-dialog__actions\">\n  <app-button [buttonText]=\"dialogData.translations['save-button-text']\" [isDisabled]=\"listForm.invalid\" [buttonType]=\"'submit'\"></app-button>\n  <app-button [buttonText]=\"dialogData.translations['cancel-button-text']\" color=\"accent\" (click)=\"close()\"></app-button>\n</mat-dialog-actions>\n</form>\n"
        },
        {
            "name": "ForgotPasswordContainerComponent",
            "id": "component-ForgotPasswordContainerComponent-4b2bbc94c82b37fc339bd283eb7a5caa",
            "file": "src/app/features/auth/containers/forgot-password-container/forgot-password-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password-container",
            "styleUrls": [
                "./forgot-password-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.pipe(select(state => state.appState.language))",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "emailQueryParam",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "emailSent",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "requestPasswordResetEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { I18n, Language } from '../../../../core/models/model';\nimport { GlobalState, selectTranslations } from '../../../../core/store';\nimport { select, Store } from '@ngrx/store';\nimport { Actions } from '@ngrx/effects';\nimport { ForgotPasswordContainerActions } from '../../store/actions';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-forgot-password-container',\n  templateUrl: './forgot-password-container.component.html',\n  styleUrls: ['./forgot-password-container.component.scss']\n})\nexport class ForgotPasswordContainerComponent implements OnInit {\n\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.pipe(select(state => state.appState.language));\n  emailSent = false;\n  emailQueryParam: string | undefined;\n\n\n  constructor(private store: Store<GlobalState>, private actions$: Actions, private activatedRout: ActivatedRoute) {\n    this.emailQueryParam = this.activatedRout.snapshot.queryParams?.email;\n  }\n\n  ngOnInit(): void {\n  }\n\n  requestPasswordResetEmail(email: string): void {\n    this.store.dispatch(ForgotPasswordContainerActions.requestEmail({email}));\n    this.emailSent = true;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./forgot-password-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "activatedRout",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRout",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-forgot-password-page\n  [translations]=\"translations$ | async\"\n  [currentLang]=\"currentLanguage$ | async\"\n  [emailPrefillValue]=\"emailQueryParam\"\n  [emailSent]=\"emailSent\"\n  (submitResetRequestForm)=\"requestPasswordResetEmail($event)\"\n>\n</app-forgot-password-page>\n"
        },
        {
            "name": "ForgotPasswordPageComponent",
            "id": "component-ForgotPasswordPageComponent-b3bd6d7f742463ff674bfaaa688c5f5c",
            "file": "src/app/features/auth/pages/forgot-password-page/forgot-password-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password-page",
            "styleUrls": [
                "./forgot-password-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 17,
                    "type": "Language | null"
                },
                {
                    "name": "emailPrefillValue",
                    "line": 19,
                    "type": "string | undefined"
                },
                {
                    "name": "emailSent",
                    "defaultValue": "false",
                    "line": 18
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 16,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "submitResetRequestForm",
                    "defaultValue": "new EventEmitter()",
                    "line": 20,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "requestPasswordResetCodeForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { I18n, Language } from '../../../../core/models/model';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport * as CustomValidators from '../../../../core/validators/custom-validators.validator';\nimport { translateValidationErrors } from '../../../../core/helpers/helpers';\n\n@Component({\n  selector: 'app-forgot-password-page',\n  templateUrl: './forgot-password-page.component.html',\n  styleUrls: ['./forgot-password-page.component.scss']\n})\nexport class ForgotPasswordPageComponent implements OnInit {\n\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Input() emailSent = false;\n  @Input() emailPrefillValue: string | undefined;\n  @Output() submitResetRequestForm: EventEmitter<string> = new EventEmitter();\n\n  requestPasswordResetCodeForm: FormGroup;\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.requestPasswordResetCodeForm = new FormGroup({\n      email: new FormControl('', [\n        Validators.required,\n        CustomValidators.email,\n      ])\n    });\n  }\n\n  ngOnInit(): void {\n    if (this.emailPrefillValue) {\n      this.requestPasswordResetCodeForm.setValue({email: this.emailPrefillValue});\n    }\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.requestPasswordResetCodeForm?.controls[key] as FormControl;\n  }\n\n  onSubmit(): void {\n    if (this.requestPasswordResetCodeForm.valid) {\n      this.submitResetRequestForm.emit(this.requestPasswordResetCodeForm?.value.email);\n      return;\n    }\n\n    this.requestPasswordResetCodeForm.markAllAsTouched();\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLang)\n      .filter((error, index) => index === 0);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/mixins/forms\";\n\n\n.forgot-password-form {\n  @include authform;\n\n  &__confirmation {\n    width: 80%;\n    margin: 0 auto;\n    font-size: 1em;\n    color: $blue_grey_60;\n  }\n}\n",
                    "styleUrl": "./forgot-password-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-auth-form\n  [heading]=\"'auth.forgot-password.title' | translate:translations:currentLang\"\n  [buttonText]=\"'auth.forgot-password.cta' | translate:translations:currentLang\"\n  [authForm]=\"requestPasswordResetCodeForm\"\n  [showButton]=\"!emailSent\"\n  (formSubmit)=\"onSubmit()\"\n>\n  <ng-template #formTemplate let-form=\"form\">\n    <div *ngIf=\"!emailSent; else submitMessage\" [formGroup]=\"form\">\n      <div class=\"forgot-password-form__helper\" id=\"reset-disclaimer\">\n        {{'auth.forgot-password.disclaimer' | translate:translations:currentLang}}\n      </div>\n      <div class=\"forgot-password-form__field\">\n        <fa-icon class=\"forgot-password-form__icon\"\n                 [icon]=\"['fas','user']\"></fa-icon>\n        <app-input\n          class=\"forgot-password-form__input\"\n          type=\"email\"\n          [noBorder]=\"true\"\n          [name]=\"'email'\"\n          [placeholder]=\"'auth.register.email' | translate:translations:currentLang\"\n          [ariaLabel]=\"'auth.register.email' | translate:translations:currentLang\"\n          [ariaDescribedBy]=\"'reset-disclaimer'\"\n          [formControl]=\"getFormControl('email')\"\n          [errors]=\"getErrorsFor('email')\"></app-input>\n      </div>\n    </div>\n\n    <ng-template #submitMessage>\n      <div class=\"forgot-password-form__confirmation\">\n        {{'auth.forgot-password.sent' | translate:translations:currentLang}}\n      </div>\n    </ng-template>\n  </ng-template>\n\n\n\n</app-auth-form>\n\n\n\n\n\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-31556922f1d9bc5cf2eb1b87b38ae65a",
            "file": "src/app/shared/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaDescribedBy",
                    "defaultValue": "''",
                    "line": 24
                },
                {
                    "name": "ariaLabel",
                    "defaultValue": "''",
                    "line": 23
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'on'",
                    "line": 33
                },
                {
                    "name": "buttonTestName",
                    "defaultValue": "''",
                    "line": 20
                },
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "line": 18
                },
                {
                    "name": "buttonType",
                    "defaultValue": "'button'",
                    "line": 19
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "line": 21
                },
                {
                    "name": "e2eTestName",
                    "defaultValue": "''",
                    "line": 35
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "line": 31,
                    "type": "string[]"
                },
                {
                    "name": "iconLeft",
                    "line": 25,
                    "type": "string | undefined"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 32
                },
                {
                    "name": "label",
                    "line": 30,
                    "type": "string | undefined"
                },
                {
                    "name": "minValue",
                    "defaultValue": "null",
                    "line": 26,
                    "type": "number | null"
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "line": 29
                },
                {
                    "name": "noBorder",
                    "defaultValue": "false",
                    "line": 22
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 34
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "line": 28
                }
            ],
            "outputsClass": [
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "line": 36,
                    "type": "EventEmitter<MouseEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentValue",
                    "defaultValue": "''",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "inputId",
                    "defaultValue": "uuid()",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "markAsTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "option",
                            "type": "string | number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "string | number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { v4 as uuid } from 'uuid';\n\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true\n    }\n  ]})\nexport class InputComponent implements ControlValueAccessor {\n\n  @Input() buttonText = '';\n  @Input() buttonType = 'button';\n  @Input() buttonTestName = '';\n  @Input() color = 'primary';\n  @Input() noBorder = false;\n  @Input() ariaLabel = '';\n  @Input() ariaDescribedBy = '';\n  @Input() iconLeft: string | undefined;\n  @Input() minValue: number | null = null;\n\n  @Input() type = 'text';\n  @Input() name = '';\n  @Input() label: string | undefined;\n  @Input() errors: string[] = [];\n  @Input() isDisabled = false;\n  @Input() autocomplete = 'on';\n  @Input() placeholder = '';\n  @Input() e2eTestName = '';\n  @Output() clicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  inputId: string = uuid();\n\n  currentValue: string | number = '';\n\n  onChange(option: string | number): void {\n    this.propagateChange(option);\n  }\n\n  onBlur(): void {\n    this.markAsTouched();\n  }\n\n  onClicked(event: MouseEvent): void {\n    this.clicked.emit(event);\n  }\n\n  propagateChange = (value: string | number) => {};\n  markAsTouched = () => {};\n\n  registerOnChange(fn: () => {}): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.markAsTouched = fn;\n  }\n\n  writeValue(value: string | number): void {\n    if (value !== undefined) {\n      this.currentValue = value;\n    }\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/mixins/forms\";\n\n\n.input-group {\n  display: flex;\n  justify-content: center;\n\n  .input {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n\n    .field-wrapper {\n      display: flex;\n      flex-direction: row;\n      justify-content: flex-start;\n    }\n\n    &__label {\n      @include label;\n    }\n\n    &__field {\n      @include form-field;\n      background-color: transparent;\n\n      &--border-accent {\n        border: 2px solid $cyan_70;\n      }\n\n      &--short {\n        border-right: none;\n        border-radius: 4px 0 0 4px;\n      }\n    }\n\n    &__button {\n      flex: 0 0 20%;\n      border-radius: 0 4px 4px 0;\n    }\n\n    &__error {\n      @include form-errors;\n    }\n  }\n}\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"input-group\">\n  <div class=\"input\">\n    <label class=\"input__label\" *ngIf=\"label\" [for]=\"inputId\">{{label}}</label>\n    <div class=\"field-wrapper\">\n      <input class=\"input__field\"\n             [type]=\"type\"\n             [id]=\"inputId\"\n             [(ngModel)]=\"currentValue\"\n             (ngModelChange)=\"onChange($event)\"\n             [class.input__field--no-border]=\"noBorder\"\n             (blur)=\"onBlur()\"\n             [attr.name]=\"name\"\n             [autocomplete]=\"autocomplete\"\n             [placeholder]=\"placeholder\"\n             [attr.data-test]=\"e2eTestName\"\n             [attr.min]=\"minValue\"\n             [attr.aria-label]=\"ariaLabel\"\n             [attr.aria-describedby]=\"ariaDescribedBy\"\n      >\n      <app-button class=\"input__button\"\n                  *ngIf=\"!!buttonText\"\n                  [buttonText]=\"buttonText\"\n                  [buttonType]=\"buttonType\"\n                  [attr.data-test]=\"buttonTestName\"\n                  [isDisabled]=\"isDisabled\"\n                  [isInputGroup]=\"true\"\n                  [color]=\"color\"\n                  [hasErrors]=\"errors && errors.length > 0\"\n                  (clicked)=\"onClicked($event)\"\n      ></app-button>\n    </div>\n    <div>\n      <div class=\"input__error\" *ngFor=\"let error of errors\">{{error}}</div>\n    </div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "ListHeaderComponent",
            "id": "component-ListHeaderComponent-3b9038776828de637a896351a95b7b77",
            "file": "src/app/shared/components/list-header/list-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-header",
            "styleUrls": [
                "./list-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addListLabel",
                    "defaultValue": "''",
                    "line": 17
                },
                {
                    "name": "buttonLabel",
                    "defaultValue": "''",
                    "line": 18
                },
                {
                    "name": "defaultTitle",
                    "defaultValue": "''",
                    "line": 16
                },
                {
                    "name": "lists",
                    "defaultValue": "undefined",
                    "line": 15,
                    "type": "List[] | null | undefined"
                },
                {
                    "name": "selectedList",
                    "defaultValue": "undefined",
                    "line": 14,
                    "type": "List | null | undefined"
                }
            ],
            "outputsClass": [
                {
                    "name": "createList",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<undefined>"
                },
                {
                    "name": "deleteList",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter<List>"
                },
                {
                    "name": "editList",
                    "defaultValue": "new EventEmitter()",
                    "line": 21,
                    "type": "EventEmitter<List>"
                },
                {
                    "name": "selectList",
                    "defaultValue": "new EventEmitter()",
                    "line": 20,
                    "type": "EventEmitter<List>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "openList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { List, ListPickerDialogEvent } from '../../../core/models/model';\nimport { DialogService } from '../../../core/services/dialog.service';\nimport { ListPickerDialogComponent } from '../list-picker-dialog/list-picker-dialog.component';\n\n@Component({\n  selector: 'app-list-header',\n  templateUrl: './list-header.component.html',\n  styleUrls: ['./list-header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ListHeaderComponent implements OnInit {\n  @Input() selectedList: List | null | undefined = undefined;\n  @Input() lists: List[] | null | undefined = undefined;\n  @Input() defaultTitle = '';\n  @Input() addListLabel = '';\n  @Input() buttonLabel = '';\n  @Output() createList: EventEmitter<undefined> = new EventEmitter();\n  @Output() selectList: EventEmitter<List> = new EventEmitter();\n  @Output() editList: EventEmitter<List> = new EventEmitter();\n  @Output() deleteList: EventEmitter<List> = new EventEmitter();\n\n  constructor(private dialogService: DialogService) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  openList(): void {\n    const dialogRef = this.dialogService.openDialog(ListPickerDialogComponent, {\n      data: this.lists,\n      translations: {\n        'new-list': this.addListLabel,\n        'default-title': this.defaultTitle,\n      }\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: ListPickerDialogEvent | undefined) => {\n        switch (result?.event) {\n          case 'create':\n            this.createList.emit();\n            break;\n          case 'select':\n            this.selectList.emit(result?.list);\n            break;\n          case 'edit':\n            this.editList.emit(result?.list);\n            break;\n          case 'delete':\n            this.deleteList.emit(result?.list);\n            break;\n        }\n      });\n\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/settings/variables\";\n@import \"../../../../styles/mixins/style\";\n\n\n\n.shopping-list-header {\n  padding-bottom: 24px;\n  padding-left: 10px;\n  color: $blue-grey_80;\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n\n\n  &__title {\n    font-weight: 400;\n    font-size: 1.5em;\n  }\n\n  @include skeleton('.shopping-list-header__title-wrapper', $blue-grey_30, 3.5s) {\n    background: $blue-grey_40;\n    width: 60%;\n    height: 24px;\n    align-self: center;\n    border-radius: $border-radius-default;\n  };\n\n  @include skeleton('.shopping-list-header__button', $cyan_70, 3.5s) {\n    background: $cyan_80;\n    width: 80px;\n    height: 30px;\n    cursor: wait;\n    border-radius: $border-radius-default;\n  };\n\n\n  &__button {\n    border: none;\n    color: #ffffff;\n    padding: 4px 16px;\n    border-radius: $border-radius-default;\n    background-color: $cyan_80;\n    cursor: pointer;\n  }\n}\n\n\n",
                    "styleUrl": "./list-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"shopping-list-header\">\n  <div class=\"shopping-list-header__title-wrapper\">\n    <h2 *ngIf=\"selectedList\" class=\"shopping-list-header__title\">\n      {{selectedList?.title || defaultTitle}}\n    </h2>\n  </div>\n\n\n  <button (click)=\"openList()\" class=\"shopping-list-header__button\">\n    <span *ngIf=\"buttonLabel && lists?.length\">{{buttonLabel}}</span>\n  </button>\n</div>\n"
        },
        {
            "name": "ListPickerDialogComponent",
            "id": "component-ListPickerDialogComponent-e37fb4ffec6dddbe23d10db7a7dff6af",
            "file": "src/app/shared/components/list-picker-dialog/list-picker-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-picker-dialog",
            "styleUrls": [
                "./list-picker-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-picker-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogData",
                    "type": "DialogData<List[]>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<ListPickerDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "deleteList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { DialogData, List } from '../../../core/models/model';\n\n@Component({\n  selector: 'app-list-picker-dialog',\n  templateUrl: './list-picker-dialog.component.html',\n  styleUrls: ['./list-picker-dialog.component.scss']\n})\nexport class ListPickerDialogComponent {\n\n  constructor(\n    public dialogRef: MatDialogRef<ListPickerDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public dialogData: DialogData<List[]>,\n  ) {\n  }\n\n  createList(): void {\n    this.dialogRef.close({event: 'create'});\n  }\n\n  selectList(list: List): void {\n    this.dialogRef.close({event: 'select', list});\n  }\n\n  editList(list: List): void {\n    this.dialogRef.close({event: 'edit', list});\n  }\n\n  deleteList(list: List): void {\n    this.dialogRef.close({event: 'delete', list});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n\n\n.list-picker {\n  max-height: 300px;\n  width: 400px;\n  margin: 0;\n  max-width: 100%;\n\n  &__item {\n    border-bottom: 1px dashed $blue-grey_100;\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    color: $text-100;\n\n    &:hover:not(:first-child) {\n      background: $blue-grey_10;\n    }\n\n    &:first-child {\n      padding-top: 0;\n    }\n\n    &:last-child {\n      border-bottom: none;\n    }\n  }\n\n  &__item-title {\n    padding: 15px 5px;\n    flex-grow: 1;\n  }\n\n  &__item--add {\n    font-weight: 500;\n    color: $cyan_80;\n    font-size: 1.1em;\n    background: none;\n  }\n\n  &__actions {\n    flex-shrink: 0;\n    padding: 15px 5px 15px 0;\n  }\n\n  &__icon {\n    padding-right: 5px;\n  }\n\n  &__action:nth-child(2) {\n    padding-left: 10px\n  }\n}\n",
                    "styleUrl": "./list-picker-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ListPickerDialogComponent>"
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<List[]>"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ListPickerDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<List[]>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-dialog-content class=\"mat-typography list-picker\">\n  <div class=\"list-picker__item list-picker__item--add\"  (click)=\"createList()\">\n    <section class=\"list-picker__item-title\">\n      <fa-icon\n        class=\"list-picker__icon\"\n        [icon]=\"['fas','plus']\"\n      ></fa-icon>\n      {{dialogData.translations['new-list']}}\n    </section>\n  </div>\n  <div *ngFor=\"let list of dialogData.data\"\n       class=\"list-picker__item\">\n    <section class=\"list-picker__item-title\" (click)=\"selectList(list)\">\n      {{list.title || dialogData.translations['default-title']}}\n    </section>\n    <section class=\"list-picker__actions\">\n      <fa-icon\n        class=\"list-picker__action\"\n        (click)=\"editList(list)\"\n        [icon]=\"['fas','edit']\"\n      ></fa-icon>\n      <fa-icon\n        class=\"list-picker__action\"\n        *ngIf=\"dialogData.data.length > 1\"\n        (click)=\"deleteList(list)\"\n        [icon]=\"['fas','trash-alt']\"\n      ></fa-icon>\n    </section>\n  </div>\n</mat-dialog-content>\n\n"
        },
        {
            "name": "LoginContainerComponent",
            "id": "component-LoginContainerComponent-2d8a27e02e9545cd5dd508304b994004",
            "file": "src/app/features/auth/containers/login-container/login-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-container",
            "styleUrls": [
                "./login-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backendError",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.pipe(select(state => state.appState.language))",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "LoginCredentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "LoginCredentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { I18n, Language, LoginCredentials } from '../../../../core/models/model';\nimport { select, Store } from '@ngrx/store';\nimport { GlobalState, selectTranslations } from '../../../../core/store';\nimport { AuthApiActions, LoginPageActions } from '../../store/actions';\nimport { Observable } from 'rxjs';\nimport { Actions, ofType } from '@ngrx/effects';\n\n@Component({\n  selector: 'app-login-container',\n  templateUrl: './login-container.component.html',\n  styleUrls: ['./login-container.component.scss']\n})\nexport class LoginContainerComponent implements OnInit {\n\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.pipe(select(state => state.appState.language));\n  backendError: string | undefined;\n\n\n  constructor(private store: Store<GlobalState>, private actions$: Actions) {\n    this.actions$.pipe(ofType(AuthApiActions.loginFailure)).subscribe(({error}: {error: string}) => {\n      this.backendError = error;\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  login(credentials: LoginCredentials): void {\n    this.store.dispatch(LoginPageActions.login({credentials}));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-login-page\n  [translations]=\"translations$ | async\"\n  [currentLang]=\"currentLanguage$ | async\"\n  [backendErrorMessage]=\"backendError\"\n  (credentialsReceived)=\"login($event)\"\n></app-login-page>\n"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-e4ae2f2b19d3cea81ebd0548c71c6a0a",
            "file": "src/app/features/auth/pages/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-page",
            "styleUrls": [
                "./login-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backendErrorMessage",
                    "line": 18,
                    "type": "string | undefined"
                },
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 17,
                    "type": "Language | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 16,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "credentialsReceived",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<LoginCredentials>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { I18n, Language, LoginCredentials } from '../../../../core/models/model';\nimport * as CustomValidators from '../../../../core/validators/custom-validators.validator';\nimport { translateValidationErrors } from '../../../../core/helpers/helpers';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss']\n})\nexport class LoginPageComponent {\n\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Input() backendErrorMessage: string | undefined;\n  @Output() credentialsReceived: EventEmitter<LoginCredentials> = new EventEmitter();\n\n  loginForm: FormGroup;\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.loginForm = new FormGroup({\n      identifier: new FormControl('', [\n        Validators.required,\n        CustomValidators.email,\n      ]),\n      password: new FormControl('', [\n        Validators.required,\n      ])\n    });\n  }\n\n  get email(): string {\n    return this.loginForm.value.identifier;\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.loginForm?.controls[key] as FormControl;\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.valid) {\n      this.credentialsReceived.emit(this.loginForm?.value);\n      return;\n    }\n\n    this.loginForm.markAllAsTouched();\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLang)\n      .filter((error, index) => index === 0);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/mixins/forms\";\n\n\n.login-form {\n    @include authform;\n}\n",
                    "styleUrl": "./login-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "string",
                        "returnType": "string",
                        "line": 35
                    }
                }
            },
            "templateData": "<app-auth-form\n  [heading]=\"'auth.login.title' | translate:translations:currentLang\"\n  [buttonText]=\"'auth.login.cta' | translate:translations:currentLang\"\n  [authForm]=\"loginForm\"\n  [backedErrorMessage]=\"backendErrorMessage && (backendErrorMessage | translate:translations:currentLang)\"\n  (formSubmit)=\"onSubmit()\"\n>\n  <ng-template #formTemplate let-form=\"form\">\n    <div [formGroup]=\"form\">\n      <div class=\"login-form__field\">\n        <fa-icon class=\"login-form__icon\"\n                 [icon]=\"['fas','user']\"></fa-icon>\n        <app-input\n          class=\"login-form__input\"\n          type=\"email\"\n          [noBorder]=\"true\"\n          [name]=\"'email'\"\n          [placeholder]=\"'auth.login.email' | translate:translations:currentLang\"\n          [ariaLabel]=\"'auth.login.email' | translate:translations:currentLang\"\n          [formControl]=\"getFormControl('identifier')\"\n          [errors]=\"getErrorsFor('identifier')\"></app-input>\n      </div>\n\n      <div class=\"login-form__field\">\n        <fa-icon class=\"login-form__icon\"\n                 [icon]=\"['fas','unlock-alt']\"></fa-icon>\n        <app-input\n          class=\"login-form__input\"\n          type=\"password\"\n          [noBorder]=\"true\"\n          [name]=\"'password'\"\n          [placeholder]=\"'auth.login.password' | translate:translations:currentLang\"\n          [ariaLabel]=\"'auth.login.password' | translate:translations:currentLang\"\n          [formControl]=\"getFormControl('password')\"\n          [errors]=\"getErrorsFor('password')\"></app-input>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #formFooter>\n    <div class=\"login-form__hint\">\n      <a [routerLink]=\"['/auth/forgot']\" [queryParams]=\"email ? {email: email} : {}\"> {{ 'auth.login.forgot-password' | translate:translations:currentLang}}</a>\n    </div>\n    <div class=\"login-form__hint\" [innerHTML]=\"'auth.login.not-registered' | translate:translations:currentLang \" >\n    </div>\n  </ng-template>\n</app-auth-form>\n\n\n\n\n\n"
        },
        {
            "name": "MealplanerContainerComponent",
            "id": "component-MealplanerContainerComponent-259d23fa59c464ba980a80f3ba9e3f90",
            "file": "src/app/features/meal-planer/containers/mealplaner-container/mealplaner-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mealplaner-container",
            "styleUrls": [
                "./mealplaner-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mealplaner-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-mealplaner-container',\n  templateUrl: './mealplaner-container.component.html',\n  styleUrls: ['./mealplaner-container.component.scss']\n})\nexport class MealplanerContainerComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mealplaner-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>mealplaner-container works!</p>\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-e2d4ecf398c913f8269e2e31081e3170",
            "file": "src/app/core/components/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [
                "./navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "null",
                    "line": 13,
                    "type": "Language | null"
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "null",
                    "line": 14,
                    "type": "boolean | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "null",
                    "line": 12,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "languageChanged",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter<Language>"
                },
                {
                    "name": "logout",
                    "defaultValue": "new EventEmitter()",
                    "line": 15,
                    "type": "EventEmitter<null>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "languageForm",
                    "defaultValue": "new FormGroup({\n    selectedLanguage: new FormControl(DEFAULT_LANGUAGE, [Validators.required])\n  })",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "supportedLanguages",
                    "defaultValue": "SUPPORTED_LANGUAGES.values.map((language: Language) => {\n    return {value: language, key: language.toLocaleUpperCase()};\n  })",
                    "type": "SelectOption<Language>[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "language",
                            "type": "Language"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "Language",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { DEFAULT_LANGUAGE, SUPPORTED_LANGUAGES } from '../../constants/constants';\nimport { I18n, Language, SelectOption } from '../../models/model';\n\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.scss']\n})\nexport class NavigationComponent implements OnInit {\n  @Input() translations: I18n | null = null;\n  @Input() currentLang: Language | null = null;\n  @Input() isLoggedIn: boolean | null = null;\n  @Output() logout: EventEmitter<null> = new EventEmitter();\n  @Output() languageChanged: EventEmitter<Language> = new EventEmitter();\n\n  supportedLanguages: SelectOption<Language>[] = SUPPORTED_LANGUAGES.values.map((language: Language) => {\n    return {value: language, key: language.toLocaleUpperCase()};\n  });\n\n  languageForm: FormGroup = new FormGroup({\n    selectedLanguage: new FormControl(DEFAULT_LANGUAGE, [Validators.required])\n  });\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  getSelectedLanguage(): FormControl {\n    return this.languageForm?.controls.selectedLanguage as FormControl;\n  }\n\n  onLogout(): void {\n    this.logout.emit();\n  }\n\n  changeLanguage(language: Language): void {\n    this.languageChanged.emit(language);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/settings/breakpoints\";\n\n.main-navigation {\n  z-index: 5;\n  background: $blue_100;\n  width: 100%;\n  height: 3.5rem;\n  position: fixed;\n  top: 0;\n  display: flex;\n  align-items: center;\n\n  &__logo {\n    height: 2rem;\n    width: auto;\n    padding-right: 2rem;\n  }\n\n  &__content {\n    display: flex;\n    height: 100%;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  &__actions {\n    height: 2rem;\n    display: flex;\n  }\n\n  &__wrapper {\n    display: flex;\n    height: 100%;\n    align-items: center;\n  }\n\n  &__secondary-action {\n    color: white;\n    padding-right: 1.5rem;\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n  }\n\n  &__primary-action {\n    background: white;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 4px;\n    color: $blue_100;\n    text-decoration: none;\n    width: 7rem;\n  }\n}\n\n\n.mobile-navigation {\n  position: fixed;\n  background: #FFFFFF;\n  bottom: 0;\n  height: 4.5rem;\n  width: 100%;\n  box-shadow: 0px -4px 6px 0px rgba(224, 224, 224, 1);\n  border-bottom: 0.3rem solid $blue-grey_20;\n\n  @include large {\n    display: none;\n  }\n\n  &__link-list {\n    list-style: none;\n    display: flex;\n    margin-top: 0.4rem;\n  }\n\n  &__link-list-element {\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n    text-decoration: none;\n    text-align: center;\n  }\n\n  &__link-icon {\n    color: $blue_80;\n    font-size: 1.8rem;\n  }\n\n  &__link-text {\n    color: $blue_80;\n    font-size: 0.8rem;\n    margin-top: -0.3rem;\n    display: block;\n    margin-bottom: 0.3rem;\n  }\n\n\n  &__link {\n    text-decoration: none;\n  }\n\n  &__link--active {\n    text-decoration: none;\n\n    .mobile-navigation__status {\n      width: 5.5rem;\n      margin: 0 auto;\n      background-color: $blue_80;\n      height: 0.3rem;\n      position: relative;\n      bottom: 0;\n    }\n  }\n}\n\n.desktop-navigation {\n  display: none;\n  color: white;\n  list-style: none;\n  height: 100%;\n\n  @include large {\n    display: flex;\n  }\n\n  &__link-list {\n    color: white;\n    list-style: none;\n    display: flex;\n    height: 100%;\n  }\n\n  &__link {\n    color: #FFFFFF;\n    text-decoration: none;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    border-bottom: 4px solid transparent;\n  }\n\n  &__link--active {\n    border-bottom: 4px solid $blue-grey_10;\n  }\n\n  &__link-list-element {\n    padding-left: 1rem;\n    padding-right: 1rem;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    color: white;\n  }\n}\n\n\n",
                    "styleUrl": "./navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav class=\"main-navigation\">\n  <div class=\"container main-navigation__content\">\n    <div class=\"main-navigation__wrapper\">\n      <img class=\"main-navigation__logo\" src=\"../../../../assets/logo-inverted.png\" [routerLink]=\"['/']\" alt=\"Mealplaner Logo\">\n      <div class=\"desktop-navigation\" *ngIf=\"isLoggedIn\">\n        <ul class=\"desktop-navigation__link-list\" data-test=\"desktop-navigation\">\n          <li class=\"desktop-navigation__link-list-element\">\n            <a [routerLink]=\"['/meal-planer']\"\n               class=\"desktop-navigation__link\"\n               routerLinkActive=\"desktop-navigation__link--active\">\n              {{'app.navigation.planer' | translate:translations:currentLang}}\n            </a>\n          </li>\n          <li class=\"desktop-navigation__link-list-element\">\n            <a [routerLink]=\"['/cookbook']\"\n               class=\"desktop-navigation__link\"\n               routerLinkActive=\"desktop-navigation__link--active\">\n              {{'app.navigation.menus' | translate:translations:currentLang}}\n            </a>\n          </li>\n          <li class=\"desktop-navigation__link-list-element\">\n            <a [routerLink]=\"['/shopping-list']\"\n               class=\"desktop-navigation__link\"\n               routerLinkActive=\"desktop-navigation__link--active\">\n              {{'app.navigation.shopping-list' | translate:translations:currentLang}}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <div class=\"main-navigation__actions\">\n\n      <app-select\n        class=\"main-navigation__secondary-action\"\n        [control]=\"getSelectedLanguage()\"\n        [noBorder]=\"true\"\n        [name]=\"'language'\"\n        [options]=\"supportedLanguages\"\n        (valueChanged)=\"changeLanguage($event)\"\n        [noBackground]=\"true\"\n        [noPadding]=\"true\"\n      >\n      </app-select>\n\n      <app-button *ngIf=\"isLoggedIn; else registerTemplate\"\n                  [buttonText]=\"'app.navigation.logout' | translate:translations:currentLang\"\n                  color=\"inverted\" (click)=\"onLogout()\"\n                  class=\"main-navigation__primary-action\"\n                  data-test=\"logout-button\"></app-button>\n\n\n      <ng-template #registerTemplate>\n        <a class=\"main-navigation__secondary-action\"\n           [routerLink]=\"['/auth/login']\"\n           data-test=\"login-link\">\n          {{'app.navigation.login' | translate:translations:currentLang}}\n        </a>\n\n        <a          [routerLink]=\"['/auth/register']\"\n                    class=\"main-navigation__primary-action\"\n                    data-test=\"register-link\">\n          {{'app.navigation.register' | translate:translations:currentLang }}\n        </a>\n      </ng-template>\n    </div>\n  </div>\n</nav>\n\n\n<nav *ngIf=\"isLoggedIn\" class=\"mobile-navigation\">\n  <ul class=mobile-navigation__link-list data-test=\"mobile-navigation\">\n    <li class=\"mobile-navigation__link-list-element\">\n      <a class=\"mobile-navigation__link\" [routerLink]=\"['/meal-planer']\"\n         routerLinkActive=\"mobile-navigation__link--active\">\n        <fa-icon class=\"shopping-list__ellipsis mobile-navigation__link-icon\"\n                 [icon]=\"['fas','calendar-alt']\"></fa-icon>\n        <span\n          class=\"mobile-navigation__link-text\">{{'app.navigation.planer' | translate:translations:currentLang}}</span>\n        <div\n          class=\"mobile-navigation__status\"></div>\n      </a>\n    </li>\n\n    <li class=\"mobile-navigation__link-list-element\">\n      <a class=\"mobile-navigation__link\" [routerLink]=\"['/cookbook']\"\n         routerLinkActive=\"mobile-navigation__link--active\">\n        <fa-icon class=\"shopping-list__ellipsis mobile-navigation__link-icon\"\n                 [icon]=\"['fas','hamburger']\"></fa-icon>\n        <span\n          class=\"mobile-navigation__link-text\">{{'app.navigation.menus' | translate:translations:currentLang}}</span>\n        <div class=\"mobile-navigation__status\"></div>\n      </a>\n    </li>\n\n    <li class=\"mobile-navigation__link-list-element\">\n      <a class=\"mobile-navigation__link\" [routerLink]=\"['/shopping-list']\"\n         routerLinkActive=\"mobile-navigation__link--active\">\n        <fa-icon class=\"shopping-list__ellipsis mobile-navigation__link-icon\"\n                 [icon]=\"['fas','shopping-cart']\"></fa-icon>\n        <span\n          class=\"mobile-navigation__link-text\">{{'app.navigation.shopping-list' | translate:translations:currentLang}}</span>\n        <div class=\"mobile-navigation__status\"></div>\n      </a>\n    </li>\n  </ul>\n</nav>\n"
        },
        {
            "name": "ProductPageComponent",
            "id": "component-ProductPageComponent-2b73fd2732ca5372c4885d35ace874eb",
            "file": "src/app/features/product-info/pages/product-page/product-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-page",
            "styleUrls": [
                "./product-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLanguage",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 12,
                    "type": "Language | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 11,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elements",
                    "defaultValue": "[]",
                    "type": "HTMLElement[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "plateRotationDegree",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "windowHeight",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "animateAppearingElements",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "animatePlate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 34
                },
                {
                    "name": "window:scroll",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 28
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostListener, Input, OnInit } from '@angular/core';\nimport { I18n, Language } from '../../../../core/models/model';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\n\n@Component({\n  selector: 'app-product-page',\n  templateUrl: './product-page.component.html',\n  styleUrls: ['./product-page.component.scss'],\n})\nexport class ProductPageComponent implements OnInit {\n  @Input() translations: I18n | null = {};\n  @Input() currentLanguage: Language | null = DEFAULT_LANGUAGE;\n\n  windowHeight = 0;\n  plateRotationDegree = 0;\n  elements: HTMLElement[] = [];\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.windowHeight = window.innerHeight;\n    this.elements = Array.from(document.querySelectorAll('.product-page__feature-explanation-image-wrapper--hidden'));\n    setTimeout(() => this.animateAppearingElements(), 300);\n  }\n\n  @HostListener('window:scroll', ['$event'])\n  onScroll(): void {\n    this.animatePlate();\n    this.animateAppearingElements();\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResize(): void {\n    this.animateAppearingElements();\n  }\n\n  animatePlate(): void {\n    this.plateRotationDegree = window.pageYOffset / 8;\n  }\n\n  animateAppearingElements(): void {\n    this.elements\n      .filter((element) => {\n        return element.getBoundingClientRect().top - this.windowHeight <= 0;\n      }).forEach(element => {\n        element.classList.remove('product-page__feature-explanation-image-wrapper--hidden');\n        element.classList.add('product-page__feature-explanation-image-wrapper--visible');\n      });\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/breakpoints\";\n\n\n.product-page {\n  &__header {\n    text-align: center;\n    background: $blue-grey_10;\n    margin-top: -6em;\n    padding-top: 10em;\n    padding-bottom: 1em;\n  }\n\n  &__heading {\n    color: $blue-grey_80;\n    font-size: 2.7em;\n  }\n\n  &__lead-text {\n    color: $blue-grey_60;\n    max-width: 550px;\n    margin: 30px auto;\n    font-size: 1.2em;\n    line-height: 1.8;\n  }\n\n  &__cta {\n    width: 300px;\n    margin: 40px auto;\n  }\n\n  &__img {\n    max-width: 80%;\n    margin: 0 auto;\n    border-radius: 5px;\n    display: block;\n  }\n\n  &__image-wrapper {\n    background: $blue-grey_100;\n    padding: 2em 0;\n  }\n\n  &__feature-explanation {\n    display: flex;\n    flex-direction: column;\n    padding-top: 80px;\n\n    @include medium {\n      flex-direction: row;\n    }\n  }\n\n  &__feature-explanation-title {\n    color: $blue-100;\n    padding-bottom: 0.8em;\n  }\n\n  &__feature-explanation:nth-child(even) {\n    @include medium {\n      flex-direction: row-reverse;\n    }\n  }\n\n  &__feature-explanation-text {\n    flex: 1 1 0;\n    align-self: center;\n    line-height: 1.8em;\n    color: $blue-grey_80;\n  }\n\n  &__feature-explanation-image-wrapper {\n    flex: 1 1 0;\n    align-self: center;\n\n    img {\n      max-width: 100%;\n    }\n\n    &--hidden {\n      visibility: hidden;\n    }\n\n    &--visible {\n      animation: fade-in 1.6s;\n    }\n  }\n}\n\n\n@keyframes fade-in {\n  from {\n    opacity: 0;\n    transform: scale(.8, .8)\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n",
                    "styleUrl": "./product-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"product-page__header\">\n  <div class=\"container\">\n    <h1 class=\"product-page__heading\">{{'product-page.heading' | translate:translations:currentLanguage }}</h1>\n    <section class=\"product-page__lead-text\" [innerHTML]=\"'product-page.lead-text' | translate:translations:currentLanguage\"></section>\n    <section class=\"product-page__cta\">\n      <app-button [buttonText]=\"'product-page.cta' | translate:translations:currentLanguage\" [routerLink]=\"'auth/register'\"></app-button>\n    </section>\n  </div>\n</div>\n\n<div class=\"product-page__image-wrapper\">\n  <div class=\"container\">\n    <img class=\"product-page__img\" src=\"/assets/plate.png\" [ngStyle]=\"{'transform': 'rotate(' + plateRotationDegree + 'deg)'}\" alt=\"TODO\"/>\n  </div>\n</div>\n\n<div class=\"container\">\n  <section class=\"product-page__feature-explanation\">\n    <div class=\"product-page__feature-explanation-text\">\n      <h2 class=\"product-page__feature-explanation-title\">{{'product-page.meal-title' | translate:translations:currentLanguage }}</h2>\n      <p>\n        {{'product-page.meal-description' | translate:translations:currentLanguage }}\n      </p>\n    </div>\n    <div class=\"product-page__feature-explanation-image-wrapper product-page__feature-explanation-image-wrapper--hidden\" >\n      <img src=\"/assets/meal.png\" alt=\"TODO\"/>\n    </div>\n  </section>\n\n  <section class=\"product-page__feature-explanation\">\n    <div class=\"product-page__feature-explanation-text\">\n      <h2 class=\"product-page__feature-explanation-title\">{{'product-page.planer-title' | translate:translations:currentLanguage }}</h2>\n      <p>\n        {{'product-page.planer-description' | translate:translations:currentLanguage }}\n      </p>\n    </div>\n    <div class=\"product-page__feature-explanation-image-wrapper product-page__feature-explanation-image-wrapper--hidden\">\n      <img src=\"/assets/calender.png\" alt=\"TODO\"/>\n    </div>\n  </section>\n\n  <section class=\"product-page__feature-explanation\">\n    <div class=\"product-page__feature-explanation-text\">\n      <h2 class=\"product-page__feature-explanation-title\">{{'product-page.list-title' | translate:translations:currentLanguage }}</h2>\n      <p>\n        {{'product-page.list-description' | translate:translations:currentLanguage }}\n      </p>\n    </div>\n    <div class=\"product-page__feature-explanation-image-wrapper product-page__feature-explanation-image-wrapper--hidden\">\n      <img src=\"/assets/list.png\" alt=\"TODO\"/>\n    </div>\n  </section>\n\n  <section class=\"product-page__cta\">\n    <app-button class=\"product-page__cta\" [buttonText]=\"'product-page.cta' | translate:translations:currentLanguage\" [routerLink]=\"'auth/register'\"></app-button>\n  </section>\n</div>\n\n\n"
        },
        {
            "name": "ProductPageContainerComponent",
            "id": "component-ProductPageContainerComponent-faf771cd5c87b9cf8ffdf5e038bf2742",
            "file": "src/app/features/product-info/containers/product-page-container/product-page-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-page-container",
            "styleUrls": [
                "./product-page-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-page-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.select(selectCurrentLanguage)",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { GlobalState, selectCurrentLanguage, selectTranslations } from '../../../../core/store';\nimport { Observable } from 'rxjs';\nimport { I18n, Language } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-product-page-container',\n  templateUrl: './product-page-container.component.html',\n  styleUrls: ['./product-page-container.component.scss']\n})\nexport class ProductPageContainerComponent implements OnInit {\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.select(selectCurrentLanguage);\n\n  constructor(\n    private store: Store<GlobalState>,\n  ) {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product-page-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-product-page\n  [translations]=\"translations$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n></app-product-page>\n"
        },
        {
            "name": "RecipeContainerComponent",
            "id": "component-RecipeContainerComponent-182aa78bf644c2ab92463b5a3d838d27",
            "file": "src/app/features/cookbook/containers/recipe-container/recipe-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-container",
            "styleUrls": [
                "./recipe-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLang$",
                    "type": "Observable<Language | null>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "recipe$",
                    "type": "Observable<Recipe | undefined> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "translations$",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "onRecipeSaved",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { v4 as uuid } from 'uuid';\nimport { I18n, Language, Recipe } from '../../../../core/models/model';\nimport { GlobalState, selectActiveCookbook, selectTranslations } from '../../../../core/store';\nimport { CookbookContainerActions } from '../../store/actions';\n\n@Component({\n  selector: 'app-recipe-container',\n  templateUrl: './recipe-container.component.html',\n  styleUrls: ['./recipe-container.component.scss']\n})\nexport class RecipeContainerComponent implements OnInit {\n\n  translations$: Observable<I18n | null>;\n  currentLang$: Observable<Language | null>;\n  id: string | null = '';\n  recipe$: Observable<Recipe | undefined> | undefined;\n\n  constructor(\n    private store: Store<GlobalState>,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.translations$ = this.store.select(selectTranslations);\n    this.currentLang$ = this.store.select((state: GlobalState) => state.appState.language);\n  }\n\n  ngOnInit(): void {\n    this.id = this.route.snapshot.paramMap.get('id');\n    if (this.id) {\n      this.recipe$ = this.store.select(selectActiveCookbook).pipe(\n        switchMap((activeCookbookId: string) => this.store\n          .select((state: GlobalState) => state.cookbookState.recipes[activeCookbookId])\n        ),\n        map((recipes: Recipe[]) => {\n          return recipes.find((recipe: Recipe) => recipe.id === this.id);\n        })\n      );\n    }\n  }\n\n  onRecipeSaved(recipe: Recipe): void {\n    !!this.id ?\n      this.store.dispatch(CookbookContainerActions.editRecipe({recipeToEdit: recipe})) :\n      this.store.select(selectActiveCookbook).pipe(\n        take(1)\n      ).subscribe((activeCookbookId: string) => this.store.dispatch(CookbookContainerActions.createRecipe({\n          optimisticId: uuid(),\n          recipeToSave: {\n            ...recipe,\n            cookbookId: activeCookbookId\n          }\n        }))\n      );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./recipe-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-recipe-form\n  [translations]=\"translations$ | async\"\n  [currentLang]=\" currentLang$ | async\"\n  [recipe]=\"recipe$ | async\"\n  (recipeSaved)=\"onRecipeSaved($event)\"\n>\n</app-recipe-form>\n"
        },
        {
            "name": "RecipeListComponent",
            "id": "component-RecipeListComponent-22e85922a2394a3552d6cd5444690481",
            "file": "src/app/features/cookbook/components/recipe-list/recipe-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-list",
            "styleUrls": [
                "./recipe-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 15,
                    "type": "Language | null"
                },
                {
                    "name": "recipes",
                    "line": 16,
                    "type": "Recipe[] | undefined | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 14,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickRecipe",
                    "defaultValue": "new EventEmitter<Recipe>()",
                    "line": 20,
                    "type": "EventEmitter<Recipe>"
                },
                {
                    "name": "deleteRecipe",
                    "defaultValue": "new EventEmitter<Recipe>()",
                    "line": 19,
                    "type": "EventEmitter<Recipe>"
                },
                {
                    "name": "editRecipe",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 18,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "inputChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 17,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "searchField",
                    "type": "ElementRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchField', {static: true, read: ElementRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getPageState",
                    "args": [
                        {
                            "name": "items",
                            "type": "Recipe[] | null | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Recipe[] | null | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditRecipe",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { fromEvent, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, takeUntil } from 'rxjs/operators';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { I18n, Language, Recipe } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-recipe-list',\n  templateUrl: './recipe-list.component.html',\n  styleUrls: ['./recipe-list.component.scss']\n})\nexport class RecipeListComponent implements OnInit, OnDestroy {\n\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Input() recipes: Recipe[] | undefined | null;\n  @Output() inputChanged: EventEmitter<string> = new EventEmitter<string>();\n  @Output() editRecipe: EventEmitter<string> = new EventEmitter<string>();\n  @Output() deleteRecipe: EventEmitter<Recipe> = new EventEmitter<Recipe>();\n  @Output() clickRecipe: EventEmitter<Recipe> = new EventEmitter<Recipe>();\n\n  @ViewChild('searchField', {static: true, read: ElementRef}) searchField: ElementRef | undefined;\n\n  destroy$: Subject<void> = new Subject();\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    fromEvent<InputEvent>(this.searchField?.nativeElement, 'input').pipe(\n      takeUntil(this.destroy$),\n      debounceTime(500),\n      distinctUntilChanged(),\n      map((event: InputEvent) => (event?.target as HTMLInputElement).value)\n    ).subscribe((value: string) => this.inputChanged.emit(value));\n  }\n\n  onEditRecipe(id: string | undefined): void {\n    if (id) {\n      this.editRecipe.emit(id);\n    }\n  }\n\n  onDeleteRecipe(recipe: Recipe): void {\n      this.deleteRecipe.emit(recipe);\n  }\n\n  onClick(recipe: Recipe): void {\n    this.clickRecipe.emit(recipe);\n  }\n\n  getPageState(items: Recipe[] | null | undefined): string {\n    if (items === null || items === undefined) {\n      return 'loading';\n    }\n\n    if (items.length === 0) {\n      return 'empty';\n    }\n\n    return 'default';\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/settings/breakpoints\";\n@import \"../../../../../styles/mixins/style\";\n\n.recipe-list {\n  width: 100%;\n  display: block;\n  overflow: hidden;\n\n  .search-field{\n    display: block;\n    padding-bottom: 1.5rem;\n  }\n\n  .recipe {\n    border: $border-primary;\n    color: $text-70;\n    font-size: 1rem;\n    box-sizing: border-box;\n    margin-top: 0.5rem;\n\n    @include large {\n      border: none;\n      border-bottom: solid 1px $blue_70;\n      margin: 0;\n\n      &:last-child {\n        border-bottom: none;\n      }\n    }\n\n    .recipe__row {\n      display: flex;\n      justify-content: space-between;\n      flex-direction: column;\n\n      @include large{\n        flex-direction: row;\n        align-items: stretch;\n      }\n    }\n\n    &__title-box {\n      display: flex;\n      flex: 1 1 70%;\n      align-items: center;\n      padding: 0.5rem 0.5rem;\n\n      &:hover {\n        background-color: $blue_20;\n        cursor: pointer;\n      }\n\n      &:active {\n        background-color: $blue_30;\n      }\n\n      @include large{\n        padding: 0 0.5rem;\n      }\n    }\n\n    &__buttons-box {\n      display: flex;\n\n      @include large{\n        border-left: 1px solid;\n        border-image: linear-gradient(\n            to bottom,\n            white,\n            $blue_70,\n            white\n        ) 1 100%;\n      }\n    }\n\n    &__button {\n      width: 100%;\n      padding: 0.5rem 0.5rem;\n    }\n  }\n\n  @include skeleton('.recipe-skeleton', $blue-grey_30, 3.5s) {\n    background: $blue-grey_40;\n    height: 24px;\n    margin: 12px auto 18px 18px;\n    border-radius: $border-radius-default;\n    width: 90%;\n\n    &:nth-child(2){\n      width: 75%;\n    }\n\n    &:nth-child(3){\n      width: 85%;\n    }\n\n    &:nth-child(4){\n      width: 80%;\n      margin-bottom: 24px;\n    }\n  };\n\n  .empty-recipe-list {\n    margin: 0 auto;\n    max-width: 80%;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    padding-bottom: 24px;\n    color: $text-40;\n    font-size: 0.8em;\n    text-align: center;\n    font-weight: 500;\n    line-height: 2;\n\n    @include large {\n      font-size: 1.2em;\n    }\n\n    &__image {\n      max-width: 100%;\n    }\n  }\n\n}\n",
                    "styleUrl": "./recipe-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<section class=\"recipe-list\" [ngSwitch]=\"getPageState(recipes)\">\n  <app-input\n    class=\"search-field\"\n    [type]=\"'search'\"\n    [placeholder]=\"'input.search' | translate:translations:currentLang\"\n    #searchField\n  ></app-input>\n  <div *ngSwitchCase=\"'default'\">\n    <div class=\"recipe\" *ngFor=\"let recipe of recipes\">\n      <div class=\"recipe__row\">\n        <div class=\"recipe__title-box\" (click)=\"onClick(recipe)\">\n          <span>{{recipe.title}}</span>\n        </div>\n        <div class=\"recipe__buttons-box\">\n          <app-button class=\"recipe__button\"\n                      [buttonText]=\"'button.edit' | translate:translations:currentLang\"\n                      [iconLeft]=\"'pen-square'\"\n                      [color]=\"'accent'\"\n                      (click)=\"onEditRecipe(recipe.id)\"\n                      [e2eTestName]=\"'RECIPE-ROW-EDIT'\"\n          ></app-button>\n          <app-button class=\"recipe__button\"\n                      [buttonText]=\"'button.delete' | translate:translations:currentLang\"\n                      [iconLeft]=\"'times'\"\n                      [color]=\"'warn'\"\n                      (click)=\"onDeleteRecipe(recipe)\"\n                      [e2eTestName]=\"'RECIPE-ROW-DELETE'\"\n          ></app-button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngSwitchCase=\"'empty'\" class=\"empty-recipe-list\">\n    <img class=\"empty-shopping-list__image\" src=\"../../../../../assets/empty-shopping-list.png\" alt=\"Empty List\"/>\n    <div>{{'shopping-list.is-empty' | translate:translations:currentLang }}\n      <br/> {{'shopping-list.add-product' | translate:translations:currentLang }} </div>\n  </div>\n\n  <div *ngSwitchCase=\"'loading'\">\n    <div class=\"recipe-skeleton\"></div>\n    <div class=\"recipe-skeleton\"></div>\n    <div class=\"recipe-skeleton\"></div>\n    <div class=\"recipe-skeleton\"></div>\n  </div>\n</section>\n"
        },
        {
            "name": "RecipePageComponent",
            "id": "component-RecipePageComponent-6cbc8f63e30224fd50fa0d775463f553",
            "file": "src/app/features/cookbook/pages/recipe-page/recipe-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-form",
            "styleUrls": [
                "./recipe-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 17,
                    "type": "Language | null"
                },
                {
                    "name": "recipe",
                    "line": 18,
                    "type": "Recipe | null | undefined"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 16,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "recipeSaved",
                    "defaultValue": "new EventEmitter<Recipe>()",
                    "line": 19,
                    "type": "EventEmitter<Recipe>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "ingredients",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "recipeForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "units",
                    "defaultValue": "[]",
                    "type": "SelectOption<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "addEmptyIngredientRow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124
                },
                {
                    "name": "createNewIngredientFormGroup",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "optional": true
                        },
                        {
                            "name": "unit",
                            "type": "Unit",
                            "optional": true
                        },
                        {
                            "name": "isStapleFood",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "unit",
                            "type": "Unit",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isStapleFood",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUnits",
                    "args": [],
                    "optional": false,
                    "returnType": "SelectOption[]",
                    "typeParameters": [],
                    "line": 140
                },
                {
                    "name": "deleteIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "getButtonText",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 117
                },
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 132,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIngredientFormControl",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98
                },
                {
                    "name": "overwriteFirstIngredient",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "RecipeIngredient"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "RecipeIngredient",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { LocationStrategy } from '@angular/common';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { translateValidationErrors } from '../../../../core/helpers/helpers';\nimport { I18n, Language, Recipe, RecipeIngredient, SelectOption, Unit } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-recipe-form',\n  templateUrl: './recipe-page.component.html',\n  styleUrls: ['./recipe-page.component.scss']\n})\nexport class RecipePageComponent implements OnInit {\n\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Input() recipe: Recipe | null | undefined;\n  @Output() recipeSaved: EventEmitter<Recipe> = new EventEmitter<Recipe>();\n\n  recipeForm: FormGroup;\n  ingredients: FormArray;\n  units: SelectOption<string>[] = [];\n\n  constructor(\n    private translatePipe: TranslatePipe,\n    private location: LocationStrategy,\n  ) {\n    this.recipeForm = new FormGroup({\n      id: new FormControl(''),\n      cookbookId: new FormControl(''),\n      title: new FormControl('', [Validators.required]),\n      url: new FormControl(''),\n      ingredients: new FormArray([\n        this.createNewIngredientFormGroup()\n      ])\n    });\n    this.ingredients = this.recipeForm?.controls.ingredients as FormArray;\n  }\n\n  ngOnInit(): void {\n    this.units = this.createUnits();\n    this.fillForm();\n  }\n\n  fillForm(): void {\n    if (!!this.recipe) {\n      Object.keys(this.recipe).forEach((key: string) => {\n        if (key === 'ingredients') {\n          this.recipe?.ingredients.forEach((ingredient: RecipeIngredient, index: number) => {\n            if (index === 0) {\n              this.overwriteFirstIngredient(ingredient);\n            } else {\n              (this.recipeForm.controls.ingredients as FormArray)\n                .push(this.createNewIngredientFormGroup(\n                  ingredient.id,\n                  ingredient.title,\n                  ingredient.amount,\n                  ingredient.unit,\n                  ingredient.isStapleFood)\n                );\n            }\n          });\n        } else {\n          // @ts-ignore\n          this.getFormControl(key).setValue(this.recipe[key]);\n        }\n      });\n    }\n  }\n\n  overwriteFirstIngredient(ingredient: RecipeIngredient): void {\n    Object.keys(ingredient).forEach((key: string) => {\n      ((this.recipeForm.controls.ingredients as FormArray).at(0) as FormGroup).controls[key]\n        // @ts-ignore\n        .setValue(ingredient[key]);\n    });\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.recipeForm?.controls[key] as FormControl;\n  }\n\n  getIngredientFormControl(ingredient: AbstractControl, key: string): FormControl {\n    return (ingredient as FormGroup).controls[key] as FormControl;\n  }\n\n  createNewIngredientFormGroup(id?: string, title?: string, amount?: number, unit?: Unit, isStapleFood?: boolean): FormGroup {\n    return new FormGroup({\n      id: new FormControl(id || ''),\n      title: new FormControl(title || '', [Validators.required]),\n      amount: new FormControl(amount || null, [Validators.required, Validators.min(1)]),\n      unit: new FormControl(unit || 'kg', [Validators.required]),\n      isStapleFood: new FormControl(isStapleFood || false, [Validators.required])\n    });\n  }\n\n  onSubmit(): void {\n    if (!this.recipeForm.touched) {\n      this.location.back();\n      return;\n    }\n    const recipeToSave: Recipe = this.recipeForm?.value;\n    if (!recipeToSave.id) {\n      delete recipeToSave.id;\n      recipeToSave.title = recipeToSave.title.substring(0, 1).toUpperCase() + recipeToSave.title.substring(1);\n    }\n    recipeToSave.ingredients.map((ingredient: RecipeIngredient) => {\n      if (!ingredient.id) {\n        delete ingredient.id;\n      }\n      ingredient.amount = +ingredient.amount;\n    });\n    this.recipeSaved.emit(recipeToSave);\n  }\n\n  getButtonText(): string {\n    if (!this.recipeForm.touched) {\n      return 'button.back';\n    }\n    return this.recipe ? 'button.modify' : 'button.submit';\n  }\n\n  addEmptyIngredientRow(): void {\n    this.ingredients.push(this.createNewIngredientFormGroup());\n  }\n\n  deleteIngredient(index: number): void {\n    (this.recipeForm?.controls.ingredients as FormArray).removeAt(index);\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLang);\n  }\n\n  createUnits(): SelectOption<string>[] {\n    return [\n      {\n        value: 'tableSpoon',\n        key: this.translatePipe.transform('forms.units.tablespoon', this.translations, this.currentLang)\n      },\n      {\n        value: 'coffeeSpoon',\n        key: this.translatePipe.transform('forms.units.coffee-spoon', this.translations, this.currentLang)\n      },\n      {\n        value: 'pinch',\n        key: this.translatePipe.transform('forms.units.pinch', this.translations, this.currentLang)\n      },\n      {\n        value: 'pack',\n        key: this.translatePipe.transform('forms.units.pack', this.translations, this.currentLang)\n      },\n      {\n        value: 'piece',\n        key: this.translatePipe.transform('forms.units.piece', this.translations, this.currentLang)\n      },\n      {value: 'kg', key: 'kg'},\n      {value: 'g', key: 'g'},\n      {value: 'l', key: 'l'},\n      {value: 'dl', key: 'dl'},\n      {value: 'ml', key: 'ml'},\n    ];\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/breakpoints\";\n@import \"../../../../../styles/mixins/forms\";\n@import \"../../../../../styles/settings/variables\";\n\n.recipe-form {\n\n  &__input {\n    display: block;\n    margin-bottom: 1rem;\n  }\n\n  &__button {\n    display: block;\n    margin-top: 2rem;\n  }\n\n  .ingredients-label{\n    @include label;\n  }\n\n}\n\n.ingredients {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  overflow: hidden;\n  border: $border-primary;\n  border-radius: $border-radius-default;\n\n  &__button{\n    margin: 0 2rem 1rem 2rem;\n  }\n\n  &__row {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    //mixin\n    border-bottom: 1px solid $blue_70;\n    padding: 1rem 2rem;\n\n    @include large {\n      flex-direction: row;\n    }\n\n    &--last {\n      border-bottom: none;\n    }\n\n    &--input-amount {\n      @include large {\n        max-width: 8rem;\n      }\n    }\n\n    &--input {\n      padding-bottom: 1rem;\n      flex: 1 1 auto;\n\n      @include large {\n        padding-bottom: 0;\n        padding-right: 1rem;\n\n        &:last-child {\n          padding-right: 0;\n        }\n      }\n    }\n\n    &--input-unit {\n      @include large {\n        max-width: 8.5rem;\n      }\n    }\n\n    &--input-toggle {\n      margin-bottom: 1rem;\n      color: $blue_70;\n      @include large {\n        max-width: 10rem;\n        margin: auto 0;\n      }\n    }\n\n  }\n\n  .icon-wrapper {\n    background-color: $red_70;\n    border-radius: $border-radius-default;\n    @include button();\n\n    &--disabled {\n      background-color: $blue-grey_50;\n      cursor: not-allowed;\n    }\n\n    @include large {\n      background: none;\n      border: none;\n      width: fit-content;\n      height: unset;\n    }\n\n    .delete-icon {\n      color: $red_70;\n      cursor: pointer;\n      margin: auto;\n      font-size: 1.5rem;\n      visibility: hidden;\n\n      @include large() {\n        visibility: visible;\n      }\n\n      &--disabled {\n        color: $blue-grey_10;\n        cursor: not-allowed;\n\n        @include large {\n          color: $blue-grey_50;\n        }\n      }\n    }\n\n    .delete-text {\n      color: $blue-grey_10;\n\n      @include large() {\n        display: none;\n      }\n    }\n  }\n\n}\n\n\n",
                    "styleUrl": "./recipe-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    },
                    {
                        "name": "location",
                        "type": "LocationStrategy"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "LocationStrategy",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <form class=\"recipe-form\" [formGroup]=\"recipeForm\" (ngSubmit)=\"onSubmit()\">\n    <app-input\n      class=\"recipe-form__input recipe-form--input-title\"\n      [name]=\"'title'\"\n      [placeholder]=\"'recipe-form.placeholder.title' | translate:translations:currentLang\"\n      [label]=\"'recipe-form.label.title' | translate:translations:currentLang\"\n      [errors]=\"getErrorsFor('title')\"\n      [formControl]=\"getFormControl('title')\"></app-input>\n    <app-input\n      class=\"recipe-form__input recipe-form--input-url\"\n      [name]=\"'url'\"\n      [placeholder]=\"'recipe-form.placeholder.url' | translate:translations:currentLang\"\n      [label]=\"'recipe-form.label.url' | translate:translations:currentLang\"\n      [formControl]=\"getFormControl('url')\"></app-input>\n\n    <label class=\"ingredients-label\">{{'ingredients.label-text' | translate:translations:currentLang}}</label>\n    <div class=\"ingredients recipe-form__input\">\n      <div *ngFor=\"let ingredient of ingredients.controls; let last = last; let index = index\"\n           class=\"ingredients__row\"\n           [ngClass]=\"{'ingredients__row--last': last}\">\n        <app-input\n          class=\"ingredients__row--input ingredients__row--input-amount\"\n          [type]=\"'number'\"\n          [minValue]=\"0\"\n          [name]=\"'amount'\"\n          [placeholder]=\"'recipe-form.placeholder.amount' | translate:translations:currentLang\"\n          [formControl]=\"getIngredientFormControl(ingredient, 'amount')\">\n        </app-input>\n        <app-select\n          class=\"ingredients__row--input ingredients__row--input-unit\"\n          [options]=\"units\"\n          [name]=\"'unit'\"\n          [formControl]=\"getIngredientFormControl(ingredient, 'unit')\">\n        </app-select>\n        <app-input\n          class=\"ingredients__row--input\"\n          [name]=\"'title'\"\n          [placeholder]=\"'recipe-form.placeholder.title' | translate:translations:currentLang\"\n          [formControl]=\"getIngredientFormControl(ingredient, 'title')\">\n        </app-input>\n        <mat-slide-toggle\n          class=\"ingredients__row--input ingredients__row--input-toggle\"\n          [color]=\"'primary'\"\n          [formControl]=\"getIngredientFormControl(ingredient, 'isStapleFood')\">\n          {{'recipe-form.text.toggle' | translate:translations:currentLang}}\n        </mat-slide-toggle>\n        <button\n          class=\"icon-wrapper\"\n          (click)=\"deleteIngredient(index)\"\n          [disabled]=\"ingredients?.length === 1\"\n          [ngClass]=\"{'icon-wrapper--disabled': ingredients?.length === 1}\">\n          <fa-icon\n            class=\"delete-icon\"\n            [ngClass]=\"{'delete-icon--disabled': ingredients?.length === 1}\"\n            [icon]=\"['fas', 'times']\">\n          </fa-icon>\n          <span class=\"delete-text\">{{'recipe-form.button.delete' | translate:translations:currentLang}}</span>\n        </button>\n      </div>\n      <app-button\n        class=\"ingredients__button\"\n        [buttonText]=\"'recipe-form.button.new-ingredient' | translate:translations:currentLang\"\n        [isDisabled]=\"ingredients.invalid\"\n        [color]=\"'accent'\"\n        (clicked)=\"addEmptyIngredientRow()\">\n      </app-button>\n    </div>\n\n    <app-button\n      class=\"recipe-form__button\"\n      [buttonType]=\"'submit'\"\n      [buttonText]=\"getButtonText() | translate:translations:currentLang\"\n      [isDisabled]=\"recipeForm.invalid\"></app-button>\n  </form>\n</div>\n\n\n\n"
        },
        {
            "name": "RegisterContainerComponent",
            "id": "component-RegisterContainerComponent-580449ac65dd3579b60902d8408f2ca2",
            "file": "src/app/features/auth/containers/register-container/register-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-container",
            "styleUrls": [
                "./register-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backendError",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.pipe(select(state => state.appState.language))",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "RegisterCredentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "RegisterCredentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { I18n, Language, RegisterCredentials } from '../../../../core/models/model';\nimport { GlobalState, selectTranslations } from '../../../../core/store';\nimport { select, Store } from '@ngrx/store';\nimport { AuthApiActions, RegisterContainerActions } from '../../store/actions';\nimport { Actions, ofType } from '@ngrx/effects';\n\n@Component({\n  selector: 'app-register-container',\n  templateUrl: './register-container.component.html',\n  styleUrls: ['./register-container.component.scss']\n})\nexport class RegisterContainerComponent implements OnInit {\n\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.pipe(select(state => state.appState.language));\n  backendError: string | undefined;\n\n  constructor(private store: Store<GlobalState>, private actions$: Actions) {\n    this.actions$.pipe(ofType(AuthApiActions.registerFailure)).subscribe(({error}: { error: string }) => {\n      this.backendError = error;\n    });\n  }\n\n  ngOnInit(): void {\n  }\n\n  register(credentials: RegisterCredentials): void {\n    this.store.dispatch(RegisterContainerActions.register({credentials}));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./register-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-register-page\n  [translations]=\"translations$ | async\"\n  [currentLang]=\"currentLanguage$ | async\"\n  [backendErrorMessage]=\"backendError\"\n  (credentialsReceived)=\"register($event)\"\n></app-register-page>\n"
        },
        {
            "name": "RegisterPageComponent",
            "id": "component-RegisterPageComponent-a64342df066c576bec756f178acc3763",
            "file": "src/app/features/auth/pages/regsiter-page/register-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-page",
            "styleUrls": [
                "./register-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backendErrorMessage",
                    "line": 18,
                    "type": "string | undefined"
                },
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "line": 16
                },
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 19,
                    "type": "Language | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 17,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "credentialsReceived",
                    "defaultValue": "new EventEmitter()",
                    "line": 20,
                    "type": "EventEmitter<RegisterCredentials>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { I18n, Language, RegisterCredentials } from '../../../../core/models/model';\nimport * as CustomValidators from '../../../../core/validators/custom-validators.validator';\nimport { translateValidationErrors } from '../../../../core/helpers/helpers';\n\n@Component({\n  selector: 'app-register-page',\n  templateUrl: './register-page.component.html',\n  styleUrls: ['./register-page.component.scss']\n})\nexport class RegisterPageComponent {\n\n  @Input() buttonText = '';\n  @Input() translations: I18n | null = {};\n  @Input() backendErrorMessage: string | undefined;\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Output() credentialsReceived: EventEmitter<RegisterCredentials> = new EventEmitter();\n\n  loginForm: FormGroup;\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.loginForm = new FormGroup({\n      name: new FormControl('', [\n        Validators.required,\n      ]),\n      email: new FormControl('', [\n        Validators.required,\n        CustomValidators.email,\n      ]),\n      password: new FormControl('', [\n        Validators.required,\n        Validators.minLength(4),\n      ]),\n\n      invitationCode: new FormControl('', [\n        Validators.required,\n      ])\n    });\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.loginForm?.controls[key] as FormControl;\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.valid) {\n      this.credentialsReceived.emit(this.loginForm?.value);\n      return;\n    }\n\n    this.loginForm.markAllAsTouched();\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLang)\n      .filter((error, index) => index === 0);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/mixins/forms\";\n\n\n.register-form {\n  @include authform;\n}\n",
                    "styleUrl": "./register-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-auth-form\n  [heading]=\"'auth.register.title' | translate:translations:currentLang\"\n  [buttonText]=\"'auth.register.cta' | translate:translations:currentLang\"\n  [backedErrorMessage]=\"backendErrorMessage && (backendErrorMessage | translate:translations:currentLang)\"\n  [authForm]=\"loginForm\"\n  (formSubmit)=\"onSubmit()\"\n>\n  <ng-template #formTemplate let-form=\"form\">\n    <div [formGroup]=\"form\">\n      <div class=\"register-form__field\">\n        <fa-icon class=\"register-form__icon\"\n                 [icon]=\"['fas','user']\"></fa-icon>\n        <app-input\n          class=\"register-form__input\"\n          type=\"text\"\n          [noBorder]=\"true\"\n          [name]=\"'name'\"\n          [placeholder]=\"'auth.register.name' | translate:translations:currentLang\"\n          [ariaLabel]=\"'auth.register.name' | translate:translations:currentLang\"\n          [formControl]=\"getFormControl('name')\"\n          [errors]=\"getErrorsFor('name')\"></app-input>\n\n      </div>\n\n      <div class=\"register-form__field\">\n        <fa-icon class=\"register-form__icon\"\n                 [icon]=\"['fas','envelope']\"></fa-icon>\n        <app-input\n          class=\"register-form__input\"\n          type=\"email\"\n          [noBorder]=\"true\"\n          [name]=\"'email'\"\n          [placeholder]=\"'auth.register.email' | translate:translations:currentLang\"\n          [ariaLabel]=\"'auth.register.email' | translate:translations:currentLang\"\n          [formControl]=\"getFormControl('email')\"\n          [errors]=\"getErrorsFor('email')\"></app-input>\n      </div>\n\n      <div class=\"register-form__field\">\n        <fa-icon class=\"register-form__icon\"\n                 [icon]=\"['fas','unlock-alt']\"></fa-icon>\n        <app-input\n          class=\"register-form__input\"\n          type=\"password\"\n          [noBorder]=\"true\"\n          [name]=\"'password'\"\n          [placeholder]=\"'auth.register.password' | translate:translations:currentLang\"\n          [ariaLabel]=\"'auth.register.password' | translate:translations:currentLang\"\n          [formControl]=\"getFormControl('password')\"\n          [errors]=\"getErrorsFor('password')\"></app-input>\n      </div>\n\n\n      <div class=\"register-form__field\">\n        <fa-icon class=\"register-form__icon\"\n                 [icon]=\"['fas','handshake']\"></fa-icon>\n        <app-input\n          class=\"register-form__input\"\n          type=\"text\"\n          [noBorder]=\"true\"\n          [name]=\"'invitationCode'\"\n          [placeholder]=\"'auth.register.invitationCode' | translate:translations:currentLang\"\n          [ariaLabel]=\"'auth.register.invitationCode' | translate:translations:currentLang\"\n          [formControl]=\"getFormControl('invitationCode')\"\n          [errors]=\"getErrorsFor('invitationCode')\"\n          [ariaDescribedBy]=\"'project-disclaimer'\"></app-input>\n      </div>\n      <div class=\"register-form__helper\" id=\"project-disclaimer\" [innerHTML]=\"'auth.register.disclaimer' | translate:translations:currentLang\">\n\n      </div>\n\n    </div>\n  </ng-template>\n\n  <ng-template #formFooter>\n    <div class=\"register-form__hint\" [innerHTML]=\"'auth.register.already-registered'  | translate:translations:currentLang \">\n\n    </div>\n  </ng-template>\n</app-auth-form>\n\n\n\n\n\n"
        },
        {
            "name": "ResetPasswordContainerComponent",
            "id": "component-ResetPasswordContainerComponent-de74b230ffbca5da3af3631d51909da5",
            "file": "src/app/features/auth/containers/reset-password-container/reset-password-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password-container",
            "styleUrls": [
                "./reset-password-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backendError",
                    "defaultValue": "undefined",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "codeQueryParam",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.pipe(select(state => state.appState.language))",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { GlobalState, selectTranslations } from '../../../../core/store';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthApiActions, ResetPasswordContainerActions } from '../../store/actions';\nimport { Observable } from 'rxjs';\nimport { I18n, Language } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-reset-password-container',\n  templateUrl: './reset-password-container.component.html',\n  styleUrls: ['./reset-password-container.component.scss']\n})\nexport class ResetPasswordContainerComponent {\n\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.pipe(select(state => state.appState.language));\n  backendError: string | undefined = undefined;\n  codeQueryParam: string;\n\n  constructor(private store: Store<GlobalState>, private actions$: Actions, private activatedRout: ActivatedRoute) {\n    this.actions$.pipe(ofType(AuthApiActions.restPasswordFailure)).subscribe(({error}: { error: string }) => {\n      this.backendError = error;\n      console.log(error);\n    });\n\n    this.codeQueryParam = '' + this.activatedRout.snapshot.queryParams?.code;\n  }\n\n  resetPassword(password: string): void {\n    this.store.dispatch(ResetPasswordContainerActions.resetPassword({password, resetPasswordToken: this.codeQueryParam}));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reset-password-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "activatedRout",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRout",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-reset-password-page\n  [translations]=\"translations$ | async\"\n  [currentLang]=\"currentLanguage$ | async\"\n  [backendError]=\"backendError\"\n  (submitResetPasswordForm)=\"resetPassword($event)\"\n>\n</app-reset-password-page>\n"
        },
        {
            "name": "ResetPasswordPageComponent",
            "id": "component-ResetPasswordPageComponent-606105eb02a19df270c132b0e75d0eb0",
            "file": "src/app/features/auth/pages/reset-password-page/reset-password-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password-page",
            "styleUrls": [
                "./reset-password-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backendError",
                    "line": 17,
                    "type": "string | undefined"
                },
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 16,
                    "type": "Language | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 15,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "submitResetPasswordForm",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "resetPasswordResetCodeForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { I18n, Language } from '../../../../core/models/model';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport { translateValidationErrors } from '../../../../core/helpers/helpers';\n\n@Component({\n  selector: 'app-reset-password-page',\n  templateUrl: './reset-password-page.component.html',\n  styleUrls: ['./reset-password-page.component.scss']\n})\nexport class ResetPasswordPageComponent {\n\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Input() backendError: string | undefined;\n  @Output() submitResetPasswordForm: EventEmitter<string> = new EventEmitter();\n\n  resetPasswordResetCodeForm: FormGroup;\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.resetPasswordResetCodeForm = new FormGroup({\n      password: new FormControl('', [\n        Validators.required,\n        Validators.minLength(4),\n      ])\n    });\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.resetPasswordResetCodeForm?.controls[key] as FormControl;\n  }\n\n  onSubmit(): void {\n    if (this.resetPasswordResetCodeForm.valid) {\n      this.submitResetPasswordForm.emit(this.resetPasswordResetCodeForm?.value.password);\n      return;\n    }\n\n    this.resetPasswordResetCodeForm.markAllAsTouched();\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLang)\n      .filter((error, index) => index === 0);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/mixins/forms\";\n\n\n.reset-password-form {\n  @include authform;\n}\n",
                    "styleUrl": "./reset-password-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-auth-form\n  [heading]=\"'auth.reset-password.title' | translate:translations:currentLang\"\n  [buttonText]=\"'auth.rest-password.cta' | translate:translations:currentLang\"\n  [backedErrorMessage]=\"backendError && (backendError | translate:translations:currentLang)\"\n  [authForm]=\"resetPasswordResetCodeForm\"\n  (formSubmit)=\"onSubmit()\"\n>\n  <ng-template #formTemplate let-form=\"form\">\n    <div [formGroup]=\"form\">\n      <div class=\"reset-password-form__field\">\n        <fa-icon class=\"reset-password-form__icon\"\n                 [icon]=\"['fas','unlock-alt']\"></fa-icon>\n        <app-input\n          class=\"reset-password-form__input\"\n          type=\"password\"\n          [noBorder]=\"true\"\n          [name]=\"'password'\"\n          [placeholder]=\"'auth.reset-password.password' | translate:translations:currentLang\"\n          [ariaLabel]=\"'auth.reset-password.password' | translate:translations:currentLang\"\n          [formControl]=\"getFormControl('password')\"\n          [errors]=\"getErrorsFor('password')\"></app-input>\n      </div>\n    </div>\n  </ng-template>\n\n\n\n</app-auth-form>\n\n\n\n\n\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-570b0b7877a7a0998ad9742dacd18561",
            "file": "src/app/shared/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "line": 20,
                    "type": "FormControl | undefined"
                },
                {
                    "name": "e2eTestName",
                    "defaultValue": "''",
                    "line": 27
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "line": 25,
                    "type": "string[]"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 26
                },
                {
                    "name": "label",
                    "line": 23,
                    "type": "string | undefined"
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "line": 21
                },
                {
                    "name": "noBackground",
                    "defaultValue": "false",
                    "line": 29
                },
                {
                    "name": "noBorder",
                    "defaultValue": "false",
                    "line": 24
                },
                {
                    "name": "noPadding",
                    "defaultValue": "false",
                    "line": 28
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 22,
                    "type": "SelectOption<T>[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanged",
                    "defaultValue": "new EventEmitter()",
                    "line": 30,
                    "type": "EventEmitter<T>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "inputId",
                    "defaultValue": "uuid()",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "selectedValue",
                    "defaultValue": "null",
                    "type": "T | string | null",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "getOptionKey",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOption<T>"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOption<T>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "option",
                            "type": "T | string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "T | string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, OnInit, Output } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { v4 as uuid } from 'uuid';\nimport { SelectOption } from '../../../core/models/model';\n\n\n@Component({\n  selector: 'app-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectComponent),\n      multi: true\n    }\n  ]\n})\nexport class SelectComponent<T> implements OnInit, ControlValueAccessor {\n  @Input() control: FormControl | undefined;\n  @Input() name = '';\n  @Input() options: SelectOption<T>[] = [];\n  @Input() label: string | undefined;\n  @Input() noBorder = false;\n  @Input() errors: string[] = [];\n  @Input() isDisabled = false;\n  @Input() e2eTestName = '';\n  @Input() noPadding = false;\n  @Input() noBackground = false;\n  @Output() valueChanged: EventEmitter<T> = new EventEmitter();\n\n  selectedValue: T | string | null = null;\n  inputId: string = uuid();\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.selectedValue = this.options[0].value;\n    this.propagateChange(this.options[0].value);\n  }\n\n  onChange(option: T | string): void {\n    this.propagateChange(option);\n    this.valueChanged.emit(option as T);\n  }\n\n  getOptionKey(option: SelectOption<T>): string {\n    return option?.key ?? ((typeof option.value === 'string') ? option.value : JSON.stringify(option.value));\n  }\n\n  propagateChange = (value: T | string) => {};\n\n  registerOnChange(fn: () => {}): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n  }\n\n  writeValue(value: T | string): void {\n    if (value !== undefined) {\n      this.selectedValue = value;\n    }\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/mixins/forms\";\n\n.select {\n\n  &__field {\n    @include form-field;\n\n    &--no-border {\n      padding-left: 0.2rem;\n    }\n\n    &--no-padding {\n      padding: 0;\n    }\n\n    &--no-background{\n      background-color: transparent;\n      color: $blue-grey_10;\n      outline: none;\n      border: none;\n    }\n\n  }\n\n  &__label {\n    @include label;\n  }\n\n  &__error {\n    @include form-errors;\n  }\n}\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 33
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<label *ngIf=\"label\" class=\"select__label\" for=\"{{inputId}}\">{{label}}</label>\n\n<select\n  [(ngModel)]=\"selectedValue\"\n  ngDefaultControl\n  (ngModelChange)=\"onChange($event)\"\n  [attr.disabled]=\"isDisabled ? '' : null\"\n  [attr.data-test]=\"e2eTestName\"\n  [class.select__field--no-border]=\"noBorder\"\n  [class.select__field--no-padding]=\"noPadding\"\n  [class.select__field--no-background]=\"noBackground\"\n  class=\"select__field\"\n  name=\"{{name}}\"\n  id=\"{{inputId}}\"\n  [ngClass]=\"{'select__field--error': errors && errors.length > 0}\"\n>\n  <option\n    *ngFor=\"let option of options\"\n    [ngValue]=\"option.value\">\n    {{getOptionKey(option)}}\n  </option>\n</select>\n\n<div class=\"error-wrapper\">\n  <div class=\"select__error\" *ngFor=\"let error of errors\">{{error}}</div>\n</div>\n\n"
        },
        {
            "name": "ShoppingListComponent",
            "id": "component-ShoppingListComponent-6f25baffeabc2b0478c4871233afc319",
            "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list",
            "styleUrls": [
                "./shopping-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 13,
                    "type": "Language | null"
                },
                {
                    "name": "items",
                    "defaultValue": "undefined",
                    "line": 11,
                    "type": "ShoppingListItem[] | null | undefined"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 12,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "itemDeleted",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter<ShoppingListItem>"
                },
                {
                    "name": "listItemMoved",
                    "defaultValue": "new EventEmitter()",
                    "line": 15,
                    "type": "EventEmitter<ArrayItemMovedEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "deleteBuffer",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "deletionDelayInMilliseconds",
                    "defaultValue": "300",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "type": "ArrayItemMovedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "type": "ArrayItemMovedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPageState",
                    "args": [
                        {
                            "name": "items",
                            "type": "ShoppingListItem[] | null | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "ShoppingListItem[] | null | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemChecked",
                    "args": [
                        {
                            "name": "item",
                            "type": "ShoppingListItem"
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { ArrayItemMovedEvent, I18n, Language, ShoppingListItem } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-shopping-list',\n  templateUrl: './shopping-list.component.html',\n  styleUrls: ['./shopping-list.component.scss']\n})\nexport class ShoppingListComponent {\n  @Input() items: ShoppingListItem[] | null | undefined = undefined;\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Output() itemDeleted: EventEmitter<ShoppingListItem> = new EventEmitter();\n  @Output() listItemMoved: EventEmitter<ArrayItemMovedEvent> = new EventEmitter();\n\n  deleteBuffer: { [key: string]: number } = {};\n  deletionDelayInMilliseconds = 300;\n\n  itemChecked(item: ShoppingListItem, isChecked: boolean): void {\n    if (isChecked) {\n      this.deleteBuffer[item.id] = window.setTimeout(() => this.itemDeleted.emit(item), this.deletionDelayInMilliseconds);\n    } else {\n      clearTimeout(this.deleteBuffer[item.id]);\n    }\n  }\n\n  drop({previousIndex, currentIndex}: ArrayItemMovedEvent): void {\n    if (currentIndex !== previousIndex) {\n      this.listItemMoved.emit({currentIndex, previousIndex});\n    }\n  }\n\n  getPageState(items: ShoppingListItem[] | null | undefined): string {\n    if (items === null || items === undefined) {\n      return 'loading';\n    }\n\n    if (items.length === 0) {\n      return 'empty';\n    }\n\n    return 'default';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/breakpoints\";\n@import \"../../../../../styles/mixins/style\";\n@import \"../../../../../styles/settings/variables\";\n\n.shopping-list {\n  width: 100%;\n  display: block;\n  overflow: hidden;\n\n  &__item {\n    border-top: solid 1px $blue-grey_30;\n    color: $text-70;\n    font-size: 16px;\n    box-sizing: border-box;\n    background: white;\n  }\n\n  &__item-column-wrapper {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  &__item-text {\n    padding: 20px 10px 15px 10px;\n    display: block;\n  }\n\n  &__ellipsis {\n    color: $blue-grey_50;\n    padding: 0 20px;\n    cursor: move;\n  }\n\n  &__status {\n    height: 5px;\n    width: 0;\n    flex-basis: 100%;\n    background: $blue_50;\n\n    &--deleted {\n      width: 100%;\n      transition: width 1.5s linear;\n    }\n  }\n\n  @include skeleton('.shopping-list__item-skeleton', $blue-grey_30, 3.5s) {\n    background: $blue-grey_40;\n    height: 24px;\n    margin: 12px auto 18px 18px;\n    border-radius: $border-radius-default;\n    width: 90%;\n\n    &:nth-child(2){\n      width: 75%;\n    }\n\n    &:nth-child(3){\n      width: 85%;\n    }\n\n    &:nth-child(4){\n      width: 80%;\n      margin-bottom: 24px;\n    }\n  };\n\n}\n\n.cdk-drag-preview {\n  box-sizing: border-box;\n  border-radius: 4px;\n  box-shadow: 0 5px 5px -3px $blue-grey_30,\n  0 8px 10px 1px $blue-grey_20,\n  0 3px 14px 2px $blue-grey_10;\n}\n\n.cdk-drag-placeholder {\n  opacity: 0;\n}\n\n.cdk-drag-animating {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n.shopping-list-item.cdk-drop-list-dragging .shopping-list-item:not(.cdk-drag-placeholder) {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n.empty-shopping-list {\n  margin: 0 auto;\n  max-width: 80%;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding-bottom: 24px;\n  color: $text-40;\n  font-size: 0.8em;\n  text-align: center;\n  font-weight: 500;\n  line-height: 2;\n\n  @include large {\n    font-size: 1.2em;\n  }\n\n  &__image {\n    max-width: 100%;\n  }\n}\n",
                    "styleUrl": "./shopping-list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<section [ngSwitch]=\"getPageState(items)\" class=\"shopping-list\">\n  <div *ngSwitchCase=\"'default'\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\n    <div class=\"shopping-list__item\" *ngFor=\"let item of items\" cdkDrag>\n      <div class=\"shopping-list__item-column-wrapper\">\n        <mat-checkbox\n          class=\"shopping-list__item-text\"\n          [color]=\"'primary'\"\n          [disableRipple]=\"true\"\n          (change)=\"itemChecked(item, $event.checked)\">\n          <span\n            class=\"shopping-list__label\">{{item.amount}} {{'shopping-list.' + item.unit | translate:translations:currentLang }} {{item.title}}</span>\n        </mat-checkbox>\n        <fa-icon\n          cdkDragHandle\n          class=\"shopping-list__ellipsis\"\n          [icon]=\"['fas','ellipsis-v']\"\n        ></fa-icon>\n      </div>\n    </div>\n  </div>\n\n\n  <div *ngSwitchCase=\"'empty'\" class=\"empty-shopping-list\">\n    <img class=\"empty-shopping-list__image\" src=\"../../../../../assets/empty-shopping-list.png\" alt=\"Empty List\"/>\n    <div>{{'shopping-list.is-empty' | translate:translations:currentLang }} <br/> {{'shopping-list.add-product' | translate:translations:currentLang }} </div>\n  </div>\n\n  <div *ngSwitchCase=\"'loading'\">\n    <div class=\"shopping-list__item-skeleton\"></div>\n    <div class=\"shopping-list__item-skeleton\"></div>\n    <div class=\"shopping-list__item-skeleton\"></div>\n    <div class=\"shopping-list__item-skeleton\"></div>\n  </div>\n\n</section>\n\n"
        },
        {
            "name": "ShoppingListContainerComponent",
            "id": "component-ShoppingListContainerComponent-c27321a755d8f9a868ac99ac3ef90102",
            "file": "src/app/features/shopping-list/containers/shopping-list-container/shopping-list-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list-container",
            "styleUrls": [
                "./shopping-list-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeShoppingList$",
                    "defaultValue": "this.store.select(activeShoppingList)",
                    "type": "Observable<ShoppingList | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "activeShoppingListId$",
                    "defaultValue": "this.store.select(activeShoppingListId)",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "createDialogTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.select(selectCurrentLanguage)",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "editDialogTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "shoppingLists$",
                    "defaultValue": "this.store.select(selectShoppingLists)",
                    "type": "Observable<[] | null>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "shoppingListsItems$",
                    "defaultValue": "this.store.select(selectCurrentShoppingListItems)",
                    "type": "Observable<[] | undefined | null>",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "onCreateShoppingList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105
                },
                {
                    "name": "onEditShoppingList",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListChange",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListDelete",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemAdded",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemDeleted",
                    "args": [
                        {
                            "type": "DeleteShoppingListItemEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "type": "DeleteShoppingListItemEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemMoved",
                    "args": [
                        {
                            "type": "ShoppingListItemMovedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "type": "ShoppingListItemMovedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take, withLatestFrom } from 'rxjs/operators';\nimport { v4 as uuid } from 'uuid';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport { EditListDialogComponent } from '../../../../shared/components/edit-list-dialog/edit-list-dialog.component';\nimport { DELETION_DELAY } from '../../../../core/constants/constants';\nimport {\n  BasicShoppingListItem,\n  CreateListDialogEvent,\n  DeleteShoppingListItemEvent,\n  EditListDialogEvent,\n  I18n,\n  Language,\n  ShoppingList,\n  ShoppingListItem,\n  ShoppingListItemMovedEvent\n} from '../../../../core/models/model';\nimport { DialogService } from '../../../../core/services/dialog.service';\nimport { SnackbarService } from '../../../../core/services/snackbar.service';\nimport {\n  activeShoppingList,\n  activeShoppingListId,\n  GlobalState,\n  selectCurrentLanguage,\n  selectCurrentShoppingListItems,\n  selectShoppingLists,\n  selectTranslations\n} from '../../../../core/store';\nimport { ShoppingListContainerActions } from '../../store/actions';\n\n@Component({\n  selector: 'app-shopping-list-container',\n  templateUrl: './shopping-list-container.component.html',\n  styleUrls: ['./shopping-list-container.component.scss'],\n})\nexport class ShoppingListContainerComponent implements OnInit {\n\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.select(selectCurrentLanguage);\n  shoppingListsItems$: Observable<ShoppingListItem[] | undefined | null> = this.store.select(selectCurrentShoppingListItems);\n  shoppingLists$: Observable<ShoppingList[] | null> = this.store.select(selectShoppingLists);\n  activeShoppingList$: Observable<ShoppingList | undefined> = this.store.select(activeShoppingList);\n  activeShoppingListId$: Observable<string | undefined> = this.store.select(activeShoppingListId);\n\n  private createDialogTranslations: {} = {};\n  private editDialogTranslations: {} = {};\n\n  constructor(\n    private store: Store<GlobalState>,\n    private snackBarService: SnackbarService,\n    private dialogService: DialogService,\n    private translatePipe: TranslatePipe\n  ) {\n    this.store.select(selectTranslations).pipe(\n      withLatestFrom(this.store.select((state: GlobalState) => state.appState.language))\n    ).subscribe(([translations, currentLanguage]: [I18n | null, Language]) => {\n      this.createDialogTranslations = {\n        title: this.translatePipe.transform('create-list.title', translations, currentLanguage),\n        'save-button-text': this.translatePipe.transform('create-list.save-button-text', translations, currentLanguage),\n        'cancel-button-text': this.translatePipe.transform('create-list.cancel-button-text', translations, currentLanguage),\n        placeholder: this.translatePipe.transform('create-list.placeholder', translations, currentLanguage),\n      };\n\n      this.editDialogTranslations = {\n        title: this.translatePipe.transform('edit-list.title', translations, currentLanguage),\n        'save-button-text': this.translatePipe.transform('edit-list.save-button-text', translations, currentLanguage),\n        'cancel-button-text': this.translatePipe.transform('edit-list.cancel-button-text', translations, currentLanguage),\n        placeholder: this.translatePipe.transform('edit-list.placeholder', translations, currentLanguage),\n\n      };\n    });\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(ShoppingListContainerActions.loadShoppingLists());\n  }\n\n  onShoppingListChange(shoppingList: ShoppingList): void {\n    this.store.dispatch(ShoppingListContainerActions.changeShoppingList({shoppingListId: shoppingList.id}));\n  }\n\n  onShoppingListItemAdded(shoppingListItem: BasicShoppingListItem): void {\n    this.store.dispatch(ShoppingListContainerActions.addShoppingListItem({optimisticId: uuid(), shoppingListItem}));\n  }\n\n  onShoppingListItemDeleted({shoppingListItem}: DeleteShoppingListItemEvent): void {\n    this.store.dispatch(ShoppingListContainerActions.deleteShoppingListItem({shoppingListItem}));\n\n    this.snackBarService.openSnackBar('message.undo', 'message.action', 3000)\n      .afterDismissed()\n      .pipe(take(1))\n      .subscribe(({dismissedByAction}) => {\n        if (dismissedByAction) {\n          this.store.dispatch(ShoppingListContainerActions.undoDeleteShoppingListItem({shoppingListItem}));\n        }\n      });\n  }\n\n  onShoppingListItemMoved({shoppingListId, previousIndex, currentIndex}: ShoppingListItemMovedEvent): void {\n    this.store.dispatch(ShoppingListContainerActions.moveShoppingListItem({shoppingListId, previousIndex, currentIndex}));\n  }\n\n  onCreateShoppingList(): void {\n    const dialogRef = this.dialogService.openDialog(EditListDialogComponent, {\n      data: {},\n      translations: this.createDialogTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: CreateListDialogEvent | undefined) => {\n        if (result?.event === 'create') {\n          this.store.dispatch(ShoppingListContainerActions.createShoppingList({title: result.title}));\n        }\n      });\n  }\n\n  onEditShoppingList(shoppingList: ShoppingList): void {\n    const dialogRef = this.dialogService.openDialog(EditListDialogComponent, {\n      data: shoppingList,\n      translations: this.editDialogTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: EditListDialogEvent | undefined) => {\n        if (result?.event === 'edit') {\n          this.store.dispatch(ShoppingListContainerActions.editShoppingList({shoppingList: result.list}));\n        }\n      });\n  }\n\n  onShoppingListDelete(shoppingList: ShoppingList): void {\n    this.store.dispatch(ShoppingListContainerActions.deleteShoppingList({shoppingList}));\n    this.snackBarService.openSnackBar('message.undo', 'message.action', DELETION_DELAY)\n      .afterDismissed()\n      .pipe(take(1))\n      .subscribe(({dismissedByAction}) => {\n        if (dismissedByAction) {\n          this.store.dispatch(ShoppingListContainerActions.undoDeleteShoppingList({shoppingList}));\n        }\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shopping-list-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-shopping-list-page\n  [shoppingLists]=\"shoppingLists$ | async\"\n  [activeShoppingListId]=\"activeShoppingListId$ | async\"\n  [shoppingListItems]=\"shoppingListsItems$ | async\"\n  [translations]=\"translations$ | async\"\n  [activeShoppingList]=\"activeShoppingList$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n  (changeShoppingList)=\"onShoppingListChange($event)\"\n  (addShoppingListItem)=\"onShoppingListItemAdded($event)\"\n  (deleteShoppingListItem)=\"onShoppingListItemDeleted($event)\"\n  (moveShoppingListItem)=\"onShoppingListItemMoved($event)\"\n  (createShoppingList)=\"onCreateShoppingList()\"\n  (editShoppingList)=\"onEditShoppingList($event)\"\n  (deleteShoppingList)=\"onShoppingListDelete($event)\">\n</app-shopping-list-page>\n"
        },
        {
            "name": "ShoppingListFormComponent",
            "id": "component-ShoppingListFormComponent-ea04cbded8b27d0477a44147714fdb73",
            "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list-form",
            "styleUrls": [
                "./shopping-list-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 16,
                    "type": "Language | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 15,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "itemAdded",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter<BasicShoppingListItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "addItemForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "units",
                    "defaultValue": "[]",
                    "type": "SelectOption<Unit>[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { translateValidationErrors } from '../../../../core/helpers/helpers';\nimport { BasicShoppingListItem, I18n, Language, SelectOption, Unit } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-shopping-list-form',\n  templateUrl: './shopping-list-form.component.html',\n  styleUrls: ['./shopping-list-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShoppingListFormComponent implements OnInit {\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Output() itemAdded: EventEmitter<BasicShoppingListItem> = new EventEmitter();\n\n  addItemForm: FormGroup;\n\n  units: SelectOption<Unit>[] = [];\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.addItemForm = new FormGroup({\n      amount:  new FormControl('', [\n        Validators.required,\n      ]),\n      unit:  new FormControl('pack', [\n        Validators.required,\n      ]),\n      title:  new FormControl('', [\n        Validators.required,\n      ]),\n    });\n  }\n\n  ngOnInit(): void {\n    this.units = [\n      {value: 'pack', key: this.translatePipe.transform('shoppingList.addForm.pack', this.translations, this.currentLang)},\n      {value: 'piece', key: this.translatePipe.transform('shoppingList.addForm.piece', this.translations, this.currentLang)},\n      {value: 'kg', key: 'kg'},\n      {value: 'g', key: 'g'},\n      {value: 'l', key: 'l'},\n      {value: 'dl', key: 'dl'},\n    ];\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.addItemForm?.controls[key] as FormControl;\n  }\n\n  onSubmit(): void {\n    this.itemAdded.emit(this.addItemForm?.value);\n    this.addItemForm.reset({unit: 'pack'});\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLang);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/breakpoints\";\n@import \"../../../../../styles/settings/variables\";\n\n.add-items-form {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  padding: 12px;\n\n  @include large {\n    flex-direction:  row;\n  }\n\n  &--input-amount {\n    @include large {\n      max-width: 8rem;\n    }\n  }\n\n  &--input {\n    padding-top: 0.5rem;\n    padding-bottom: 0.5rem;\n    flex: 1 1 auto;\n\n    &:not(:nth-child(3)) {\n      border-bottom: 1px solid $blue-grey_90;\n    };\n\n    @include large {\n      padding-bottom: 0;\n      padding-right: 1rem;\n\n      &:not(:nth-child(3)) {\n        border-bottom: none;\n      };\n\n    }\n  }\n\n  &--input-unit {\n    @include large {\n      max-width: 8.5rem;\n    }\n  }\n\n  &--submit {\n    height: 2.5rem;\n\n    @include large {\n      height: auto;\n    }\n  }\n}\n",
                    "styleUrl": "./shopping-list-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form-wrapper\">\n  <form class=\"add-items-form\" [formGroup]=\"addItemForm\" (ngSubmit)=\"onSubmit()\">\n    <app-input\n      class=\"add-items-form--input add-items-form--input-amount\"\n      type=\"number\"\n      [minValue]=\"0\"\n      [noBorder]=\"true\"\n      [name]=\"'amount'\"\n      [placeholder]=\"'shoppingList.addForm.amount' | translate:translations:currentLang\"\n      [formControl]=\"getFormControl('amount')\"></app-input>\n\n    <app-select\n      class=\"add-items-form--input add-items-form--input-unit\"\n      [options]=\"units\"\n      [name]=\"'unit'\"\n      [noBorder]=\"true\"\n      [formControl]=\"getFormControl('unit')\">\n    </app-select>\n\n    <app-input\n      class=\"add-items-form--input\"\n      [placeholder]=\"'shoppingList.addForm.product' | translate:translations:currentLang\"\n      [noBorder]=\"true\"\n      [formControl]=\"getFormControl('title')\">\n    </app-input>\n\n    <app-button\n      class=\"add-items-form--submit\"\n      [buttonType]=\"'submit'\"\n      [buttonText]=\"'shoppingList.addForm.addLabel' | translate:translations:currentLang\"\n      [isDisabled]=\"addItemForm.invalid\"></app-button>\n  </form>\n</div>\n\n"
        },
        {
            "name": "ShoppingListPageComponent",
            "id": "component-ShoppingListPageComponent-ee7bacd4ca5e60f9f4e1458bc493da15",
            "file": "src/app/features/shopping-list/pages/shopping-list-page/shopping-list-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list-page",
            "styleUrls": [
                "./shopping-list-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeShoppingList",
                    "defaultValue": "undefined",
                    "line": 23,
                    "type": "ShoppingList | undefined | null"
                },
                {
                    "name": "activeShoppingListId",
                    "defaultValue": "undefined",
                    "line": 24,
                    "type": "string | undefined | null"
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 26,
                    "type": "Language | null"
                },
                {
                    "name": "shoppingListItems",
                    "defaultValue": "null",
                    "line": 22,
                    "type": "ShoppingListItem[] | undefined | null"
                },
                {
                    "name": "shoppingLists",
                    "defaultValue": "null",
                    "line": 21,
                    "type": "ShoppingList[] | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 25,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "addShoppingListItem",
                    "defaultValue": "new EventEmitter()",
                    "line": 29,
                    "type": "EventEmitter<BasicShoppingListItem>"
                },
                {
                    "name": "changeShoppingList",
                    "defaultValue": "new EventEmitter()",
                    "line": 28,
                    "type": "EventEmitter<ShoppingList>"
                },
                {
                    "name": "createShoppingList",
                    "defaultValue": "new EventEmitter()",
                    "line": 34,
                    "type": "EventEmitter<ShoppingList>"
                },
                {
                    "name": "deleteShoppingList",
                    "defaultValue": "new EventEmitter()",
                    "line": 32,
                    "type": "EventEmitter<ShoppingList>"
                },
                {
                    "name": "deleteShoppingListItem",
                    "defaultValue": "new EventEmitter()",
                    "line": 30,
                    "type": "EventEmitter<DeleteShoppingListItemEvent>"
                },
                {
                    "name": "editShoppingList",
                    "defaultValue": "new EventEmitter()",
                    "line": 33,
                    "type": "EventEmitter<ShoppingList>"
                },
                {
                    "name": "moveShoppingListItem",
                    "defaultValue": "new EventEmitter()",
                    "line": 31,
                    "type": "EventEmitter<ShoppingListItemMovedEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "onCreateList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "onDeleteList",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditList",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onItemAdded",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectList",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListChange",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemDeleted",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemMoved",
                    "args": [
                        {
                            "name": "arrayItemMovedEvent",
                            "type": "ArrayItemMovedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "arrayItemMovedEvent",
                            "type": "ArrayItemMovedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport {\n  ArrayItemMovedEvent,\n  BasicShoppingListItem,\n  DeleteShoppingListItemEvent,\n  I18n,\n  Language,\n  ShoppingList,\n  ShoppingListItem,\n  ShoppingListItemMovedEvent\n} from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-shopping-list-page',\n  templateUrl: './shopping-list-page.component.html',\n  styleUrls: ['./shopping-list-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShoppingListPageComponent implements OnInit {\n  @Input() shoppingLists: ShoppingList[] | null = null;\n  @Input() shoppingListItems: ShoppingListItem[] | undefined | null = null;\n  @Input() activeShoppingList: ShoppingList | undefined | null = undefined;\n  @Input() activeShoppingListId: string | undefined | null = undefined;\n  @Input() translations: I18n | null = {};\n  @Input() currentLanguage: Language | null = DEFAULT_LANGUAGE;\n\n  @Output() changeShoppingList: EventEmitter<ShoppingList> = new EventEmitter();\n  @Output() addShoppingListItem: EventEmitter<BasicShoppingListItem> = new EventEmitter();\n  @Output() deleteShoppingListItem: EventEmitter<DeleteShoppingListItemEvent> = new EventEmitter();\n  @Output() moveShoppingListItem: EventEmitter<ShoppingListItemMovedEvent> = new EventEmitter();\n  @Output() deleteShoppingList: EventEmitter<ShoppingList> = new EventEmitter();\n  @Output() editShoppingList: EventEmitter<ShoppingList> = new EventEmitter();\n  @Output() createShoppingList: EventEmitter<ShoppingList> = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  onShoppingListChange(shoppingList: ShoppingList): void {\n    this.changeShoppingList.emit(shoppingList);\n  }\n\n  onItemAdded(shoppingListItem: BasicShoppingListItem): void {\n    if (this.activeShoppingListId) {\n      this.addShoppingListItem.emit({...shoppingListItem, shoppingList: this.activeShoppingListId});\n    }\n  }\n\n  onShoppingListItemDeleted(shoppingListItem: ShoppingListItem): void {\n    if (this.activeShoppingListId) {\n      this.deleteShoppingListItem.emit({shoppingListItem, shoppingListId: this.activeShoppingListId});\n    }\n  }\n\n  onShoppingListItemMoved(arrayItemMovedEvent: ArrayItemMovedEvent): void {\n    if (this.activeShoppingListId) {\n      this.moveShoppingListItem.emit({shoppingListId: this.activeShoppingListId, ...arrayItemMovedEvent});\n    }\n  }\n\n  onSelectList(shoppingList: ShoppingList): void {\n    this.changeShoppingList.emit(shoppingList);\n  }\n\n  onEditList(shoppingList: ShoppingList): void {\n    this.editShoppingList.emit(shoppingList);\n  }\n\n  onDeleteList(shoppingList: ShoppingList): void {\n    this.deleteShoppingList.emit(shoppingList);\n  }\n\n  onCreateList(): void {\n    this.createShoppingList.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/variables\";\n\n.shopping-list-wrapper {\n  border-radius: $border-radius-default;\n  box-shadow: 0 0 18px $blue-grey_10;\n}\n",
                    "styleUrl": "./shopping-list-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 34
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"container\">\n  <app-list-header\n    [selectedList]=\"activeShoppingList\"\n    [lists]=\"shoppingLists\"\n    [defaultTitle]=\"'shopping-list.default-title' | translate:translations:currentLanguage\"\n    [addListLabel]=\"'shopping-list.new-list' | translate:translations:currentLanguage\"\n    [buttonLabel]=\"'shopping-list.my-lists' | translate:translations:currentLanguage\"\n    (selectList)=\"onSelectList($event)\"\n    (editList)=\"onEditList($event)\"\n    (deleteList)=\"onDeleteList($event)\"\n    (createList)=\"onCreateList()\"></app-list-header>\n  <div class=\"shopping-list-wrapper\">\n    <app-shopping-list-form\n      [translations]=\"translations\"\n      [currentLang]=\"currentLanguage\"\n      (itemAdded)=\"onItemAdded($event)\"></app-shopping-list-form>\n    <app-shopping-list\n      [items]=\"activeShoppingList?.isInitialized ? shoppingListItems : null\"\n      [translations]=\"translations\"\n      [currentLang]=\"currentLanguage\"\n      (listItemMoved)=\"onShoppingListItemMoved($event)\"\n      (itemDeleted)=\"onShoppingListItemDeleted($event)\"></app-shopping-list>\n  </div>\n</div>\n\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ErrorInterceptor"
                        },
                        {
                            "name": "JwtInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "BetaTeaserComponent"
                        },
                        {
                            "name": "NavigationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "CookbookModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "ShoppingListModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthFormComponent"
                        },
                        {
                            "name": "ForgotPasswordContainerComponent"
                        },
                        {
                            "name": "ForgotPasswordPageComponent"
                        },
                        {
                            "name": "LoginContainerComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "RegisterContainerComponent"
                        },
                        {
                            "name": "RegisterPageComponent"
                        },
                        {
                            "name": "ResetPasswordContainerComponent"
                        },
                        {
                            "name": "ResetPasswordPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CookbookModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CookbookService"
                        },
                        {
                            "name": "RecipeService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddRecipeDialogComponent"
                        },
                        {
                            "name": "CookbookContainerComponent"
                        },
                        {
                            "name": "CookbookPageComponent"
                        },
                        {
                            "name": "RecipeContainerComponent"
                        },
                        {
                            "name": "RecipeListComponent"
                        },
                        {
                            "name": "RecipePageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CookbookRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CookbookRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MealPlanerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "MealplanerContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MealPlanerRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MealPlanerRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductInfoModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProductPageComponent"
                        },
                        {
                            "name": "ProductPageContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ProductInfoRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductInfoRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "EditListDialogComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "ListHeaderComponent"
                        },
                        {
                            "name": "ListPickerDialogComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "TranslatePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "EditListDialogComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "ListHeaderComponent"
                        },
                        {
                            "name": "ListPickerDialogComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "TranslatePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShoppingListComponent"
                        },
                        {
                            "name": "ShoppingListContainerComponent"
                        },
                        {
                            "name": "ShoppingListFormComponent"
                        },
                        {
                            "name": "ShoppingListPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "ShoppingListRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingListRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Accent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Accent',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    color: 'accent'\n  }\n})"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "object",
                "defaultValue": "{\n  logout: action('clicked')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "object",
                "defaultValue": "{\n  clicked: action('clicked')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "object",
                "defaultValue": "{\n  clicked: action('clicked'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "object",
                "defaultValue": "{\n  valueChanged: action('valueChanged'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  credentialsReceived: action('credentialsReceived')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "object",
                "defaultValue": "{\n  inputChanged: action('inputChanged'),\n  editRecipe: action('editRecipe'),\n  deleteRecipe: action('deleteRecipe')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts",
                "type": "object",
                "defaultValue": "{\n  recipeSaved: action('recipeSaved')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "object",
                "defaultValue": "{\n  itemDeleted: action('itemDeleted'),\n  listItemMoved: action('listItemMoved'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  itemAdded: action('itemAdded'),\n}"
            },
            {
                "name": "activeShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists.items.entities[shoppingListState.activeShoppingList || '']\n)"
            },
            {
                "name": "activeShoppingListId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n)"
            },
            {
                "name": "addShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Add Shopping List Items',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>()\n)"
            },
            {
                "name": "addShoppingListItemFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Items Failure',\n  props<{ shoppingListItem: BasicShoppingListItem }>()\n)"
            },
            {
                "name": "addShoppingListItemSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Items Success',\n  props<{ optimisticId: string, shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "appStateReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/app-state.reducers.ts",
                "type": "",
                "defaultValue": "createReducer<AppState, Action>(\n  initialAppState,\n  on(\n    I18nApiActions.getI18nSuccess,\n    (state, {i18n}: { i18n: I18n }) => {\n      return {\n        ...state,\n        i18n: {\n          ...state.i18n,\n          ...i18n\n        }\n      };\n    }),\n  on(\n    AuthApiActions.refreshTokenSuccess,\n    (state, {user}: { user: User }) => {\n      return {\n        ...state,\n        user: {\n          ...user\n        }\n      };\n    }),\n  on(\n    AuthApiActions.refreshTokenFailed,\n    (state) => {\n      return {\n        ...state,\n        user: null\n      };\n    }),\n  on(\n    AuthApiActions.loginSuccess,\n    AuthApiActions.registerSuccess,\n    AuthApiActions.restPasswordSuccess,\n    (state, {user}: { user: User }) => {\n      return {\n        ...state,\n        user: {\n          ...user\n        },\n      };\n    }),\n  on(\n    AuthenticatedGuardActions.setRequestedUrlBeforeLoginWasRequired,\n    (state, {url}: { url: string }) => {\n      return {\n        ...state,\n        requestedUrlBeforeLoginWasRequired: url\n      };\n    }),\n  on(\n    AppInitializationActions.setLanguage,\n    (state, {language}: { language: Language }) => {\n      return {\n        ...state,\n        language,\n      };\n    }),\n  on(\n    ErrorInterceptorActions.logout,\n    NavActions.logout,\n    (state) => {\n      return {\n        ...state,\n        user: null,\n      };\n    }),\n  on(NavActions.changeLanguage, (state: AppState, {language}: { language: Language }) => {\n    return {\n      ...state,\n      language\n    };\n  })\n)"
            },
            {
                "name": "bulkUpdateShoppingListItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Effect] Bulk Update ShoppingList',\n  props<{ shoppingListId: string, shoppingListItems: ShoppingListItem[] }>()\n)"
            },
            {
                "name": "buttonData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "object",
                "defaultValue": "{\n  isLoggedIn: false,\n  currentLang: 'de',\n  translations: {\n    de: {\n      'app.navigation.login': 'Login',\n      'app.navigation.logout': 'Abmelden',\n      'app.navigation.register': 'Registrieren',\n      'app.navigation.planer': 'Menuplaner',\n      'app.navigation.menus': 'Menüs',\n      'app.navigation.shopping-list': 'Einkaufsliste',\n    }\n  }\n}"
            },
            {
                "name": "buttonData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "object",
                "defaultValue": "{\n  text: 'Primary',\n  isDisabled: false,\n  e2eTestName: 'buttonTest'\n}"
            },
            {
                "name": "changeLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/navigation.actions.ts",
                "type": "",
                "defaultValue": "createAction('[AppComponent] Change Language', props<{ language: Language }>())"
            },
            {
                "name": "changeShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Shopping List Container] Change Shopping List', props<{ shoppingListId: string }>())"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "cookbookStateReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/reducers/cookbook-state.reducers.ts",
                "type": "",
                "defaultValue": "createReducer<CookbookState, Action>(\n  initialCookbookState,\n  on(CookbookApiActions.loadCookbookSuccess,\n    (state: CookbookState, {cookbooks}: { cookbooks: Cookbook[] }) => ({\n      ...state,\n      activeCookbookId: state.activeCookbookId ? state.activeCookbookId : cookbooks[0].id,\n      cookbooks\n    })\n  ),\n  on(CookbookApiActions.loadRecipesSuccess, (state: CookbookState, {cookbookId, recipes}: LoadRecipeSuccessAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [cookbookId]: recipes\n      }\n    };\n  }),\n  on(CookbookContainerActions.createRecipe, (state: CookbookState, {optimisticId, recipeToSave}: CreateRecipeAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipeToSave.cookbookId]: [...copyOrCreateArray(state.recipes, recipeToSave.cookbookId), {...recipeToSave, id: optimisticId}]\n      }\n    };\n  }),\n  on(CookbookApiActions.createRecipeSuccess, (state: CookbookState, {optimisticId, recipe}: CreateRecipeSuccessAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: state.recipes[recipe.cookbookId].map((item: Recipe) => {\n          return item.id === optimisticId ? recipe : item;\n        })\n      }\n    };\n  }),\n  on(CookbookApiActions.createRecipeFailure, (state: CookbookState, {optimisticId, cookbookId}: CreateRecipeSuccessFailureAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [cookbookId]: state.recipes[cookbookId].filter((recipe: Recipe) => recipe.id !== optimisticId)\n      }\n    };\n  }),\n  on(CookbookApiActions.editRecipeSuccess, (state: CookbookState, {recipe}: EditRecipeSuccessAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: state.recipes[recipe.cookbookId].map((item: Recipe) => {\n          return item.id === recipe.id ? recipe : item;\n        })\n      }\n    };\n  }),\n  on(CookbookContainerActions.deleteRecipeFromState, (state: CookbookState, {recipeToDelete}: DeleteRecipeFromStateAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipeToDelete.cookbookId]: state.recipes[recipeToDelete.cookbookId].filter((recipe: Recipe) => recipe.id !== recipeToDelete.id)\n      }\n    };\n  }),\n  on(CookbookApiActions.undoDeleteRecipeFromState, (state: CookbookState, {recipe}: UndoDeleteRecipeFromStateAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: addItemAtIndex(recipe, state.recipes[recipe.cookbookId])\n      }\n    };\n  }),\n  on(CookbookContainerActions.selectCookbook, (state: CookbookState, {selectedCookbookId}: CookbookSelectedAction) => {\n    return {\n      ...state,\n      activeCookbookId: selectedCookbookId\n    };\n  }),\n  on(CookbookContainerActions.createCookbook, (state: CookbookState, {optimisticId, title}: CookbookCreatedAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks, {id: optimisticId, title}\n      ]\n    };\n  }),\n  on(CookbookApiActions.createCookbookSuccess, (state: CookbookState, {optimisticId, cookbook}: CookbookCreatedSuccessAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.map((item: Cookbook) => item.id === optimisticId ? cookbook : item)\n      ]\n    };\n  }),\n  on(CookbookApiActions.createCookbookFailure, (state: CookbookState, {optimisticId}: CookbookCreatedFailureAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.filter((item: Cookbook) => item.id !== optimisticId)\n      ]\n    };\n  }),\n  on(CookbookApiActions.editCookbookSuccess, (state: CookbookState, {cookbook}: CookbookEditedSuccessAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.map((item: Cookbook) => item.id === cookbook.id ? cookbook : item)\n      ]\n    };\n  }),\n  on(CookbookContainerActions.deleteCookbookFromState, (state: CookbookState, {cookbook}: CookbookDeletedFromStateAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.filter((item: Cookbook) => item.id !== cookbook.id)\n      ]\n    };\n  }),\n  on(CookbookApiActions.undoDeleteCookbookFromState, (state: CookbookState, {cookbook}: UndoCookbookDeletedFromStateAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...addItemAtIndex(cookbook, state.cookbooks)\n      ]\n    };\n  }),\n)"
            },
            {
                "name": "copyIngredientsToShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[CookbookContainer]',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>())"
            },
            {
                "name": "copyRecipeToMealplaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[CookbookContainer]',\n  props<{ recipe: Recipe }>())"
            },
            {
                "name": "createCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Create Cookbooks',\n  props<{ optimisticId: string, title: string }>()\n)"
            },
            {
                "name": "createCookbookFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[createCookbook Effect] Create Cookbooks Failure',\n  props<{ optimisticId: string }>()\n)"
            },
            {
                "name": "createCookbookSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[createCookbook Effect] Create Cookbooks Success',\n  props<{ optimisticId: string, cookbook: Cookbook }>()\n)"
            },
            {
                "name": "createRecipe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Create Recipe',\n  props<{ optimisticId: string, recipeToSave: Recipe }>()\n)"
            },
            {
                "name": "createRecipeFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[CreateRecipe Effect] Create Recipe Failure',\n  props<{ optimisticId: string, cookbookId: string }>())"
            },
            {
                "name": "createRecipeSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[CreateRecipe Effect] Create Recipe Success',\n  props<{ optimisticId: string, recipe: Recipe }>()\n)"
            },
            {
                "name": "createShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Create new ShoppingList',\n  props<{ title: string }>()\n)"
            },
            {
                "name": "createShoppingListFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Create Shopping List  Failure',\n)"
            },
            {
                "name": "createShoppingListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Create Shopping List Success',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: buttonData.text,\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked\n  }\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    errors: []\n  }\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: AddRecipeDialogComponent,\n  props: {}\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: RecipeListComponent,\n  props: {\n    ...formData,\n    ...actionsData\n  }\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: RecipePageComponent,\n  props: {\n    ...formData,\n    ...actionsData\n  }\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ShoppingListComponent,\n  props: {\n    ...taskData,\n    ...actionsData\n  },\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ShoppingListFormComponent,\n  props: {\n    ...taskData,\n    ...actionsData\n  },\n})"
            },
            {
                "name": "DEFAULT_LANGUAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "Language",
                "defaultValue": "'de'"
            },
            {
                "name": "DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "string",
                "defaultValue": "'shopping-list'"
            },
            {
                "name": "DefaultTitle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {\n    selectedList: {id: 'test', title: ''},\n    lists: [{id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}],\n    defaultTitle: 'Dafault Title',\n    addListLabel: 'Liste Hinufügen',\n    buttonLabel: 'Meine Listen'\n  }\n})"
            },
            {
                "name": "deleteCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Delete Cookbooks',\n  props<{ cookbook: Cookbook }>()\n)"
            },
            {
                "name": "deleteCookbookFromState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Delete Cookbooks From State',\n  props<{ cookbook: Cookbook }>()\n)"
            },
            {
                "name": "deleteCookbookSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[deleteCookbook Effect] Delete Cookbooks Success',\n  props<{ cookbook: Cookbook }>()\n)"
            },
            {
                "name": "deleteRecipe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Delete Recipe',\n  props<{ recipe: Recipe }>()\n)"
            },
            {
                "name": "deleteRecipeFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[DeleteRecipe Effect] Delete Recipe Failure')"
            },
            {
                "name": "deleteRecipeFromState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Cookbook Container] Delete Recipe from State', props<{ recipeToDelete: Recipe }>())"
            },
            {
                "name": "deleteRecipeSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[DeleteRecipe Effect] Delete Recipe Success',\n  props<{ deletedRecipe: Recipe }>()\n)"
            },
            {
                "name": "deleteShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Delete shopping list',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "deleteShoppingListFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List  Failure',\n)"
            },
            {
                "name": "deleteShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Delete Shopping List Items',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "deleteShoppingListItemFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Failure',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "deleteShoppingListItemSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Success',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "deleteShoppingListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Success',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "DELETION_DELAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "number",
                "defaultValue": "3000"
            },
            {
                "name": "dialogData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.stories.ts",
                "type": "DialogData<Recipe>",
                "defaultValue": "{\n  data: {\n    id: '1',\n    title: 'Apple Pie',\n    cookbookId: 'cookbookId',\n    ingredients: [\n      {\n        amount: 1,\n        unit: 'kg',\n        title: 'Apple',\n        isStapleFood: false\n      }\n    ]\n  },\n  translations: {\n    'ingredients.label-text': 'Ingredients',\n    'button.modify': 'Button 1',\n    'button.add-to-mealplaner': 'Button 2'\n  }\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Disabled',\n    isDisabled: true,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n  }\n})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    isDisabled: true,\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "Edit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: RecipePageComponent,\n  props: {\n    ...formData,\n    ...actionsData,\n    recipe: {\n      title: 'Beef & beer pie',\n      url: 'https://www.bbcgoodfood.com/recipes/beef-beer-pie',\n      ingredients: [\n        {\n          name: 'Beer',\n          amount: 1,\n          unit: 'l',\n          isStapleFood: true,\n        },\n        {\n          name: 'Beef',\n          amount: 1,\n          unit: 'kg',\n          isStapleFood: false,\n        }\n      ]\n    }\n  }\n})"
            },
            {
                "name": "editCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Edit Cookbooks',\n  props<{ cookbook: Cookbook }>()\n)"
            },
            {
                "name": "editCookbookFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[editCookbook Effect] Edit Cookbooks Failure')"
            },
            {
                "name": "editCookbookSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[editCookbook Effect] Edit Cookbooks Success',\n  props<{ cookbook: Cookbook }>()\n)"
            },
            {
                "name": "editRecipe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Edit Recipe',\n  props<{ recipeToEdit: Recipe }>()\n)"
            },
            {
                "name": "editRecipeFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[EditRecipe Effect] Edit Recipe Failure')"
            },
            {
                "name": "editRecipeSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[EditRecipe Effect] Edit Recipe Success',\n  props<{ recipe: Recipe }>()\n)"
            },
            {
                "name": "editShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Edit ShoppingList',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "editShoppingListFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Edit Shopping List  Failure',\n)"
            },
            {
                "name": "editShoppingListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Edit Shopping List Success',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "EMAIL_PATTERN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "",
                "defaultValue": "/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  showBetaTeaser: false,\n  apiUrl: 'https://mealplaner.app/api',\n  authUrl: 'https://mealplaner.app/api',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.qa.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  showBetaTeaser: false,\n  apiUrl: 'https://beta.mealplaner.app/api',\n  authUrl: 'https://beta.mealplaner.app/api',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  showBetaTeaser: true,\n  apiUrl: 'http://localhost:4200/api',\n  authUrl: 'http://localhost:4200',\n}"
            },
            {
                "name": "forgotPasswordFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Forgot Password Failure')"
            },
            {
                "name": "forgotPasswordSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Forgot Password Success')"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      email: 'Email Adresse',\n      password: 'Passwort',\n      login: 'Anmelden',\n      register: 'Registrieren',\n      'errors.validation.email.required': 'Bitte geben Sie Ihre Email Adresse ein',\n      'errors.validation.email.pattern': 'Valid Email Format braucht @ ein . dann mindestens 2 Zeichen',\n      'errors.validation.password.required': 'Bitte geben Sie Ihre Passwort ein',\n      'errors.validation.password.minlength': 'Passwort muss mindestens 4 character lang sein',\n      'errors.validation.password.pattern': 'Passwort braucht klein und gross Buchstaben und ein Zahl'\n      }\n    }\n}"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      'input.search': 'Suchen',\n      'button.edit': 'Bearbeiten',\n      'button.delete': 'Löschen'\n    }\n  },\n  recipes: [\n    {\n      id: '1',\n      title: 'Chocolate chip cookie'\n    },\n    {\n      id: '2',\n      title: 'Cheesecake'\n    },\n    {\n      id: '3',\n      title: 'Muffin'\n    }\n  ]\n}"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      'recipe-form.placeholder.title': 'Title',\n      'recipe-form.label.title': 'Recipe Title',\n      'recipe-form.placeholder.url': 'Link',\n      'recipe-form.label.url': 'Link to Recipe',\n      'ingredients.label-text': 'Ingredients',\n      'recipe-form.placeholder.amount': 'Quantity',\n      'recipe-form.placeholder.name': 'Name',\n      'recipe-form.text.toggle': 'Basic Ingredient',\n      'recipe-form.button.delete': 'Delete',\n      'recipe-form.button.new-ingredient': 'Add new Ingredient',\n      'recipe-form.button.submit': 'Create',\n      'errors.validation.title.required': 'Titel is required',\n      'recipe-form.button.modify': 'Edit'\n    }\n  }\n}"
            },
            {
                "name": "getI18n",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/i18n-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Initialize App] Get i18n')"
            },
            {
                "name": "getI18nFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/i18n-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Initialize App] Get i18n Failure')"
            },
            {
                "name": "getI18nSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/i18n-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Initialize App] Get i18n Success',\n  props<{ i18n: I18n }>())"
            },
            {
                "name": "IconLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Add',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    iconLeft: 'plus'\n  }\n})"
            },
            {
                "name": "IconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Delete',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    iconRight: 'trash'\n  }\n})"
            },
            {
                "name": "initialAppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/state/app-state.ts",
                "type": "AppState",
                "defaultValue": "{\n  language: DEFAULT_LANGUAGE,\n  i18n: null,\n  user: null,\n  requestedUrlBeforeLoginWasRequired: null\n}"
            },
            {
                "name": "initialCookbookState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/state/cookbook-state.ts",
                "type": "CookbookState",
                "defaultValue": "{\n  activeCookbookId: '',\n  cookbooks: [],\n  recipes: {}\n}"
            },
            {
                "name": "initialized",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/app-initialization.actions.ts",
                "type": "",
                "defaultValue": "createAction('[App Initialization] App Initialized')"
            },
            {
                "name": "initialShoppingListState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "ShoppingListState",
                "defaultValue": "{\n  shoppingLists: {\n    items: shoppingListAdapter.getInitialState(),\n  },\n  shoppingListItems: {},\n  activeShoppingList: undefined,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "GlobalState",
                "defaultValue": "{\n  appState: initialAppState,\n  cookbookState: initialCookbookState,\n  shoppingListState: initialShoppingListState,\n}"
            },
            {
                "name": "inputData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "object",
                "defaultValue": "{\n  isDisabled: false,\n  e2eTestName: 'test',\n  label: 'Label',\n  errors: ['Ooops!', 'An error has occured!'],\n  placeholder: 'Placeholder',\n  formControl: createFormControl()\n}"
            },
            {
                "name": "inputData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "object",
                "defaultValue": "{\n  options: [\n    {key: 'Tesla', value: 'Tesla'},\n    {key: 'Audi', value: 'Audi'},\n    {key: 'Skoda', value: 'Skoda'},\n    {key: 'BMW', value: 'BMW'},\n  ],\n  isDisabled: false,\n}"
            },
            {
                "name": "isActiveShoppingListLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n)"
            },
            {
                "name": "isLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => !!appState.user && !isJwtTokenExpired(appState.user.jwt)\n)"
            },
            {
                "name": "loadCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Cookbook Container] Load Cookbooks')"
            },
            {
                "name": "loadCookbookFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[loadCookbook Effect] Load Cookbooks Failure')"
            },
            {
                "name": "loadCookbookSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[loadCookbook Effect] Load Cookbooks Success',\n  props<{ cookbooks: Cookbook[] }>()\n)"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {}\n})"
            },
            {
                "name": "loadRecipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Cookbook Container] Get Recipes')"
            },
            {
                "name": "loadRecipesFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[LoadRecipe Effect] Get Recipes Failure')"
            },
            {
                "name": "loadRecipesSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[LoadRecipe Effect] Get Recipes Success',\n  props<{ cookbookId: string, recipes: Recipe[] }>()\n)"
            },
            {
                "name": "loadShoppingListItemsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Shopping List API] Load Shopping List Items Failure')"
            },
            {
                "name": "loadShoppingListItemsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Load Shopping List Items Success',\n  props<{ shoppingListId: string, shoppingListItems: ShoppingListItem[] }>()\n)"
            },
            {
                "name": "loadShoppingLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Cookbook Container] Load ShoppingLists from Cookbook Container')"
            },
            {
                "name": "loadShoppingLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Shopping List Container] Load Shopping Lists')"
            },
            {
                "name": "loadShoppingListsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Shopping List API] Load Shopping Lists Failure')"
            },
            {
                "name": "loadShoppingListsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Load Shopping Lists Success',\n  props<{ shoppingLists: ShoppingList[] }>()\n)"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: NavigationComponent,\n  props: {\n    ...buttonData,\n    isLoggedIn: true,\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: NavigationComponent,\n  props: {\n    ...buttonData,\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/login-page.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Login Page] Login',\n  props<{ credentials: LoginCredentials }>())"
            },
            {
                "name": "Login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: AuthFormComponent,\n  props: {\n    credentialsReceived: actionsData.credentialsReceived,\n    translations: formData.translations\n  }\n})"
            },
            {
                "name": "loginFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth] Login Failure',  props<{ error: string }>())"
            },
            {
                "name": "loginSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Login Success', props<{ user: User }>())"
            },
            {
                "name": "logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/error-interceptor.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Error Interceptor] Logout')"
            },
            {
                "name": "logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/navigation.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Nav] Logout')"
            },
            {
                "name": "logoutFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Logout Failure')"
            },
            {
                "name": "logoutSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Logout Success')"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "MetaReducer[]",
                "defaultValue": "[]"
            },
            {
                "name": "moveShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Move Shopping List Items',\n  props<{ shoppingListId: string, currentIndex: number, previousIndex: number }>()\n)"
            },
            {
                "name": "MultipleList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {\n    selectedList: {id: 'test', title: 'My ShoppingList'},\n    lists: [{id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}],\n    defaultTitle: 'Dafault Title',\n    addListLabel: 'Liste Hinufügen',\n    buttonLabel: 'Meine Listen'\n  }\n})"
            },
            {
                "name": "OneList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {\n    selectedList: {id: 'test', title: 'My ShoppingList'},\n    lists: [{id: 'test', title: 'My ShoppingList'}],\n    defaultTitle: 'Dafault Title',\n    addListLabel: 'Liste Hinufügen',\n    buttonLabel: 'Meine Listen'\n  }\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "ActionReducerMap<GlobalState>",
                "defaultValue": "{\n  appState: appStateReducer,\n  shoppingListState: shoppingListReducers,\n  cookbookState: cookbookStateReducer\n}"
            },
            {
                "name": "refreshToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/app-initialization.actions.ts",
                "type": "",
                "defaultValue": "createAction('[App Initialization] Refresh JWT Token')"
            },
            {
                "name": "refreshToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/login-service.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth Service] Refresh Token')"
            },
            {
                "name": "refreshTokenFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth App] Refresh Token Failed')"
            },
            {
                "name": "refreshTokenSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Refresh Token Success', props<{ user: User }>())"
            },
            {
                "name": "register",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/register-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Register Container] Register',\n  props<{ credentials: RegisterCredentials }>())"
            },
            {
                "name": "Register",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: AuthFormComponent,\n  props: {\n    credentialsReceived: actionsData.credentialsReceived,\n    translations: formData.translations,\n    buttonText: 'register'\n  }\n})"
            },
            {
                "name": "registerFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Register Failure', props<{ error: string }>())"
            },
            {
                "name": "registerSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Register Success', props<{ user: User }>())"
            },
            {
                "name": "requestEmail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/forgot-password-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Forgot Password Container] Request Reset Email',\n  props<{ email: string }>())"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "resetPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/reset-password-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Reset Password Container] Reset Password',\n  props<{ password: string, resetPasswordToken: string }>())"
            },
            {
                "name": "restPasswordFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Rest Password Failure', props<{ error: string }>())"
            },
            {
                "name": "restPasswordSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Rest Password Success', props<{ user: User }>())"
            },
            {
                "name": "selectActiveCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.activeCookbookId)"
            },
            {
                "name": "selectAppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<GlobalState, AppState>('appState')"
            },
            {
                "name": "selectCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Select Cookbook',\n  props<{ selectedCookbookId: string }>()\n)"
            },
            {
                "name": "selectCookbooks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.cookbooks)"
            },
            {
                "name": "selectCookbookState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<GlobalState, CookbookState>('cookbookState')"
            },
            {
                "name": "selectCurrentLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.language\n)"
            },
            {
                "name": "selectCurrentShoppingListEntity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => {\n    if (!shoppingListState.activeShoppingList) {\n      return shoppingListItemAdapter.getInitialState();\n    }\n\n    const items = shoppingListState.shoppingListItems[shoppingListState.activeShoppingList];\n\n    if (!items) {\n      return shoppingListItemAdapter.getInitialState();\n    }\n\n    return items;\n  },\n)"
            },
            {
                "name": "selectCurrentShoppingListItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "shoppingListItemAdapter.getSelectors(selectCurrentShoppingListEntity).selectAll"
            },
            {
                "name": "selectRecipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.recipes\n)"
            },
            {
                "name": "selectRequestedUrlBeforeLoginWasRequired",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.requestedUrlBeforeLoginWasRequired\n)"
            },
            {
                "name": "selectShoppingLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "shoppingListAdapter.getSelectors(selectShoppingListsEntity).selectAll"
            },
            {
                "name": "selectShoppingListsEntity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists.items\n)"
            },
            {
                "name": "selectShoppingListState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<GlobalState, ShoppingListState>('shoppingListState')"
            },
            {
                "name": "selectTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.i18n || {}\n)"
            },
            {
                "name": "selectUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user\n)"
            },
            {
                "name": "selectUserID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user?.id,\n)"
            },
            {
                "name": "setActiveCookbookIdAsQueryParam",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[ChooseActiveCookbookId Effect] Set Active CookbookId As QueryParam',\n  props<{ selectedCookbookId: string }>()\n)"
            },
            {
                "name": "setActiveShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Effect] Set Active ShoppingList',\n  props<{ shoppingListId: string }>()\n)"
            },
            {
                "name": "setLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/app-initialization.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[App Initialization] Set Application Startup Language',\n  props<{ language: Language }>())"
            },
            {
                "name": "setRequestedUrlBeforeLoginWasRequired",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/auth-guard.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth Guard] Set Set Requested Url Before Login Was Required',\n  props<{ url: string }>())"
            },
            {
                "name": "shoppingListAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "",
                "defaultValue": "createEntityAdapter<ShoppingList>({\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n})"
            },
            {
                "name": "shoppingListItemAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "",
                "defaultValue": "createEntityAdapter<ShoppingListItem>({\n  sortComparer: ((a, b) => (b.order || Number.MAX_VALUE) - (a.order || Number.MAX_VALUE)),\n})"
            },
            {
                "name": "shoppingListReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/reducers/shopping-list.reducers.ts",
                "type": "",
                "defaultValue": "createReducer<ShoppingListState, Action>(\n  initialShoppingListState,\n  on(\n    ShoppingListApiActions.loadShoppingListsSuccess,\n    (state: ShoppingListState, {shoppingLists}: LoadShoppingListsSuccessAction) => {\n      return {\n        ...state,\n        shoppingLists: {\n          items: shoppingListAdapter.addMany(shoppingLists, state.shoppingLists.items),\n        }\n      };\n    }),\n  on(\n    ShoppingListEffectActions.setActiveShoppingList,\n    ShoppingListContainerActions.changeShoppingList,\n    (state: ShoppingListState, {shoppingListId}: ChangeShoppingListAction | SetActiveShoppingListAction) => {\n      return {\n        ...state,\n        activeShoppingList: shoppingListId || undefined,\n      };\n    }),\n  on(\n    ShoppingListApiActions.loadShoppingListItemsSuccess,\n    (state: ShoppingListState, {shoppingListId, shoppingListItems}: LoadShoppingListItemsSuccessAction) => {\n      return {\n        ...state,\n        shoppingLists: {\n          items: shoppingListAdapter.updateOne({id: shoppingListId, changes: {isInitialized: true}}, state.shoppingLists.items),\n        },\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListId]: shoppingListItemAdapter.addMany(shoppingListItems, shoppingListItemAdapter.getInitialState()),\n        }\n      };\n    }),\n  on(\n    ShoppingListContainerActions.addShoppingListItem,\n    (state: ShoppingListState, {optimisticId, shoppingListItem}: AddShoppingListItemAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.addOne(\n            {id: optimisticId, ...shoppingListItem},\n            state.shoppingListItems[shoppingListItem.shoppingList])\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.addShoppingListItemSuccess,\n    (state: ShoppingListState, action: AddShoppingListItemSuccessAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [action.shoppingListItem.shoppingList]: shoppingListItemAdapter.updateOne(\n            {id: action.optimisticId, changes: action.shoppingListItem},\n            state.shoppingListItems[action.shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.deleteShoppingListItem,\n    (state: ShoppingListState, {shoppingListItem}: DeleteShoppingListItemAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.removeOne(\n            shoppingListItem.id,\n            state.shoppingListItems[shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.undoDeleteShoppingListItem,\n    (state: ShoppingListState, {shoppingListItem}) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.addOne(\n            shoppingListItem,\n            state.shoppingListItems[shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListEffectActions.bulkUpdateShoppingListItems,\n    (state: ShoppingListState, {shoppingListItems, shoppingListId}) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListId]: shoppingListItemAdapter.updateMany(\n            shoppingListItems.map(shoppingListItem => ({id: shoppingListItem.id, changes: shoppingListItem})),\n            state.shoppingListItems[shoppingListId]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.createShoppingListSuccess,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: {\n          items: shoppingListAdapter.addOne(shoppingList, state.shoppingLists.items),\n        },\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingList.id]: shoppingListItemAdapter.getInitialState(),\n        },\n        activeShoppingList: shoppingList.id,\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.editShoppingList,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: {\n          items: shoppingListAdapter.updateOne({id: shoppingList.id, changes: shoppingList}, state.shoppingLists.items),\n        },\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.deleteShoppingList,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: {\n          ...state.shoppingLists,\n          items: shoppingListAdapter.removeOne(shoppingList.id, state.shoppingLists.items),\n        },\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.undoDeleteShoppingList,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: {\n          ...state.shoppingLists,\n          items: shoppingListAdapter.addOne(shoppingList, state.shoppingLists.items),\n        },\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.deleteShoppingListSuccess,\n    (state: ShoppingListState, {shoppingList}) => {\n      const copyShoppingListsItems = {...state.shoppingListItems};\n\n      if (copyShoppingListsItems.hasOwnProperty(shoppingList.id)) {\n        delete copyShoppingListsItems[shoppingList.id];\n      }\n\n      return {\n        ...state,\n        shoppingListItems: copyShoppingListsItems,\n      };\n    }\n  )\n)"
            },
            {
                "name": "StringUnion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/models/model.ts",
                "type": "",
                "defaultValue": "<UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n}"
            },
            {
                "name": "SUPPORTED_LANGUAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "",
                "defaultValue": "StringUnion('de', 'en')"
            },
            {
                "name": "taskData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "literal type",
                "defaultValue": "{\n  items: [\n    {id: '1', title: 'Mehl', amount: 1, unit: 'kg', shoppingList: '42'},\n    {id: '2', title: 'Zucker', amount: 50, unit: 'g', shoppingList: '42'},\n    {id: '3', title: 'Eier', amount: 1, unit: 'piece', shoppingList: '42'},\n    {id: '4', title: 'Slaz', amount: 5, unit: 'coffeeSpoon', shoppingList: '42'},\n  ],\n  translations: {\n    de: {\n      piece: '',\n      tableSpoon: 'Esslöffel',\n      coffeeSpoon: 'Kaffelöffel',\n      pinch: 'Prise',\n    }\n  }\n}"
            },
            {
                "name": "taskData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      'shoppingList.addForm.amount': 'Menge',\n      'shoppingList.addForm.product': 'Zucker',\n      'shoppingList.addForm.piece': 'Stück',\n      'shoppingList.addForm.pack': 'Packung',\n      'shoppingList.addForm.addLabel': 'Hinzufügen',\n    }\n  },\n  currentLang: 'de'\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "any",
                "defaultValue": "(args: NavigationComponent) => ({\n  component: NavigationComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "any",
                "defaultValue": "(args: ListHeaderComponent) => ({\n  component: ListHeaderComponent,\n  props: args,\n})"
            },
            {
                "name": "undoDeleteCookbookFromState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Effect] Undo Delete Cookbooks From State',\n  props<{ cookbook: Cookbook }>()\n)"
            },
            {
                "name": "undoDeleteRecipeFromState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[DeleteRecipe Effect] Undo delete Recipe from State',\n  props<{ recipe: Recipe }>())"
            },
            {
                "name": "undoDeleteShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Undo Delete shopping',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "undoDeleteShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] unToggle Shopping List Items',\n  props<{ shoppingListItem: ShoppingListItem}>()\n)"
            },
            {
                "name": "updateShoppingListItemFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Failure',\n  props<{ updateObservables: Observable<ShoppingListItem>[] }>()\n)"
            },
            {
                "name": "updateShoppingListItemSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Success'\n)"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Warning',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    color: 'warn'\n  }\n})"
            },
            {
                "name": "WithAccentButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    buttonText: 'Click',\n    errors: [],\n    color: 'accent',\n    clicked: actionsData.clicked\n  }\n})"
            },
            {
                "name": "WithButtonAndError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    buttonText: 'Click',\n    errors: ['Ooops!', 'An error has occured!'],\n    color: 'accent',\n    clicked: actionsData.clicked\n  }\n})"
            },
            {
                "name": "WithError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: ''\n  }\n})"
            },
            {
                "name": "WithErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    errors: ['An error has occured!'],\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "WithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    label: 'Label',\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "WithObjectValues",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    options: [\n      {key: 'Tesla Key', value: {brand: 'Tesla'}},\n      {key: 'Audi Key', value: {brand: 'Audi'}},\n      {key: 'Skoda', value: {brand: 'Skoda'}},\n      {key: 'BMW', value: {brand: 'BMW'}},\n    ],\n    ...actionsData,\n  }\n})"
            },
            {
                "name": "WithoutLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    label: '',\n    errors: []\n  }\n})"
            },
            {
                "name": "WithPrimaryButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    buttonText: 'Click',\n    errors: [],\n    clicked: actionsData.clicked\n  }\n})"
            }
        ],
        "functions": [
            {
                "name": "addItemAtIndex",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "newItem"
                    },
                    {
                        "name": "items"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "newItem",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "items",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "appInitializer",
                "file": "src/app/app.initializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "authService"
                    },
                    {
                        "name": "i18nService"
                    },
                    {
                        "name": "store"
                    },
                    {
                        "name": "actions$"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "authService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i18nService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "convertCookbookApisToCookbooks",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "cookbooks"
                    }
                ],
                "returnType": "Cookbook[]",
                "jsdoctags": [
                    {
                        "name": "cookbooks",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "convertCookbookApiToCookbook",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "cookbook"
                    }
                ],
                "returnType": "Cookbook",
                "jsdoctags": [
                    {
                        "name": "cookbook",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "convertIngredientApiArrayToRecipeIngredientArray",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "ingredients"
                    }
                ],
                "returnType": "RecipeIngredient[]",
                "jsdoctags": [
                    {
                        "name": "ingredients",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "convertRecipeApiToRecipe",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "recipe"
                    }
                ],
                "returnType": "Recipe",
                "jsdoctags": [
                    {
                        "name": "recipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "convertRecipesApiToRecipes",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "recipes"
                    }
                ],
                "returnType": "Recipe[]",
                "jsdoctags": [
                    {
                        "name": "recipes",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "copyOrCreateArray",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "arrayMap"
                    },
                    {
                        "name": "arrayId"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "arrayMap",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "arrayId",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "createFormControl",
                "file": "src/app/shared/components/input/input.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "FormControl"
            },
            {
                "name": "createFormControl",
                "file": "src/app/shared/components/select/select.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "name"
                    }
                ],
                "returnType": "FormControl",
                "jsdoctags": [
                    {
                        "name": "name",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "decodeJwtToken",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "token"
                    }
                ],
                "returnType": "JwtPayload",
                "jsdoctags": [
                    {
                        "name": "token",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "email",
                "file": "src/app/core/validators/custom-validators.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "control"
                    }
                ],
                "returnType": "literal type | null",
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isJwtTokenExpired",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "token"
                    },
                    {
                        "name": "now"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "token",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "now",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapI18nApiToI18nClient",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "i18nApi"
                    }
                ],
                "returnType": "I18nClient",
                "jsdoctags": [
                    {
                        "name": "i18nApi",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapSelectedIngredientToBasicShoppingListItem",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "ingredient"
                    },
                    {
                        "name": "shoppingListId"
                    }
                ],
                "returnType": "BasicShoppingListItem",
                "jsdoctags": [
                    {
                        "name": "ingredient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shoppingListId",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapUserApiToUserClient",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "userApi"
                    }
                ],
                "returnType": "User",
                "jsdoctags": [
                    {
                        "name": "userApi",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "moveItemInArray",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "array"
                    },
                    {
                        "name": "previousIndex"
                    },
                    {
                        "name": "currentIndex"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "array",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "previousIndex",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentIndex",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sortAlphabetically",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "a"
                    },
                    {
                        "name": "b"
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "a",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "translateValidationErrors",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "formControl"
                    },
                    {
                        "name": "translatePipe"
                    },
                    {
                        "name": "translations"
                    },
                    {
                        "name": "language"
                    }
                ],
                "returnType": "string[]",
                "jsdoctags": [
                    {
                        "name": "formControl",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translations",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "language",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "BasicShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Omit<ShoppingListItem | \"id\" | \"order\">",
                "file": "src/app/core/models/model.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "I18n",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/models/model-api.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "I18n",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/models/model.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "Language",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/models/model.ts",
                "description": "",
                "kind": 164
            },
            {
                "name": "Unit",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"kg\" | \"g\" | \"tableSpoon\" | \"coffeeSpoon\" | \"l\" | \"dl\" | \"ml\" | \"pinch\" | \"piece\" | \"pack\"",
                "file": "src/app/core/models/model.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/shared/components/button/button.stories.ts": [
                {
                    "name": "Accent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Accent',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    color: 'accent'\n  }\n})"
                },
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  clicked: action('clicked')\n}"
                },
                {
                    "name": "buttonData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  text: 'Primary',\n  isDisabled: false,\n  e2eTestName: 'buttonTest'\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: buttonData.text,\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked\n  }\n})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Disabled',\n    isDisabled: true,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n  }\n})"
                },
                {
                    "name": "IconLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Add',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    iconLeft: 'plus'\n  }\n})"
                },
                {
                    "name": "IconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Delete',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    iconRight: 'trash'\n  }\n})"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ButtonComponent,\n  props: {\n    buttonText: 'Warning',\n    isDisabled: buttonData.isDisabled,\n    e2eTestName: buttonData.e2eTestName,\n    clicked: actionsData.clicked,\n    color: 'warn'\n  }\n})"
                }
            ],
            "src/app/core/components/navigation/navigation.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/navigation/navigation.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  logout: action('clicked')\n}"
                },
                {
                    "name": "buttonData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/navigation/navigation.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  isLoggedIn: false,\n  currentLang: 'de',\n  translations: {\n    de: {\n      'app.navigation.login': 'Login',\n      'app.navigation.logout': 'Abmelden',\n      'app.navigation.register': 'Registrieren',\n      'app.navigation.planer': 'Menuplaner',\n      'app.navigation.menus': 'Menüs',\n      'app.navigation.shopping-list': 'Einkaufsliste',\n    }\n  }\n}"
                },
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/navigation/navigation.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: NavigationComponent,\n  props: {\n    ...buttonData,\n    isLoggedIn: true,\n    ...actionsData,\n  }\n})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/navigation/navigation.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: NavigationComponent,\n  props: {\n    ...buttonData,\n    ...actionsData,\n  }\n})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/navigation/navigation.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/navigation/navigation.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: NavigationComponent) => ({\n  component: NavigationComponent,\n  props: args,\n})"
                }
            ],
            "src/app/shared/components/input/input.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  clicked: action('clicked'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    errors: []\n  }\n})"
                },
                {
                    "name": "inputData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  isDisabled: false,\n  e2eTestName: 'test',\n  label: 'Label',\n  errors: ['Ooops!', 'An error has occured!'],\n  placeholder: 'Placeholder',\n  formControl: createFormControl()\n}"
                },
                {
                    "name": "WithAccentButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    buttonText: 'Click',\n    errors: [],\n    color: 'accent',\n    clicked: actionsData.clicked\n  }\n})"
                },
                {
                    "name": "WithButtonAndError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    buttonText: 'Click',\n    errors: ['Ooops!', 'An error has occured!'],\n    color: 'accent',\n    clicked: actionsData.clicked\n  }\n})"
                },
                {
                    "name": "WithError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: ''\n  }\n})"
                },
                {
                    "name": "WithoutLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    label: '',\n    errors: []\n  }\n})"
                },
                {
                    "name": "WithPrimaryButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: InputComponent,\n  props: {\n    ...inputData,\n    placeholder: '',\n    buttonText: 'Click',\n    errors: [],\n    clicked: actionsData.clicked\n  }\n})"
                }
            ],
            "src/app/shared/components/select/select.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  valueChanged: action('valueChanged'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    ...actionsData,\n  }\n})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    isDisabled: true,\n    ...actionsData,\n  }\n})"
                },
                {
                    "name": "inputData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  options: [\n    {key: 'Tesla', value: 'Tesla'},\n    {key: 'Audi', value: 'Audi'},\n    {key: 'Skoda', value: 'Skoda'},\n    {key: 'BMW', value: 'BMW'},\n  ],\n  isDisabled: false,\n}"
                },
                {
                    "name": "WithErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    errors: ['An error has occured!'],\n    ...actionsData,\n  }\n})"
                },
                {
                    "name": "WithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    label: 'Label',\n    ...actionsData,\n  }\n})"
                },
                {
                    "name": "WithObjectValues",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: SelectComponent,\n  props: {\n    ...inputData,\n    options: [\n      {key: 'Tesla Key', value: {brand: 'Tesla'}},\n      {key: 'Audi Key', value: {brand: 'Audi'}},\n      {key: 'Skoda', value: {brand: 'Skoda'}},\n      {key: 'BMW', value: {brand: 'BMW'}},\n    ],\n    ...actionsData,\n  }\n})"
                }
            ],
            "src/app/features/auth/components/auth-form/auth-form.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  credentialsReceived: action('credentialsReceived')\n}"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      email: 'Email Adresse',\n      password: 'Passwort',\n      login: 'Anmelden',\n      register: 'Registrieren',\n      'errors.validation.email.required': 'Bitte geben Sie Ihre Email Adresse ein',\n      'errors.validation.email.pattern': 'Valid Email Format braucht @ ein . dann mindestens 2 Zeichen',\n      'errors.validation.password.required': 'Bitte geben Sie Ihre Passwort ein',\n      'errors.validation.password.minlength': 'Passwort muss mindestens 4 character lang sein',\n      'errors.validation.password.pattern': 'Passwort braucht klein und gross Buchstaben und ein Zahl'\n      }\n    }\n}"
                },
                {
                    "name": "Login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: AuthFormComponent,\n  props: {\n    credentialsReceived: actionsData.credentialsReceived,\n    translations: formData.translations\n  }\n})"
                },
                {
                    "name": "Register",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: AuthFormComponent,\n  props: {\n    credentialsReceived: actionsData.credentialsReceived,\n    translations: formData.translations,\n    buttonText: 'register'\n  }\n})"
                }
            ],
            "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  inputChanged: action('inputChanged'),\n  editRecipe: action('editRecipe'),\n  deleteRecipe: action('deleteRecipe')\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: RecipeListComponent,\n  props: {\n    ...formData,\n    ...actionsData\n  }\n})"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      'input.search': 'Suchen',\n      'button.edit': 'Bearbeiten',\n      'button.delete': 'Löschen'\n    }\n  },\n  recipes: [\n    {\n      id: '1',\n      title: 'Chocolate chip cookie'\n    },\n    {\n      id: '2',\n      title: 'Cheesecake'\n    },\n    {\n      id: '3',\n      title: 'Muffin'\n    }\n  ]\n}"
                }
            ],
            "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  recipeSaved: action('recipeSaved')\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: RecipePageComponent,\n  props: {\n    ...formData,\n    ...actionsData\n  }\n})"
                },
                {
                    "name": "Edit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: RecipePageComponent,\n  props: {\n    ...formData,\n    ...actionsData,\n    recipe: {\n      title: 'Beef & beer pie',\n      url: 'https://www.bbcgoodfood.com/recipes/beef-beer-pie',\n      ingredients: [\n        {\n          name: 'Beer',\n          amount: 1,\n          unit: 'l',\n          isStapleFood: true,\n        },\n        {\n          name: 'Beef',\n          amount: 1,\n          unit: 'kg',\n          isStapleFood: false,\n        }\n      ]\n    }\n  }\n})"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      'recipe-form.placeholder.title': 'Title',\n      'recipe-form.label.title': 'Recipe Title',\n      'recipe-form.placeholder.url': 'Link',\n      'recipe-form.label.url': 'Link to Recipe',\n      'ingredients.label-text': 'Ingredients',\n      'recipe-form.placeholder.amount': 'Quantity',\n      'recipe-form.placeholder.name': 'Name',\n      'recipe-form.text.toggle': 'Basic Ingredient',\n      'recipe-form.button.delete': 'Delete',\n      'recipe-form.button.new-ingredient': 'Add new Ingredient',\n      'recipe-form.button.submit': 'Create',\n      'errors.validation.title.required': 'Titel is required',\n      'recipe-form.button.modify': 'Edit'\n    }\n  }\n}"
                }
            ],
            "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  itemDeleted: action('itemDeleted'),\n  listItemMoved: action('listItemMoved'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ShoppingListComponent,\n  props: {\n    ...taskData,\n    ...actionsData\n  },\n})"
                },
                {
                    "name": "taskData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                    "type": "literal type",
                    "defaultValue": "{\n  items: [\n    {id: '1', title: 'Mehl', amount: 1, unit: 'kg', shoppingList: '42'},\n    {id: '2', title: 'Zucker', amount: 50, unit: 'g', shoppingList: '42'},\n    {id: '3', title: 'Eier', amount: 1, unit: 'piece', shoppingList: '42'},\n    {id: '4', title: 'Slaz', amount: 5, unit: 'coffeeSpoon', shoppingList: '42'},\n  ],\n  translations: {\n    de: {\n      piece: '',\n      tableSpoon: 'Esslöffel',\n      coffeeSpoon: 'Kaffelöffel',\n      pinch: 'Prise',\n    }\n  }\n}"
                }
            ],
            "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  itemAdded: action('itemAdded'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ShoppingListFormComponent,\n  props: {\n    ...taskData,\n    ...actionsData\n  },\n})"
                },
                {
                    "name": "taskData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      'shoppingList.addForm.amount': 'Menge',\n      'shoppingList.addForm.product': 'Zucker',\n      'shoppingList.addForm.piece': 'Stück',\n      'shoppingList.addForm.pack': 'Packung',\n      'shoppingList.addForm.addLabel': 'Hinzufügen',\n    }\n  },\n  currentLang: 'de'\n}"
                }
            ],
            "src/app/core/store/index.ts": [
                {
                    "name": "activeShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists.items.entities[shoppingListState.activeShoppingList || '']\n)"
                },
                {
                    "name": "activeShoppingListId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "GlobalState",
                    "defaultValue": "{\n  appState: initialAppState,\n  cookbookState: initialCookbookState,\n  shoppingListState: initialShoppingListState,\n}"
                },
                {
                    "name": "isActiveShoppingListLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n)"
                },
                {
                    "name": "isLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => !!appState.user && !isJwtTokenExpired(appState.user.jwt)\n)"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "MetaReducer[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "ActionReducerMap<GlobalState>",
                    "defaultValue": "{\n  appState: appStateReducer,\n  shoppingListState: shoppingListReducers,\n  cookbookState: cookbookStateReducer\n}"
                },
                {
                    "name": "selectActiveCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.activeCookbookId)"
                },
                {
                    "name": "selectAppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<GlobalState, AppState>('appState')"
                },
                {
                    "name": "selectCookbooks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.cookbooks)"
                },
                {
                    "name": "selectCookbookState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<GlobalState, CookbookState>('cookbookState')"
                },
                {
                    "name": "selectCurrentLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.language\n)"
                },
                {
                    "name": "selectCurrentShoppingListEntity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => {\n    if (!shoppingListState.activeShoppingList) {\n      return shoppingListItemAdapter.getInitialState();\n    }\n\n    const items = shoppingListState.shoppingListItems[shoppingListState.activeShoppingList];\n\n    if (!items) {\n      return shoppingListItemAdapter.getInitialState();\n    }\n\n    return items;\n  },\n)"
                },
                {
                    "name": "selectCurrentShoppingListItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "shoppingListItemAdapter.getSelectors(selectCurrentShoppingListEntity).selectAll"
                },
                {
                    "name": "selectRecipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.recipes\n)"
                },
                {
                    "name": "selectRequestedUrlBeforeLoginWasRequired",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.requestedUrlBeforeLoginWasRequired\n)"
                },
                {
                    "name": "selectShoppingLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "shoppingListAdapter.getSelectors(selectShoppingListsEntity).selectAll"
                },
                {
                    "name": "selectShoppingListsEntity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists.items\n)"
                },
                {
                    "name": "selectShoppingListState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<GlobalState, ShoppingListState>('shoppingListState')"
                },
                {
                    "name": "selectTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.i18n || {}\n)"
                },
                {
                    "name": "selectUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user\n)"
                },
                {
                    "name": "selectUserID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user?.id,\n)"
                }
            ],
            "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts": [
                {
                    "name": "addShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Add Shopping List Items',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>()\n)"
                },
                {
                    "name": "changeShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Shopping List Container] Change Shopping List', props<{ shoppingListId: string }>())"
                },
                {
                    "name": "createShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Create new ShoppingList',\n  props<{ title: string }>()\n)"
                },
                {
                    "name": "deleteShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Delete shopping list',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "deleteShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Delete Shopping List Items',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "editShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Edit ShoppingList',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "loadShoppingLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Shopping List Container] Load Shopping Lists')"
                },
                {
                    "name": "moveShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Move Shopping List Items',\n  props<{ shoppingListId: string, currentIndex: number, previousIndex: number }>()\n)"
                },
                {
                    "name": "undoDeleteShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Undo Delete shopping',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "undoDeleteShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] unToggle Shopping List Items',\n  props<{ shoppingListItem: ShoppingListItem}>()\n)"
                }
            ],
            "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts": [
                {
                    "name": "addShoppingListItemFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Items Failure',\n  props<{ shoppingListItem: BasicShoppingListItem }>()\n)"
                },
                {
                    "name": "addShoppingListItemSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Items Success',\n  props<{ optimisticId: string, shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "createShoppingListFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Create Shopping List  Failure',\n)"
                },
                {
                    "name": "createShoppingListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Create Shopping List Success',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "deleteShoppingListFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List  Failure',\n)"
                },
                {
                    "name": "deleteShoppingListItemFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Failure',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "deleteShoppingListItemSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Success',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "deleteShoppingListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Success',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "editShoppingListFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Edit Shopping List  Failure',\n)"
                },
                {
                    "name": "editShoppingListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Edit Shopping List Success',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "loadShoppingListItemsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Shopping List API] Load Shopping List Items Failure')"
                },
                {
                    "name": "loadShoppingListItemsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Load Shopping List Items Success',\n  props<{ shoppingListId: string, shoppingListItems: ShoppingListItem[] }>()\n)"
                },
                {
                    "name": "loadShoppingListsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Shopping List API] Load Shopping Lists Failure')"
                },
                {
                    "name": "loadShoppingListsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Load Shopping Lists Success',\n  props<{ shoppingLists: ShoppingList[] }>()\n)"
                },
                {
                    "name": "updateShoppingListItemFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Failure',\n  props<{ updateObservables: Observable<ShoppingListItem>[] }>()\n)"
                },
                {
                    "name": "updateShoppingListItemSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Success'\n)"
                }
            ],
            "src/app/core/store/reducers/app-state.reducers.ts": [
                {
                    "name": "appStateReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/app-state.reducers.ts",
                    "type": "",
                    "defaultValue": "createReducer<AppState, Action>(\n  initialAppState,\n  on(\n    I18nApiActions.getI18nSuccess,\n    (state, {i18n}: { i18n: I18n }) => {\n      return {\n        ...state,\n        i18n: {\n          ...state.i18n,\n          ...i18n\n        }\n      };\n    }),\n  on(\n    AuthApiActions.refreshTokenSuccess,\n    (state, {user}: { user: User }) => {\n      return {\n        ...state,\n        user: {\n          ...user\n        }\n      };\n    }),\n  on(\n    AuthApiActions.refreshTokenFailed,\n    (state) => {\n      return {\n        ...state,\n        user: null\n      };\n    }),\n  on(\n    AuthApiActions.loginSuccess,\n    AuthApiActions.registerSuccess,\n    AuthApiActions.restPasswordSuccess,\n    (state, {user}: { user: User }) => {\n      return {\n        ...state,\n        user: {\n          ...user\n        },\n      };\n    }),\n  on(\n    AuthenticatedGuardActions.setRequestedUrlBeforeLoginWasRequired,\n    (state, {url}: { url: string }) => {\n      return {\n        ...state,\n        requestedUrlBeforeLoginWasRequired: url\n      };\n    }),\n  on(\n    AppInitializationActions.setLanguage,\n    (state, {language}: { language: Language }) => {\n      return {\n        ...state,\n        language,\n      };\n    }),\n  on(\n    ErrorInterceptorActions.logout,\n    NavActions.logout,\n    (state) => {\n      return {\n        ...state,\n        user: null,\n      };\n    }),\n  on(NavActions.changeLanguage, (state: AppState, {language}: { language: Language }) => {\n    return {\n      ...state,\n      language\n    };\n  })\n)"
                }
            ],
            "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts": [
                {
                    "name": "bulkUpdateShoppingListItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Effect] Bulk Update ShoppingList',\n  props<{ shoppingListId: string, shoppingListItems: ShoppingListItem[] }>()\n)"
                },
                {
                    "name": "setActiveShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Effect] Set Active ShoppingList',\n  props<{ shoppingListId: string }>()\n)"
                }
            ],
            "src/app/core/store/actions/navigation.actions.ts": [
                {
                    "name": "changeLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/navigation.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[AppComponent] Change Language', props<{ language: Language }>())"
                },
                {
                    "name": "logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/navigation.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Nav] Logout')"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/features/cookbook/store/reducers/cookbook-state.reducers.ts": [
                {
                    "name": "cookbookStateReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/reducers/cookbook-state.reducers.ts",
                    "type": "",
                    "defaultValue": "createReducer<CookbookState, Action>(\n  initialCookbookState,\n  on(CookbookApiActions.loadCookbookSuccess,\n    (state: CookbookState, {cookbooks}: { cookbooks: Cookbook[] }) => ({\n      ...state,\n      activeCookbookId: state.activeCookbookId ? state.activeCookbookId : cookbooks[0].id,\n      cookbooks\n    })\n  ),\n  on(CookbookApiActions.loadRecipesSuccess, (state: CookbookState, {cookbookId, recipes}: LoadRecipeSuccessAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [cookbookId]: recipes\n      }\n    };\n  }),\n  on(CookbookContainerActions.createRecipe, (state: CookbookState, {optimisticId, recipeToSave}: CreateRecipeAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipeToSave.cookbookId]: [...copyOrCreateArray(state.recipes, recipeToSave.cookbookId), {...recipeToSave, id: optimisticId}]\n      }\n    };\n  }),\n  on(CookbookApiActions.createRecipeSuccess, (state: CookbookState, {optimisticId, recipe}: CreateRecipeSuccessAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: state.recipes[recipe.cookbookId].map((item: Recipe) => {\n          return item.id === optimisticId ? recipe : item;\n        })\n      }\n    };\n  }),\n  on(CookbookApiActions.createRecipeFailure, (state: CookbookState, {optimisticId, cookbookId}: CreateRecipeSuccessFailureAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [cookbookId]: state.recipes[cookbookId].filter((recipe: Recipe) => recipe.id !== optimisticId)\n      }\n    };\n  }),\n  on(CookbookApiActions.editRecipeSuccess, (state: CookbookState, {recipe}: EditRecipeSuccessAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: state.recipes[recipe.cookbookId].map((item: Recipe) => {\n          return item.id === recipe.id ? recipe : item;\n        })\n      }\n    };\n  }),\n  on(CookbookContainerActions.deleteRecipeFromState, (state: CookbookState, {recipeToDelete}: DeleteRecipeFromStateAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipeToDelete.cookbookId]: state.recipes[recipeToDelete.cookbookId].filter((recipe: Recipe) => recipe.id !== recipeToDelete.id)\n      }\n    };\n  }),\n  on(CookbookApiActions.undoDeleteRecipeFromState, (state: CookbookState, {recipe}: UndoDeleteRecipeFromStateAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: addItemAtIndex(recipe, state.recipes[recipe.cookbookId])\n      }\n    };\n  }),\n  on(CookbookContainerActions.selectCookbook, (state: CookbookState, {selectedCookbookId}: CookbookSelectedAction) => {\n    return {\n      ...state,\n      activeCookbookId: selectedCookbookId\n    };\n  }),\n  on(CookbookContainerActions.createCookbook, (state: CookbookState, {optimisticId, title}: CookbookCreatedAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks, {id: optimisticId, title}\n      ]\n    };\n  }),\n  on(CookbookApiActions.createCookbookSuccess, (state: CookbookState, {optimisticId, cookbook}: CookbookCreatedSuccessAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.map((item: Cookbook) => item.id === optimisticId ? cookbook : item)\n      ]\n    };\n  }),\n  on(CookbookApiActions.createCookbookFailure, (state: CookbookState, {optimisticId}: CookbookCreatedFailureAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.filter((item: Cookbook) => item.id !== optimisticId)\n      ]\n    };\n  }),\n  on(CookbookApiActions.editCookbookSuccess, (state: CookbookState, {cookbook}: CookbookEditedSuccessAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.map((item: Cookbook) => item.id === cookbook.id ? cookbook : item)\n      ]\n    };\n  }),\n  on(CookbookContainerActions.deleteCookbookFromState, (state: CookbookState, {cookbook}: CookbookDeletedFromStateAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.filter((item: Cookbook) => item.id !== cookbook.id)\n      ]\n    };\n  }),\n  on(CookbookApiActions.undoDeleteCookbookFromState, (state: CookbookState, {cookbook}: UndoCookbookDeletedFromStateAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...addItemAtIndex(cookbook, state.cookbooks)\n      ]\n    };\n  }),\n)"
                }
            ],
            "src/app/features/cookbook/store/actions/cookbook-container.actions.ts": [
                {
                    "name": "copyIngredientsToShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[CookbookContainer]',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>())"
                },
                {
                    "name": "copyRecipeToMealplaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[CookbookContainer]',\n  props<{ recipe: Recipe }>())"
                },
                {
                    "name": "createCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Create Cookbooks',\n  props<{ optimisticId: string, title: string }>()\n)"
                },
                {
                    "name": "createRecipe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Create Recipe',\n  props<{ optimisticId: string, recipeToSave: Recipe }>()\n)"
                },
                {
                    "name": "deleteCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Delete Cookbooks',\n  props<{ cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "deleteCookbookFromState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Delete Cookbooks From State',\n  props<{ cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "deleteRecipe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Delete Recipe',\n  props<{ recipe: Recipe }>()\n)"
                },
                {
                    "name": "deleteRecipeFromState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Cookbook Container] Delete Recipe from State', props<{ recipeToDelete: Recipe }>())"
                },
                {
                    "name": "editCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Edit Cookbooks',\n  props<{ cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "editRecipe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Edit Recipe',\n  props<{ recipeToEdit: Recipe }>()\n)"
                },
                {
                    "name": "loadCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Cookbook Container] Load Cookbooks')"
                },
                {
                    "name": "loadRecipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Cookbook Container] Get Recipes')"
                },
                {
                    "name": "loadShoppingLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Cookbook Container] Load ShoppingLists from Cookbook Container')"
                },
                {
                    "name": "selectCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Select Cookbook',\n  props<{ selectedCookbookId: string }>()\n)"
                }
            ],
            "src/app/features/cookbook/store/actions/cookbook-api.actions.ts": [
                {
                    "name": "createCookbookFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[createCookbook Effect] Create Cookbooks Failure',\n  props<{ optimisticId: string }>()\n)"
                },
                {
                    "name": "createCookbookSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[createCookbook Effect] Create Cookbooks Success',\n  props<{ optimisticId: string, cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "createRecipeFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[CreateRecipe Effect] Create Recipe Failure',\n  props<{ optimisticId: string, cookbookId: string }>())"
                },
                {
                    "name": "createRecipeSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CreateRecipe Effect] Create Recipe Success',\n  props<{ optimisticId: string, recipe: Recipe }>()\n)"
                },
                {
                    "name": "deleteCookbookSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[deleteCookbook Effect] Delete Cookbooks Success',\n  props<{ cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "deleteRecipeFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[DeleteRecipe Effect] Delete Recipe Failure')"
                },
                {
                    "name": "deleteRecipeSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[DeleteRecipe Effect] Delete Recipe Success',\n  props<{ deletedRecipe: Recipe }>()\n)"
                },
                {
                    "name": "editCookbookFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[editCookbook Effect] Edit Cookbooks Failure')"
                },
                {
                    "name": "editCookbookSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[editCookbook Effect] Edit Cookbooks Success',\n  props<{ cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "editRecipeFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[EditRecipe Effect] Edit Recipe Failure')"
                },
                {
                    "name": "editRecipeSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[EditRecipe Effect] Edit Recipe Success',\n  props<{ recipe: Recipe }>()\n)"
                },
                {
                    "name": "loadCookbookFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[loadCookbook Effect] Load Cookbooks Failure')"
                },
                {
                    "name": "loadCookbookSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[loadCookbook Effect] Load Cookbooks Success',\n  props<{ cookbooks: Cookbook[] }>()\n)"
                },
                {
                    "name": "loadRecipesFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[LoadRecipe Effect] Get Recipes Failure')"
                },
                {
                    "name": "loadRecipesSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[LoadRecipe Effect] Get Recipes Success',\n  props<{ cookbookId: string, recipes: Recipe[] }>()\n)"
                },
                {
                    "name": "setActiveCookbookIdAsQueryParam",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[ChooseActiveCookbookId Effect] Set Active CookbookId As QueryParam',\n  props<{ selectedCookbookId: string }>()\n)"
                },
                {
                    "name": "undoDeleteCookbookFromState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Effect] Undo Delete Cookbooks From State',\n  props<{ cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "undoDeleteRecipeFromState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[DeleteRecipe Effect] Undo delete Recipe from State',\n  props<{ recipe: Recipe }>())"
                }
            ],
            "src/app/shared/components/list-header/list-header.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-header/list-header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DefaultTitle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-header/list-header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {\n    selectedList: {id: 'test', title: ''},\n    lists: [{id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}],\n    defaultTitle: 'Dafault Title',\n    addListLabel: 'Liste Hinufügen',\n    buttonLabel: 'Meine Listen'\n  }\n})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-header/list-header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {}\n})"
                },
                {
                    "name": "MultipleList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-header/list-header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {\n    selectedList: {id: 'test', title: 'My ShoppingList'},\n    lists: [{id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}],\n    defaultTitle: 'Dafault Title',\n    addListLabel: 'Liste Hinufügen',\n    buttonLabel: 'Meine Listen'\n  }\n})"
                },
                {
                    "name": "OneList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-header/list-header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {\n    selectedList: {id: 'test', title: 'My ShoppingList'},\n    lists: [{id: 'test', title: 'My ShoppingList'}],\n    defaultTitle: 'Dafault Title',\n    addListLabel: 'Liste Hinufügen',\n    buttonLabel: 'Meine Listen'\n  }\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-header/list-header.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: ListHeaderComponent) => ({\n  component: ListHeaderComponent,\n  props: args,\n})"
                }
            ],
            "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: AddRecipeDialogComponent,\n  props: {}\n})"
                },
                {
                    "name": "dialogData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.stories.ts",
                    "type": "DialogData<Recipe>",
                    "defaultValue": "{\n  data: {\n    id: '1',\n    title: 'Apple Pie',\n    cookbookId: 'cookbookId',\n    ingredients: [\n      {\n        amount: 1,\n        unit: 'kg',\n        title: 'Apple',\n        isStapleFood: false\n      }\n    ]\n  },\n  translations: {\n    'ingredients.label-text': 'Ingredients',\n    'button.modify': 'Button 1',\n    'button.add-to-mealplaner': 'Button 2'\n  }\n}"
                }
            ],
            "src/app/core/constants/constants.ts": [
                {
                    "name": "DEFAULT_LANGUAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "Language",
                    "defaultValue": "'de'"
                },
                {
                    "name": "DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "string",
                    "defaultValue": "'shopping-list'"
                },
                {
                    "name": "DELETION_DELAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "number",
                    "defaultValue": "3000"
                },
                {
                    "name": "EMAIL_PATTERN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "",
                    "defaultValue": "/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/"
                },
                {
                    "name": "SUPPORTED_LANGUAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "",
                    "defaultValue": "StringUnion('de', 'en')"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  showBetaTeaser: false,\n  apiUrl: 'https://mealplaner.app/api',\n  authUrl: 'https://mealplaner.app/api',\n}"
                }
            ],
            "src/environments/environment.qa.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.qa.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  showBetaTeaser: false,\n  apiUrl: 'https://beta.mealplaner.app/api',\n  authUrl: 'https://beta.mealplaner.app/api',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  showBetaTeaser: true,\n  apiUrl: 'http://localhost:4200/api',\n  authUrl: 'http://localhost:4200',\n}"
                }
            ],
            "src/app/features/auth/store/actions/auth-api.actions.ts": [
                {
                    "name": "forgotPasswordFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Forgot Password Failure')"
                },
                {
                    "name": "forgotPasswordSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Forgot Password Success')"
                },
                {
                    "name": "loginFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth] Login Failure',  props<{ error: string }>())"
                },
                {
                    "name": "loginSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Login Success', props<{ user: User }>())"
                },
                {
                    "name": "logoutFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Logout Failure')"
                },
                {
                    "name": "logoutSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Logout Success')"
                },
                {
                    "name": "refreshTokenFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth App] Refresh Token Failed')"
                },
                {
                    "name": "refreshTokenSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Refresh Token Success', props<{ user: User }>())"
                },
                {
                    "name": "registerFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Register Failure', props<{ error: string }>())"
                },
                {
                    "name": "registerSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Register Success', props<{ user: User }>())"
                },
                {
                    "name": "restPasswordFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Rest Password Failure', props<{ error: string }>())"
                },
                {
                    "name": "restPasswordSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Rest Password Success', props<{ user: User }>())"
                }
            ],
            "src/app/core/store/actions/i18n-api.actions.ts": [
                {
                    "name": "getI18n",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/i18n-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Initialize App] Get i18n')"
                },
                {
                    "name": "getI18nFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/i18n-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Initialize App] Get i18n Failure')"
                },
                {
                    "name": "getI18nSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/i18n-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Initialize App] Get i18n Success',\n  props<{ i18n: I18n }>())"
                }
            ],
            "src/app/core/store/state/app-state.ts": [
                {
                    "name": "initialAppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/state/app-state.ts",
                    "type": "AppState",
                    "defaultValue": "{\n  language: DEFAULT_LANGUAGE,\n  i18n: null,\n  user: null,\n  requestedUrlBeforeLoginWasRequired: null\n}"
                }
            ],
            "src/app/features/cookbook/store/state/cookbook-state.ts": [
                {
                    "name": "initialCookbookState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/state/cookbook-state.ts",
                    "type": "CookbookState",
                    "defaultValue": "{\n  activeCookbookId: '',\n  cookbooks: [],\n  recipes: {}\n}"
                }
            ],
            "src/app/core/store/actions/app-initialization.actions.ts": [
                {
                    "name": "initialized",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/app-initialization.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[App Initialization] App Initialized')"
                },
                {
                    "name": "refreshToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/app-initialization.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[App Initialization] Refresh JWT Token')"
                },
                {
                    "name": "setLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/app-initialization.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[App Initialization] Set Application Startup Language',\n  props<{ language: Language }>())"
                }
            ],
            "src/app/features/shopping-list/store/state/shopping-list-state.ts": [
                {
                    "name": "initialShoppingListState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                    "type": "ShoppingListState",
                    "defaultValue": "{\n  shoppingLists: {\n    items: shoppingListAdapter.getInitialState(),\n  },\n  shoppingListItems: {},\n  activeShoppingList: undefined,\n}"
                },
                {
                    "name": "shoppingListAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                    "type": "",
                    "defaultValue": "createEntityAdapter<ShoppingList>({\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n})"
                },
                {
                    "name": "shoppingListItemAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                    "type": "",
                    "defaultValue": "createEntityAdapter<ShoppingListItem>({\n  sortComparer: ((a, b) => (b.order || Number.MAX_VALUE) - (a.order || Number.MAX_VALUE)),\n})"
                }
            ],
            "src/app/features/auth/store/actions/login-page.actions.ts": [
                {
                    "name": "login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/login-page.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Login Page] Login',\n  props<{ credentials: LoginCredentials }>())"
                }
            ],
            "src/app/core/store/actions/error-interceptor.actions.ts": [
                {
                    "name": "logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/error-interceptor.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Error Interceptor] Logout')"
                }
            ],
            "src/app/features/auth/store/actions/login-service.actions.ts": [
                {
                    "name": "refreshToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/login-service.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth Service] Refresh Token')"
                }
            ],
            "src/app/features/auth/store/actions/register-container.actions.ts": [
                {
                    "name": "register",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/register-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Register Container] Register',\n  props<{ credentials: RegisterCredentials }>())"
                }
            ],
            "src/app/features/auth/store/actions/forgot-password-container.actions.ts": [
                {
                    "name": "requestEmail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/forgot-password-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Forgot Password Container] Request Reset Email',\n  props<{ email: string }>())"
                }
            ],
            "src/app/features/auth/store/actions/reset-password-container.actions.ts": [
                {
                    "name": "resetPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/reset-password-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Reset Password Container] Reset Password',\n  props<{ password: string, resetPasswordToken: string }>())"
                }
            ],
            "src/app/core/store/actions/auth-guard.actions.ts": [
                {
                    "name": "setRequestedUrlBeforeLoginWasRequired",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/auth-guard.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth Guard] Set Set Requested Url Before Login Was Required',\n  props<{ url: string }>())"
                }
            ],
            "src/app/features/shopping-list/store/reducers/shopping-list.reducers.ts": [
                {
                    "name": "shoppingListReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/reducers/shopping-list.reducers.ts",
                    "type": "",
                    "defaultValue": "createReducer<ShoppingListState, Action>(\n  initialShoppingListState,\n  on(\n    ShoppingListApiActions.loadShoppingListsSuccess,\n    (state: ShoppingListState, {shoppingLists}: LoadShoppingListsSuccessAction) => {\n      return {\n        ...state,\n        shoppingLists: {\n          items: shoppingListAdapter.addMany(shoppingLists, state.shoppingLists.items),\n        }\n      };\n    }),\n  on(\n    ShoppingListEffectActions.setActiveShoppingList,\n    ShoppingListContainerActions.changeShoppingList,\n    (state: ShoppingListState, {shoppingListId}: ChangeShoppingListAction | SetActiveShoppingListAction) => {\n      return {\n        ...state,\n        activeShoppingList: shoppingListId || undefined,\n      };\n    }),\n  on(\n    ShoppingListApiActions.loadShoppingListItemsSuccess,\n    (state: ShoppingListState, {shoppingListId, shoppingListItems}: LoadShoppingListItemsSuccessAction) => {\n      return {\n        ...state,\n        shoppingLists: {\n          items: shoppingListAdapter.updateOne({id: shoppingListId, changes: {isInitialized: true}}, state.shoppingLists.items),\n        },\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListId]: shoppingListItemAdapter.addMany(shoppingListItems, shoppingListItemAdapter.getInitialState()),\n        }\n      };\n    }),\n  on(\n    ShoppingListContainerActions.addShoppingListItem,\n    (state: ShoppingListState, {optimisticId, shoppingListItem}: AddShoppingListItemAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.addOne(\n            {id: optimisticId, ...shoppingListItem},\n            state.shoppingListItems[shoppingListItem.shoppingList])\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.addShoppingListItemSuccess,\n    (state: ShoppingListState, action: AddShoppingListItemSuccessAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [action.shoppingListItem.shoppingList]: shoppingListItemAdapter.updateOne(\n            {id: action.optimisticId, changes: action.shoppingListItem},\n            state.shoppingListItems[action.shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.deleteShoppingListItem,\n    (state: ShoppingListState, {shoppingListItem}: DeleteShoppingListItemAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.removeOne(\n            shoppingListItem.id,\n            state.shoppingListItems[shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.undoDeleteShoppingListItem,\n    (state: ShoppingListState, {shoppingListItem}) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.addOne(\n            shoppingListItem,\n            state.shoppingListItems[shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListEffectActions.bulkUpdateShoppingListItems,\n    (state: ShoppingListState, {shoppingListItems, shoppingListId}) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListId]: shoppingListItemAdapter.updateMany(\n            shoppingListItems.map(shoppingListItem => ({id: shoppingListItem.id, changes: shoppingListItem})),\n            state.shoppingListItems[shoppingListId]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.createShoppingListSuccess,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: {\n          items: shoppingListAdapter.addOne(shoppingList, state.shoppingLists.items),\n        },\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingList.id]: shoppingListItemAdapter.getInitialState(),\n        },\n        activeShoppingList: shoppingList.id,\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.editShoppingList,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: {\n          items: shoppingListAdapter.updateOne({id: shoppingList.id, changes: shoppingList}, state.shoppingLists.items),\n        },\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.deleteShoppingList,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: {\n          ...state.shoppingLists,\n          items: shoppingListAdapter.removeOne(shoppingList.id, state.shoppingLists.items),\n        },\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.undoDeleteShoppingList,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: {\n          ...state.shoppingLists,\n          items: shoppingListAdapter.addOne(shoppingList, state.shoppingLists.items),\n        },\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.deleteShoppingListSuccess,\n    (state: ShoppingListState, {shoppingList}) => {\n      const copyShoppingListsItems = {...state.shoppingListItems};\n\n      if (copyShoppingListsItems.hasOwnProperty(shoppingList.id)) {\n        delete copyShoppingListsItems[shoppingList.id];\n      }\n\n      return {\n        ...state,\n        shoppingListItems: copyShoppingListsItems,\n      };\n    }\n  )\n)"
                }
            ],
            "src/app/core/models/model.ts": [
                {
                    "name": "StringUnion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/models/model.ts",
                    "type": "",
                    "defaultValue": "<UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/helpers/helpers.ts": [
                {
                    "name": "addItemAtIndex",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "newItem"
                        },
                        {
                            "name": "items"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "newItem",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertCookbookApisToCookbooks",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "cookbooks"
                        }
                    ],
                    "returnType": "Cookbook[]",
                    "jsdoctags": [
                        {
                            "name": "cookbooks",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertCookbookApiToCookbook",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "cookbook"
                        }
                    ],
                    "returnType": "Cookbook",
                    "jsdoctags": [
                        {
                            "name": "cookbook",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertIngredientApiArrayToRecipeIngredientArray",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "ingredients"
                        }
                    ],
                    "returnType": "RecipeIngredient[]",
                    "jsdoctags": [
                        {
                            "name": "ingredients",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertRecipeApiToRecipe",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "recipe"
                        }
                    ],
                    "returnType": "Recipe",
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "convertRecipesApiToRecipes",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "recipes"
                        }
                    ],
                    "returnType": "Recipe[]",
                    "jsdoctags": [
                        {
                            "name": "recipes",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "copyOrCreateArray",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "arrayMap"
                        },
                        {
                            "name": "arrayId"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "arrayMap",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "arrayId",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decodeJwtToken",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "token"
                        }
                    ],
                    "returnType": "JwtPayload",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isJwtTokenExpired",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "token"
                        },
                        {
                            "name": "now"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "now",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapI18nApiToI18nClient",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "i18nApi"
                        }
                    ],
                    "returnType": "I18nClient",
                    "jsdoctags": [
                        {
                            "name": "i18nApi",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapSelectedIngredientToBasicShoppingListItem",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "ingredient"
                        },
                        {
                            "name": "shoppingListId"
                        }
                    ],
                    "returnType": "BasicShoppingListItem",
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shoppingListId",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapUserApiToUserClient",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "userApi"
                        }
                    ],
                    "returnType": "User",
                    "jsdoctags": [
                        {
                            "name": "userApi",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveItemInArray",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "array"
                        },
                        {
                            "name": "previousIndex"
                        },
                        {
                            "name": "currentIndex"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "previousIndex",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentIndex",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sortAlphabetically",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "a"
                        },
                        {
                            "name": "b"
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateValidationErrors",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "formControl"
                        },
                        {
                            "name": "translatePipe"
                        },
                        {
                            "name": "translations"
                        },
                        {
                            "name": "language"
                        }
                    ],
                    "returnType": "string[]",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "translatePipe",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "translations",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "language",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.initializer.ts": [
                {
                    "name": "appInitializer",
                    "file": "src/app/app.initializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "authService"
                        },
                        {
                            "name": "i18nService"
                        },
                        {
                            "name": "store"
                        },
                        {
                            "name": "actions$"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "authService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i18nService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "store",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actions$",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/shared/components/input/input.stories.ts": [
                {
                    "name": "createFormControl",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "FormControl"
                }
            ],
            "src/app/shared/components/select/select.stories.ts": [
                {
                    "name": "createFormControl",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "name"
                        }
                    ],
                    "returnType": "FormControl",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/core/validators/custom-validators.validator.ts": [
                {
                    "name": "email",
                    "file": "src/app/core/validators/custom-validators.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "control"
                        }
                    ],
                    "returnType": "literal type | null",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/core/models/model.ts": [
                {
                    "name": "BasicShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Omit<ShoppingListItem | \"id\" | \"order\">",
                    "file": "src/app/core/models/model.ts",
                    "description": "",
                    "kind": 161
                },
                {
                    "name": "I18n",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/models/model.ts",
                    "description": "",
                    "kind": 165
                },
                {
                    "name": "Language",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/models/model.ts",
                    "description": "",
                    "kind": 164
                },
                {
                    "name": "Unit",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"kg\" | \"g\" | \"tableSpoon\" | \"coffeeSpoon\" | \"l\" | \"dl\" | \"ml\" | \"pinch\" | \"piece\" | \"pack\"",
                    "file": "src/app/core/models/model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/core/models/model-api.ts": [
                {
                    "name": "I18n",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/models/model-api.ts",
                    "description": "",
                    "kind": 165
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/features/auth/auth-routing.module.ts",
                "module": "AuthRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginContainerComponent",
                        "canActivate": [
                            "LoggedOutGuard"
                        ]
                    },
                    {
                        "path": "register",
                        "component": "RegisterContainerComponent",
                        "canActivate": [
                            "LoggedOutGuard"
                        ]
                    },
                    {
                        "path": "forgot",
                        "component": "ForgotPasswordContainerComponent",
                        "canActivate": [
                            "LoggedOutGuard"
                        ]
                    },
                    {
                        "path": "reset",
                        "component": "ResetPasswordContainerComponent",
                        "canActivate": [
                            "LoggedOutGuard"
                        ]
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/features/cookbook/cookbook-routing.module.ts",
                "module": "CookbookRoutingModule",
                "children": [
                    {
                        "path": "",
                        "canActivate": [
                            "AuthenticatedGuard"
                        ],
                        "component": "CookbookContainerComponent"
                    },
                    {
                        "path": "recipe/:id",
                        "canActivate": [
                            "AuthenticatedGuard"
                        ],
                        "component": "RecipeContainerComponent"
                    },
                    {
                        "path": "recipe",
                        "canActivate": [
                            "AuthenticatedGuard"
                        ],
                        "component": "RecipeContainerComponent"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/features/shopping-list/shopping-list-routing.module.ts",
                "module": "ShoppingListRoutingModule",
                "children": [
                    {
                        "path": "shopping-list",
                        "component": "ShoppingListContainerComponent",
                        "canActivate": [
                            "AuthenticatedGuard"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/app.initializer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "appInitializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/beta-teaser/beta-teaser.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BetaTeaserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_LANGUAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETION_DELAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMAIL_PATTERN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SUPPORTED_LANGUAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/authenticated.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthenticatedGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/logged-out.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LoggedOutGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "addItemAtIndex",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "convertCookbookApisToCookbooks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "convertCookbookApiToCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "convertIngredientApiArrayToRecipeIngredientArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "convertRecipeApiToRecipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "convertRecipesApiToRecipes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "copyOrCreateArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "decodeJwtToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isJwtTokenExpired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapI18nApiToI18nClient",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapSelectedIngredientToBasicShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapUserApiToUserClient",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "moveItemInArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "sortAlphabetically",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "translateValidationErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/jwt.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddShoppingListItemAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddShoppingListItemSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChangeShoppingListAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookCreatedAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookCreatedFailureAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookCreatedSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookDeletedFromStateAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookEditedSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookSelectedAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateRecipeAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateRecipeSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateRecipeSuccessFailureAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteRecipeFromStateAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteRecipeSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteShoppingListItemAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EditRecipeSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadRecipeSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadShoppingListItemsSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadShoppingListsSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginFailureAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SetActiveCookbookIdAsQueryParamAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SetActiveShoppingListAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SetActiveShoppingListAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SetLanguageAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListItemMovedAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UndoCookbookDeletedFromStateAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UndoDeleteRecipeFromStateAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookApi",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IngredientApi",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RecipeApi",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListItemApi",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Translations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserApi",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddShoppingListItemEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArrayItemMovedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Cookbook",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateListDialogEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteShoppingListItemEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EditListDialogEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Ingredient",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JwtPayload",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JwtRefreshResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "List",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListPickerDialogEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginCredentials",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Recipe",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RecipeIngredient",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RecipeViewDialogEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterCredentials",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectedIngredient",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListItemMovedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Translations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StringUnion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/i18n.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "I18nService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/snackbar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/app-initialization.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialized",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/app-initialization.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/app-initialization.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/auth-guard.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setRequestedUrlBeforeLoginWasRequired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/error-interceptor.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/i18n-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getI18n",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/i18n-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getI18nFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/i18n-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getI18nSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/navigation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changeLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/navigation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/effects/app.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GlobalState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activeShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activeShoppingListId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isActiveShoppingListLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCookbooks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCookbookState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentShoppingListEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentShoppingListItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRecipes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRequestedUrlBeforeLoginWasRequired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShoppingLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShoppingListsEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShoppingListState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/app-state.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appStateReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/app-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/app-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/validators/custom-validators.validator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "email",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/auth-form/auth-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Register",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/containers/forgot-password-container/forgot-password-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/containers/login-container/login-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/containers/register-container/register-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/containers/reset-password-container/reset-password-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/pages/forgot-password-page/forgot-password-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/pages/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/pages/regsiter-page/register-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/pages/reset-password-page/reset-password-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "forgotPasswordFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "forgotPasswordSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logoutFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logoutSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshTokenFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshTokenSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "restPasswordFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "restPasswordSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/forgot-password-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requestEmail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/login-page.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/login-service.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/register-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "register",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/reset-password-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/effects/auth-api.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthApiEffects",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddRecipeDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dialogData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/recipe-list/recipe-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/containers/cookbook-container/cookbook-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CookbookContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/containers/recipe-container/recipe-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/pages/cookbook-page/cookbook-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CookbookPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/pages/recipe-page/recipe-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Edit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/pages/recipe-page/recipe-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/services/cookbook.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CookbookService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/services/recipe.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RecipeService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createCookbookFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createCookbookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createRecipeFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createRecipeSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteCookbookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteRecipeFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteRecipeSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editCookbookFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editCookbookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editRecipeFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editRecipeSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCookbookFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCookbookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRecipesFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRecipesSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setActiveCookbookIdAsQueryParam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoDeleteCookbookFromState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoDeleteRecipeFromState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "copyIngredientsToShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "copyRecipeToMealplaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createRecipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteCookbookFromState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteRecipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteRecipeFromState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editRecipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRecipes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/effects/cookbook.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CookbookEffects",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/reducers/cookbook-state.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cookbookStateReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/state/cookbook-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/state/cookbook-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialCookbookState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/containers/mealplaner-container/mealplaner-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MealplanerContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/product-info/containers/product-page-container/product-page-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductPageContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/product-info/pages/product-page/product-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "taskData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list/shopping-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "taskData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/containers/shopping-list-container/shopping-list-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/pages/shopping-list-page/shopping-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/service/shopping-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingListService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShoppingListItemFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShoppingListItemSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createShoppingListFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createShoppingListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListItemFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListItemSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editShoppingListFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editShoppingListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingListItemsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingListItemsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingListsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingListsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateShoppingListItemFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateShoppingListItemSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changeShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moveShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoDeleteShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoDeleteShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bulkUpdateShoppingListItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setActiveShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/effects/shopping-list-api.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingListApiEffects",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/reducers/shopping-list.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shoppingListReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialShoppingListState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shoppingListAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shoppingListItemAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Accent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/edit-list-dialog/edit-list-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditListDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "inputData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithAccentButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithButtonAndError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithPrimaryButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OneList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-picker-dialog/list-picker-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListPickerDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "createFormControl",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "inputData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithObjectValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/translate.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TranslatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.qa.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "testing/router-link-directive.stub.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RouterLinkDirectiveStub",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            }
        ]
    }
}
