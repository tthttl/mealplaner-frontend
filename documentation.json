{
    "pipes": [
        {
            "name": "TranslatePipe",
            "id": "pipe-TranslatePipe-34054ae509045d1556d03e7bf9e757bd",
            "file": "src/app/shared/pipes/translate.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "i18n",
                            "type": "I18n | null"
                        },
                        {
                            "name": "language",
                            "type": "Language | null",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i18n",
                            "type": "I18n | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "language",
                            "type": "Language | null",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "translate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport { Language, I18n } from '../../core/models/model';\nimport { DEFAULT_LANGUAGE } from '../../core/constants/constants';\n\n\n@Pipe({name: 'translate'})\nexport class TranslatePipe implements PipeTransform {\n  transform(key: string, i18n: I18n | null, language?: Language | null): string {\n    return (i18n && i18n[language || DEFAULT_LANGUAGE] && i18n[language || DEFAULT_LANGUAGE][key]) ?? key;\n  }\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "AddMealDialogEvent",
            "id": "interface-AddMealDialogEvent-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "event",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "mealType",
                    "type": "MealType",
                    "optional": false,
                    "description": "",
                    "line": 161
                },
                {
                    "name": "recipe",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 162
                },
                {
                    "name": "shoppingListItems",
                    "type": "BasicShoppingListItem[]",
                    "optional": false,
                    "description": "",
                    "line": 163
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AddShoppingListItemAction",
            "id": "interface-AddShoppingListItemAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "shoppingListItem",
                    "type": "BasicShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AddShoppingListItemEvent",
            "id": "interface-AddShoppingListItemEvent-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "shoppingListItem",
                    "type": "ShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AddShoppingListItemSuccessAction",
            "id": "interface-AddShoppingListItemSuccessAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "shoppingListItem",
                    "type": "ShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-12548dff8d98ad08ca3ff028a711cc7a",
            "file": "src/app/core/store/state/app-state.ts",
            "type": "interface",
            "sourceCode": "import { DEFAULT_LANGUAGE } from '../../constants/constants';\nimport { I18n, Language, User } from '../../models/model';\n\nexport interface AppState {\n  readonly language: Language;\n  readonly i18n: I18n | null;\n  readonly user: User | null;\n  readonly requestedUrlBeforeLoginWasRequired: string | null;\n  readonly isOffline: boolean;\n}\n\nexport const initialAppState: AppState = {\n  language: DEFAULT_LANGUAGE,\n  i18n: null,\n  user: null,\n  requestedUrlBeforeLoginWasRequired: null,\n  isOffline: false,\n};\n",
            "properties": [
                {
                    "name": "i18n",
                    "type": "I18n | null",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "isOffline",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "language",
                    "type": "Language",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "requestedUrlBeforeLoginWasRequired",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ArrayItemMovedEvent",
            "id": "interface-ArrayItemMovedEvent-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "currentIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "previousIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ChangeShoppingListAction",
            "id": "interface-ChangeShoppingListAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Cookbook",
            "id": "interface-Cookbook-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 140,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 141,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookCreatedAction",
            "id": "interface-CookbookCreatedAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 117
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookCreatedFailureAction",
            "id": "interface-CookbookCreatedFailureAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 129
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookCreatedSuccessAction",
            "id": "interface-CookbookCreatedSuccessAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "cookbook",
                    "type": "Cookbook",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 123
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookDeletedFromStateAction",
            "id": "interface-CookbookDeletedFromStateAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "cookbook",
                    "type": "Cookbook",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 139
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookEditedSuccessAction",
            "id": "interface-CookbookEditedSuccessAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "cookbook",
                    "type": "Cookbook",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 134
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookSelectedAction",
            "id": "interface-CookbookSelectedAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "selectedCookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 112
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CookbookState",
            "id": "interface-CookbookState-269807f576ca8a91be70d6c6e1209922",
            "file": "src/app/features/cookbook/store/state/cookbook-state.ts",
            "type": "interface",
            "sourceCode": "import { Cookbook, Recipe } from '../../../../core/models/model';\n\nexport interface CookbookState {\n  readonly activeCookbookId: string;\n  readonly cookbooks: Cookbook[];\n  readonly recipes: {\n    [cookbookId: string]: Recipe[]\n  };\n}\n\nexport const initialCookbookState: CookbookState = {\n  activeCookbookId: '',\n  cookbooks: [],\n  recipes: {}\n};\n",
            "properties": [
                {
                    "name": "activeCookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "cookbooks",
                    "type": "Cookbook[]",
                    "optional": false,
                    "description": "",
                    "line": 5,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "recipes",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CreateListDialogEvent",
            "id": "interface-CreateListDialogEvent-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "event",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 150
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 151
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CreateRecipeAction",
            "id": "interface-CreateRecipeAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "recipeToSave",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CreateRecipeSuccessAction",
            "id": "interface-CreateRecipeSuccessAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "recipe",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CreateRecipeSuccessFailureAction",
            "id": "interface-CreateRecipeSuccessFailureAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "cookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "optimisticId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DeleteRecipeFromStateAction",
            "id": "interface-DeleteRecipeFromStateAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "recipeToDelete",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DeleteRecipeSuccessAction",
            "id": "interface-DeleteRecipeSuccessAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "deletedRecipe",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DeleteShoppingListItemAction",
            "id": "interface-DeleteShoppingListItemAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingListItem",
                    "type": "ShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DeleteShoppingListItemEvent",
            "id": "interface-DeleteShoppingListItemEvent-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "shoppingListItem",
                    "type": "ShoppingListItem",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "DialogData",
            "id": "interface-DialogData-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "data",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 135,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "translations",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 136,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "EditListDialogEvent",
            "id": "interface-EditListDialogEvent-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "event",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "list",
                    "type": "List",
                    "optional": false,
                    "description": "",
                    "line": 156
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "EditRecipeSuccessAction",
            "id": "interface-EditRecipeSuccessAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "recipe",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "GlobalState",
            "id": "interface-GlobalState-a5d99d3986431bfa0e734dbdad229a04",
            "file": "src/app/core/store/index.ts",
            "type": "interface",
            "sourceCode": "import { ActionReducerMap, createFeatureSelector, createSelector, MetaReducer } from '@ngrx/store';\nimport { format } from 'date-fns';\nimport { cookbookStateReducer } from '../../features/cookbook/store/reducers/cookbook-state.reducers';\nimport { CookbookState, initialCookbookState } from '../../features/cookbook/store/state/cookbook-state';\nimport { mealPlanerStateReducers } from '../../features/meal-planer/store/reducers/meal-paner-state.reducers';\nimport { initialMealPlanerState, mealPlanerAdapter, MealPlanerState } from '../../features/meal-planer/store/state/meal-planer-state';\nimport { shoppingListReducers } from '../../features/shopping-list/store/reducers/shopping-list.reducers';\nimport {\n  initialShoppingListState,\n  shoppingListAdapter,\n  shoppingListItemAdapter,\n  ShoppingListState\n} from '../../features/shopping-list/store/state/shopping-list-state';\nimport { isJwtTokenExpired } from '../helpers/helpers';\nimport { Cookbook, DayPlan, Recipe } from '../models/model';\nimport { appStateReducer } from './reducers/app-state.reducers';\nimport { AppState, initialAppState } from './state/app-state';\n\nexport interface GlobalState {\n  appState: AppState;\n  cookbookState: CookbookState;\n  shoppingListState: ShoppingListState;\n  mealPlanerState: MealPlanerState;\n}\n\nexport const initialState: GlobalState = {\n  appState: initialAppState,\n  cookbookState: initialCookbookState,\n  shoppingListState: initialShoppingListState,\n  mealPlanerState: initialMealPlanerState,\n};\n\nexport const reducers: ActionReducerMap<GlobalState> = {\n  appState: appStateReducer,\n  shoppingListState: shoppingListReducers,\n  cookbookState: cookbookStateReducer,\n  mealPlanerState: mealPlanerStateReducers,\n};\n\nexport const metaReducers: MetaReducer<GlobalState>[] = [];\n\nexport const selectAppState = createFeatureSelector<GlobalState, AppState>('appState');\nexport const selectCookbookState =\n  createFeatureSelector<GlobalState, CookbookState>('cookbookState');\nexport const selectShoppingListState = createFeatureSelector<GlobalState, ShoppingListState>('shoppingListState');\nexport const selectMealPlanerState = createFeatureSelector<GlobalState, MealPlanerState>('mealPlanerState');\n\nexport const selectTranslations = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.i18n || {}\n);\n\nexport const selectRecipes = createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.recipes\n);\n\nexport const selectCurrentLanguage = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.language\n);\n\nexport const selectUser = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user\n);\n\nexport const selectRequestedUrlBeforeLoginWasRequired = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.requestedUrlBeforeLoginWasRequired\n);\n\nexport const selectUserID = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user?.id,\n);\n\nexport const isLoggedIn = createSelector(\n  selectAppState,\n  (appState: AppState) => !!appState.user && !isJwtTokenExpired(appState.user.jwt)\n);\n\nexport const selectShoppingListsEntity = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists\n);\n\nexport const selectShoppingLists = shoppingListAdapter.getSelectors(selectShoppingListsEntity).selectAll;\n\nexport const activeShoppingList = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists.entities[shoppingListState.activeShoppingList || '']\n);\n\nexport const activeShoppingListId = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n);\n\nexport const isActiveShoppingListLoading = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n);\n\n\nexport const selectCurrentShoppingListEntity = createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => {\n    if (!shoppingListState.activeShoppingList) {\n      return shoppingListItemAdapter.getInitialState();\n    }\n\n    const items = shoppingListState.shoppingListItems[shoppingListState.activeShoppingList];\n\n    if (!items) {\n      return shoppingListItemAdapter.getInitialState();\n    }\n\n    return items;\n  },\n);\n\nexport const selectCurrentShoppingListItems = shoppingListItemAdapter.getSelectors(selectCurrentShoppingListEntity).selectAll;\n\nexport const selectCookbooks = createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.cookbooks);\n\nexport const selectActiveCookbookId = createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.activeCookbookId);\n\nexport const selectedCookbook = createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => {\n    if (cookbookState.activeCookbookId) {\n      return cookbookState.cookbooks.find((cookbook: Cookbook) => cookbook.id === cookbookState.activeCookbookId);\n    } else {\n      return cookbookState.cookbooks[0];\n    }\n  });\n\nexport const selectedRecipe = (selectedCookbookId: string, recipeId: string) => createSelector(\n  (state: GlobalState) => state.cookbookState,\n  (cookbookState: CookbookState) => {\n    const recipesOfCookbook = cookbookState.recipes[selectedCookbookId];\n    if (recipesOfCookbook) {\n      return recipesOfCookbook.find((recipe: Recipe) => recipe.id === recipeId);\n    }\n    return undefined;\n  });\n\nexport const selectActiveCookbookRecipes = createSelector(\n  (state: GlobalState) => state.cookbookState,\n  (cookbookState: CookbookState) => {\n    if (!cookbookState.activeCookbookId) {\n      return undefined;\n    }\n\n    return cookbookState.recipes[cookbookState.activeCookbookId];\n  });\n\nexport const selectSelectedDate = createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.selectedDate);\n\nexport const selectMealPlanerEntity = createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.mealPlaners\n);\n\nexport const selectMealPlaners = mealPlanerAdapter.getSelectors(selectMealPlanerEntity).selectAll;\n\nexport const activeMealPlaner = createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.mealPlaners.entities[mealPlanerState.activeMealPlaner || '']\n);\n\nexport const activeMealPlanerId = createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.activeMealPlaner\n);\n\nexport const isActiveMealPlanerLoading = createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.activeMealPlaner\n);\n\nexport const activeDayPlan = createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => {\n    const currentMealPlaner = mealPlanerState.activeMealPlaner;\n    if (!currentMealPlaner) {\n      return null;\n    }\n    const currentMeals = mealPlanerState.meals[currentMealPlaner] as { [key: string]: DayPlan };\n    if (!currentMeals) {\n      return null;\n    }\n    const currentDayPlan = currentMeals[format(mealPlanerState.selectedDate, 'yyyy-MM-dd')];\n    if (!currentDayPlan) {\n      return null;\n    }\n    return currentDayPlan;\n  }\n);\n\nexport const isOffline = createSelector(\n  selectAppState,\n  (appState: AppState) => appState.isOffline\n);\n",
            "properties": [
                {
                    "name": "appState",
                    "type": "AppState",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "cookbookState",
                    "type": "CookbookState",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "mealPlanerState",
                    "type": "MealPlanerState",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "shoppingListState",
                    "type": "ShoppingListState",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Ingredient",
            "id": "interface-Ingredient-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "amount",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "unit",
                    "type": "Unit",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "JwtPayload",
            "id": "interface-JwtPayload-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "exp",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "iat",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "JwtRefreshResponse",
            "id": "interface-JwtRefreshResponse-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "ok",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 94
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Link",
            "id": "interface-Link-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "icon",
                    "type": "IconName",
                    "optional": false,
                    "description": "",
                    "line": 179
                },
                {
                    "name": "key",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 177
                },
                {
                    "name": "path",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 178
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "List",
            "id": "interface-List-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ListPickerDialogEvent",
            "id": "interface-ListPickerDialogEvent-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "event",
                    "type": "\"select\" | \"create\" | \"edit\" | \"delete\"",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "list",
                    "type": "List",
                    "optional": true,
                    "description": "",
                    "line": 146
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoadRecipesSuccessAction",
            "id": "interface-LoadRecipesSuccessAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "cookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "recipes",
                    "type": "Recipe[]",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoadRecipeSuccessAction",
            "id": "interface-LoadRecipeSuccessAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "recipe",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 155
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 154
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoadShoppingListItemsSuccessAction",
            "id": "interface-LoadShoppingListItemsSuccessAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "shoppingListItems",
                    "type": "ShoppingListItem[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoadShoppingListsSuccessAction",
            "id": "interface-LoadShoppingListsSuccessAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingLists",
                    "type": "ShoppingList[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoginAction",
            "id": "interface-LoginAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "credentials",
                    "type": "LoginCredentials",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoginCredentials",
            "id": "interface-LoginCredentials-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "identifier",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "LoginFailureAction",
            "id": "interface-LoginFailureAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "error",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 160
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 159
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Meal",
            "id": "interface-Meal-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "date",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 186
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 184
                },
                {
                    "name": "recipe",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 187
                },
                {
                    "name": "type",
                    "type": "MealType",
                    "optional": false,
                    "description": "",
                    "line": 185
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MealPlaner",
            "id": "interface-MealPlaner-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 195
                },
                {
                    "name": "isInitialized",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 197
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 196
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MealPlanerAddEvent",
            "id": "interface-MealPlanerAddEvent-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "recipe",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 201
                },
                {
                    "name": "shoppingListItems",
                    "type": "BasicShoppingListItem[]",
                    "optional": false,
                    "description": "",
                    "line": 202
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "MealPlanerState",
            "id": "interface-MealPlanerState-3e7bd10f03d1c6a5746ec20c51f9ffb6",
            "file": "src/app/features/meal-planer/store/state/meal-planer-state.ts",
            "type": "interface",
            "sourceCode": "import { createEntityAdapter } from '@ngrx/entity';\nimport { DayPlan, MealPlaner } from '../../../../core/models/model';\nimport { EntityState } from '@ngrx/entity/src/models';\n\nexport const mealPlanerAdapter = createEntityAdapter<MealPlaner>({\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n});\n\n\nexport interface MealPlanerState {\n  readonly selectedDate: Date;\n  readonly mealPlaners: EntityState<MealPlaner>;\n  readonly meals: {\n    [key: string]: {\n      [key: string]: DayPlan\n    };\n  };\n  readonly activeMealPlaner: string | undefined;\n}\n\nexport const initialMealPlanerState: MealPlanerState = {\n  selectedDate: new Date(),\n  mealPlaners: mealPlanerAdapter.getInitialState(),\n  meals: {},\n  activeMealPlaner: undefined,\n};\n\n",
            "properties": [
                {
                    "name": "activeMealPlaner",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "mealPlaners",
                    "type": "EntityState<MealPlaner>",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "meals",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "selectedDate",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Recipe",
            "id": "interface-Recipe-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "cookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "ingredients",
                    "type": "RecipeIngredient[]",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 128
                },
                {
                    "name": "url",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 131
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RecipeIngredient",
            "id": "interface-RecipeIngredient-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "isStapleFood",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 123,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Ingredient"
        },
        {
            "name": "RecipeViewDialogEvent",
            "id": "interface-RecipeViewDialogEvent-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "event",
                    "type": "\"selectedIngredients\" | \"recipe\"",
                    "optional": false,
                    "description": "",
                    "line": 171,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "recipe",
                    "type": "Recipe",
                    "optional": true,
                    "description": "",
                    "line": 172,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "selectedIngredients",
                    "type": "SelectedIngredient[]",
                    "optional": true,
                    "description": "",
                    "line": 173,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "RegisterCredentials",
            "id": "interface-RegisterCredentials-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "invitationCode",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SelectedIngredient",
            "id": "interface-SelectedIngredient-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "isSelected",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 167
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Ingredient"
        },
        {
            "name": "SelectOption",
            "id": "interface-SelectOption-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "key",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "value",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SetActiveCookbookIdAsQueryParamAction",
            "id": "interface-SetActiveCookbookIdAsQueryParamAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "selectedCookbookId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 150
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 149
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SetActiveShoppingListAction",
            "id": "interface-SetActiveShoppingListAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SetActiveShoppingListAction",
            "id": "interface-SetActiveShoppingListAction-dd037cbb539391b5a341970f04577422-1",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SetActiveShoppingListAction-1"
        },
        {
            "name": "SetLanguageAction",
            "id": "interface-SetLanguageAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "language",
                    "type": "Language",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingList",
            "id": "interface-ShoppingList-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isInitialized",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "title",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingListItem",
            "id": "interface-ShoppingListItem-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "order",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "shoppingList",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "Ingredient"
        },
        {
            "name": "ShoppingListItemDB",
            "id": "interface-ShoppingListItemDB-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "syncItems",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 206
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "DBSchema"
        },
        {
            "name": "ShoppingListItemMovedAction",
            "id": "interface-ShoppingListItemMovedAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "currentIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "previousIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ShoppingListItemMovedEvent",
            "id": "interface-ShoppingListItemMovedEvent-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "shoppingListId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "ArrayItemMovedEvent"
        },
        {
            "name": "ShoppingListState",
            "id": "interface-ShoppingListState-a49d352f6e259adaef7a15bbc7ecd3bc",
            "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
            "type": "interface",
            "sourceCode": "import { ShoppingList, ShoppingListItem } from '../../../../core/models/model';\nimport { createEntityAdapter, EntityState } from '@ngrx/entity';\n\nexport const shoppingListAdapter = createEntityAdapter<ShoppingList>({\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n});\n\nexport const shoppingListItemAdapter = createEntityAdapter<ShoppingListItem>({\n  sortComparer: ((a, b) => (b.order || Number.MAX_VALUE) - (a.order || Number.MAX_VALUE)),\n});\n\nexport interface ShoppingListState {\n  readonly shoppingLists: EntityState<ShoppingList>;\n  readonly shoppingListItems: { [key: string]: EntityState<ShoppingListItem> };\n  readonly activeShoppingList: string | undefined;\n}\n\nexport const initialShoppingListState: ShoppingListState = {\n  shoppingLists: shoppingListAdapter.getInitialState(),\n  shoppingListItems: {},\n  activeShoppingList: undefined,\n};\n",
            "properties": [
                {
                    "name": "activeShoppingList",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "shoppingListItems",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "shoppingLists",
                    "type": "EntityState<ShoppingList>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "SyncItem",
            "id": "interface-SyncItem-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "keyPath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 218
                },
                {
                    "name": "method",
                    "type": "SyncMethod",
                    "optional": false,
                    "description": "",
                    "line": 220
                },
                {
                    "name": "payload",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 213
                },
                {
                    "name": "timeStamp",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 219
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Translations",
            "id": "interface-Translations-25283ab7eab2e936e18a740c8b61e47e",
            "file": "src/app/core/models/model-api.ts",
            "type": "interface",
            "sourceCode": "export type I18n = {\n  readonly lang: string;\n  readonly translations: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport interface UserApi {\n  jwt: string;\n  user: UserDetailApi;\n}\n\nexport interface UserDetailApi {\n  username: string;\n  _id: string;\n  email: string;\n  name: string;\n}\n\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-25283ab7eab2e936e18a740c8b61e47e",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "string",
                    "line": 6
                }
            ],
            "kind": 159,
            "methods": []
        },
        {
            "name": "Translations",
            "id": "interface-Translations-18cd31f0c9a8e4bf4ceb1a6e3f832ab8-1",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "returnType": "string",
                    "line": 9
                }
            ],
            "kind": 159,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Translations-1"
        },
        {
            "name": "UndoCookbookDeletedFromStateAction",
            "id": "interface-UndoCookbookDeletedFromStateAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "cookbook",
                    "type": "Cookbook",
                    "optional": false,
                    "description": "",
                    "line": 145
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 144
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "UndoDeleteRecipeFromStateAction",
            "id": "interface-UndoDeleteRecipeFromStateAction-dd037cbb539391b5a341970f04577422",
            "file": "src/app/core/models/model-action.ts",
            "type": "interface",
            "sourceCode": "import { BasicShoppingListItem, Cookbook, Language, LoginCredentials, Recipe, ShoppingList, ShoppingListItem } from './model';\n\nexport interface LoginAction {\n  type: string;\n  credentials: LoginCredentials;\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  id: string;\n}\n\nexport interface SetLanguageAction {\n  type: string;\n  language: Language;\n}\n\nexport interface LoadShoppingListsSuccessAction {\n  type: string;\n  shoppingLists: ShoppingList[];\n}\n\nexport interface SetActiveShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface LoadShoppingListItemsSuccessAction {\n  type: string;\n  shoppingListId: string;\n  shoppingListItems: ShoppingListItem[];\n}\n\nexport interface ChangeShoppingListAction {\n  type: string;\n  shoppingListId: string;\n}\n\nexport interface AddShoppingListItemAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: BasicShoppingListItem;\n}\n\n\nexport interface AddShoppingListItemSuccessAction {\n  type: string;\n  optimisticId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemAction {\n  type: string;\n  shoppingListItem: ShoppingListItem;\n}\n\n\nexport interface ShoppingListItemMovedAction {\n  type: string;\n  shoppingListId: string;\n  currentIndex: number;\n  previousIndex: number;\n}\n\n\nexport interface LoadRecipesSuccessAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly recipes: Recipe[];\n}\n\nexport interface CreateRecipeAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipeToSave: Recipe;\n}\n\nexport interface CreateRecipeSuccessAction {\n  readonly type: string;\n  readonly optimisticId: string;\n  readonly recipe: Recipe;\n}\n\nexport interface CreateRecipeSuccessFailureAction {\n  readonly type: string;\n  readonly cookbookId: string;\n  readonly optimisticId: string;\n}\n\nexport interface EditRecipeSuccessAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\nexport interface DeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipeToDelete: Recipe;\n}\n\nexport interface DeleteRecipeSuccessAction {\n  readonly type: string;\n  readonly deletedRecipe: Recipe;\n}\n\nexport interface UndoDeleteRecipeFromStateAction {\n  readonly type: string;\n  readonly recipe: Recipe;\n}\n\n\nexport interface CookbookSelectedAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface CookbookCreatedAction {\n  type: string;\n  optimisticId: string;\n  title: string;\n}\n\nexport interface CookbookCreatedSuccessAction {\n  type: string;\n  optimisticId: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookCreatedFailureAction {\n  type: string;\n  optimisticId: string;\n}\n\nexport interface CookbookEditedSuccessAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface CookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface UndoCookbookDeletedFromStateAction {\n  type: string;\n  cookbook: Cookbook;\n}\n\nexport interface SetActiveCookbookIdAsQueryParamAction {\n  type: string;\n  selectedCookbookId: string;\n}\n\nexport interface LoadRecipeSuccessAction {\n  type: string;\n  recipe: Recipe;\n}\n\nexport interface LoginFailureAction {\n  type: string;\n  error: string;\n}\n",
            "properties": [
                {
                    "name": "recipe",
                    "type": "Recipe",
                    "optional": false,
                    "description": "",
                    "line": 107,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "type",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-18cd31f0c9a8e4bf4ceb1a6e3f832ab8",
            "file": "src/app/core/models/model.ts",
            "type": "interface",
            "sourceCode": "import { IconName } from '@fortawesome/fontawesome-common-types';\nimport { DBSchema } from 'idb';\nimport { SUPPORTED_LANGUAGES } from '../constants/constants';\n\nexport type I18n = {\n  readonly [key: string]: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport type Language = typeof SUPPORTED_LANGUAGES.type;\n\nexport type Unit = 'kg' | 'g' | 'tableSpoon' | 'coffeeSpoon' | 'l' | 'dl' | 'ml' | 'pinch' | 'piece' | 'pack';\n\nexport interface Ingredient {\n  title: string;\n  amount: number;\n  unit: Unit;\n}\n\nexport interface ShoppingList {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface List {\n  id: string;\n  title: string;\n}\n\nexport interface ShoppingListItem extends Ingredient {\n  id: string;\n  shoppingList: string;\n  order?: number;\n}\n\nexport type BasicShoppingListItem = Omit<ShoppingListItem, 'id' | 'order'>;\n\nexport interface AddShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface DeleteShoppingListItemEvent {\n  shoppingListId: string;\n  shoppingListItem: ShoppingListItem;\n}\n\nexport interface ArrayItemMovedEvent {\n  currentIndex: number;\n  previousIndex: number;\n}\n\nexport interface ShoppingListItemMovedEvent extends ArrayItemMovedEvent {\n  shoppingListId: string;\n}\n\nexport interface SelectOption<T> {\n  value: T;\n  key?: string;\n  name?: string;\n}\n\nexport interface LoginCredentials {\n  identifier: string;\n  password: string;\n}\n\nexport interface RegisterCredentials {\n  name: string;\n  email: string;\n  password: string;\n  invitationCode: string;\n}\n\nexport interface User {\n  jwt: string;\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface JwtPayload {\n  id: string;\n  iat: number;\n  exp: number;\n}\n\nexport interface JwtRefreshResponse {\n  ok: boolean;\n  user: User | null;\n}\n\n// TypeScript will infer a string union type from the literal values passed to\n// this function. Without `extends string`, it would instead generalize them\n// to the common string type.\nexport const StringUnion = <UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n};\n\nexport interface RecipeIngredient extends Ingredient {\n  id?: string;\n  readonly isStapleFood: boolean;\n}\n\nexport interface Recipe {\n  id?: string;\n  title: string;\n  cookbookId: string;\n  ingredients: RecipeIngredient [];\n  url?: string;\n}\n\nexport interface DialogData<T extends object> {\n  readonly data: T;\n  readonly translations: { [key: string]: string };\n}\n\nexport interface Cookbook {\n  readonly id: string;\n  readonly title: string;\n}\n\nexport interface ListPickerDialogEvent {\n  event: 'select' | 'create' | 'edit' | 'delete';\n  list?: List;\n}\n\nexport interface CreateListDialogEvent {\n  event: 'create';\n  title: string;\n}\n\nexport interface EditListDialogEvent {\n  event: 'edit';\n  list: List;\n}\n\nexport interface AddMealDialogEvent {\n  event: 'addMeal';\n  mealType: MealType;\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface SelectedIngredient extends Ingredient {\n  isSelected: boolean;\n}\n\nexport interface RecipeViewDialogEvent {\n  readonly event: 'selectedIngredients' | 'recipe';\n  readonly recipe?: Recipe;\n  readonly selectedIngredients?: SelectedIngredient[];\n}\n\nexport interface Link {\n  key: string;\n  path: string;\n  icon: IconName;\n}\nexport type MealType = 'breakfast' | 'lunch' | 'dinner';\n\nexport interface Meal {\n  id: string;\n  type: MealType;\n  date: string;\n  recipe: Recipe;\n}\n\nexport type DayPlan = {\n  [key in MealType]: Meal[];\n};\n\nexport interface MealPlaner {\n  id: string;\n  title: string;\n  isInitialized?: boolean;\n}\n\nexport interface MealPlanerAddEvent {\n  recipe: Recipe;\n  shoppingListItems: BasicShoppingListItem[];\n}\n\nexport interface ShoppingListItemDB extends DBSchema {\n  syncItems: {\n    key: string,\n    value: SyncItem\n  };\n}\n\nexport interface SyncItem {\n  payload: {\n    basicShoppingListItem: BasicShoppingListItem,\n    id: string | null,\n    order: number | null\n  };\n  keyPath: string;\n  timeStamp: number;\n  method: SyncMethod;\n}\n\nexport type SyncMethod = 'POST' | 'PUT' | 'DELETE';\n",
            "properties": [
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "jwt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 82
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "UserApi",
            "id": "interface-UserApi-25283ab7eab2e936e18a740c8b61e47e",
            "file": "src/app/core/models/model-api.ts",
            "type": "interface",
            "sourceCode": "export type I18n = {\n  readonly lang: string;\n  readonly translations: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport interface UserApi {\n  jwt: string;\n  user: UserDetailApi;\n}\n\nexport interface UserDetailApi {\n  username: string;\n  _id: string;\n  email: string;\n  name: string;\n}\n\n",
            "properties": [
                {
                    "name": "jwt",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "user",
                    "type": "UserDetailApi",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "UserDetailApi",
            "id": "interface-UserDetailApi-25283ab7eab2e936e18a740c8b61e47e",
            "file": "src/app/core/models/model-api.ts",
            "type": "interface",
            "sourceCode": "export type I18n = {\n  readonly lang: string;\n  readonly translations: Translations;\n};\n\nexport interface Translations {\n  readonly [key: string]: string;\n}\n\nexport interface UserApi {\n  jwt: string;\n  user: UserDetailApi;\n}\n\nexport interface UserDetailApi {\n  username: string;\n  _id: string;\n  email: string;\n  name: string;\n}\n\n",
            "properties": [
                {
                    "name": "_id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "email",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AppEffects",
            "id": "injectable-AppEffects-c364dc3d6271245347876fe45d6f5ddb",
            "file": "src/app/core/store/effects/app.effects.ts",
            "properties": [
                {
                    "name": "getI18n$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AppInitializationActions.setLanguage, NavigationActions.changeLanguage),\n    withLatestFrom(this.store.select(selectTranslations)),\n    filter(([action, i18n]: [SetLanguageAction, I18n]) => !i18n || !i18n[action.language]),\n    exhaustMap(([action, _]: [SetLanguageAction, I18n]) => this.i18nService.getI18n(action.language).pipe(\n      map((i18n: I18n) => I18nApiActions.getI18nSuccess({i18n})),\n      catchError(() => of(I18nApiActions.getI18nFailure()))\n    ))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "setUserLanguageToLocaleStore$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(NavigationActions.changeLanguage),\n    tap(({language}) => localStorage.setItem('userLanguage', language)),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, filter, map, tap, withLatestFrom } from 'rxjs/operators';\nimport { I18n } from '../../models/model';\nimport { SetLanguageAction } from '../../models/model-action';\nimport { GlobalState, selectTranslations } from '../index';\nimport { AppInitializationActions, I18nApiActions, NavigationActions } from '../actions';\nimport { I18nService } from '../../services/i18n.service';\n\n@Injectable()\nexport class AppEffects {\n  constructor(\n    private actions$: Actions,\n    private i18nService: I18nService,\n    private store: Store<GlobalState>) {\n  }\n\n  @Effect()\n  getI18n$ = this.actions$.pipe(\n    ofType(AppInitializationActions.setLanguage, NavigationActions.changeLanguage),\n    withLatestFrom(this.store.select(selectTranslations)),\n    filter(([action, i18n]: [SetLanguageAction, I18n]) => !i18n || !i18n[action.language]),\n    exhaustMap(([action, _]: [SetLanguageAction, I18n]) => this.i18nService.getI18n(action.language).pipe(\n      map((i18n: I18n) => I18nApiActions.getI18nSuccess({i18n})),\n      catchError(() => of(I18nApiActions.getI18nFailure()))\n    ))\n  );\n\n  @Effect({dispatch: false})\n  setUserLanguageToLocaleStore$ = this.actions$.pipe(\n    ofType(NavigationActions.changeLanguage),\n    tap(({language}) => localStorage.setItem('userLanguage', language)),\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "i18nService",
                        "type": "I18nService"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i18nService",
                        "type": "I18nService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthApiEffects",
            "id": "injectable-AuthApiEffects-3f39246a26be3a3d678bff6b7da12e3e",
            "file": "src/app/features/auth/store/effects/auth-api.effects.ts",
            "properties": [
                {
                    "name": "deleteAccount$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AccountContainerActions.deleteAccount, AuthEffectsActions.retryDeleteAccount),\n    mergeMap(({user}: { user: User }) => {\n      return this.authService.deleteAccount(user).pipe(\n        map(() => AuthApiActions.deleteAccountSuccess({user})),\n        catchError(() => of(AuthApiActions.deleteAccountFailure({user})))\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "login$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(LoginContainerActions.login),\n    exhaustMap(({credentials}: LoginAction) => this.authService.login(credentials).pipe(\n      map((user: User) => AuthApiActions.loginSuccess({user})),\n      catchError((error) => {\n        const errorMessage = Array.isArray(error) ? error[0].messages[0].id : 'authBackend.error.connection';\n        return of(AuthApiActions.loginFailure({error: errorMessage}));\n      })\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "logout$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ErrorInterceptorActions.logout, NavigationActions.logout),\n    exhaustMap(() => this.authService.logout().pipe(\n      map(() => AuthApiActions.logoutSuccess()),\n      catchError(() => of(AuthApiActions.logoutFailure()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "redirectWhenLoggedIn$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AuthApiActions.loginSuccess, AuthApiActions.registerSuccess, AuthApiActions.restPasswordSuccess),\n    withLatestFrom(this.store.select(selectRequestedUrlBeforeLoginWasRequired)),\n    tap(([_, url]) => {\n      this.router.navigateByUrl(url || DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER);\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "redirectWhenLoggedOut$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AuthApiActions.logoutSuccess, AuthApiActions.deleteAccountSuccess),\n    withLatestFrom(this.store.select(selectRequestedUrlBeforeLoginWasRequired)),\n    tap(() => {\n      this.router.navigate([REDIRECT_URL_WHEN_LOGOUT]);\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "refreshToken$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AppInitializationActions.refreshToken, LoginServiceActions.refreshToken),\n    exhaustMap(() => this.authService.refreshToken().pipe(\n      map((jwtRenewal: JwtRefreshResponse) => {\n        return (jwtRenewal.ok && jwtRenewal.user) ?\n          AuthApiActions.refreshTokenSuccess({user: jwtRenewal.user}) : AuthApiActions.refreshTokenFailed();\n      }),\n      catchError(() => of(AuthApiActions.refreshTokenFailed()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "register$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(RegisterContainerActions.register),\n    exhaustMap(({credentials}) => this.authService.register(credentials).pipe(\n      map((user: User) => AuthApiActions.registerSuccess({user})),\n      catchError((error) => {\n        const errorMessage = Array.isArray(error) ? error[0].messages[0].id : 'authBackend.error.connection';\n        return of(AuthApiActions.registerFailure({error: errorMessage}));\n      })\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "resetPassword$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ResetPasswordContainerActions.resetPassword),\n    exhaustMap(({password, resetPasswordToken}) => this.authService.resetPassword(password, resetPasswordToken).pipe(\n      map((user: User) => AuthApiActions.restPasswordSuccess({user})),\n      tap(() => this.snackBarService.openSnackBar('auth.reset-password.success')),\n      catchError(() => of(AuthApiActions.restPasswordFailure({error: 'authBackend.resetPassword.failed'})))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "retryDeleteAccount$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(AuthApiActions.deleteAccountFailure),\n    switchMap(({user}) => {\n      console.log('here');\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        filter(({dismissedByAction}) => dismissedByAction),\n        map(() => AuthEffectsActions.retryDeleteAccount({user})));\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "sendPasswordResetMail$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ForgotPasswordContainerActions.requestEmail),\n    exhaustMap(({email}) => this.authService.forgotPassword(email).pipe(\n      map(() => AuthApiActions.forgotPasswordSuccess()),\n      catchError(() => of(AuthApiActions.forgotPasswordFailure()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { GlobalState, selectRequestedUrlBeforeLoginWasRequired } from '../../../../core/store';\nimport {\n  AccountContainerActions,\n  AuthApiActions,\n  AuthEffectsActions,\n  ForgotPasswordContainerActions,\n  LoginContainerActions,\n  LoginServiceActions,\n  RegisterContainerActions,\n  ResetPasswordContainerActions\n} from '../actions';\nimport { catchError, exhaustMap, filter, map, mergeMap, switchMap, take, tap, withLatestFrom } from 'rxjs/operators';\nimport { AuthService } from '../../services/auth.service';\nimport { LoginAction } from '../../../../core/models/model-action';\nimport { JwtRefreshResponse, User } from '../../../../core/models/model';\nimport { of } from 'rxjs';\nimport { AppInitializationActions, ErrorInterceptorActions, NavigationActions } from '../../../../core/store/actions';\nimport { Router } from '@angular/router';\nimport { DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER, REDIRECT_URL_WHEN_LOGOUT } from '../../../../core/constants/constants';\nimport { SnackbarService } from '../../../../core/services/snackbar.service';\n\n@Injectable()\nexport class AuthApiEffects {\n  constructor(\n    private actions$: Actions,\n    private authService: AuthService,\n    private router: Router,\n    private snackBarService: SnackbarService,\n    private store: Store<GlobalState>) {\n  }\n\n  @Effect()\n  login$ = this.actions$.pipe(\n    ofType(LoginContainerActions.login),\n    exhaustMap(({credentials}: LoginAction) => this.authService.login(credentials).pipe(\n      map((user: User) => AuthApiActions.loginSuccess({user})),\n      catchError((error) => {\n        const errorMessage = Array.isArray(error) ? error[0].messages[0].id : 'authBackend.error.connection';\n        return of(AuthApiActions.loginFailure({error: errorMessage}));\n      })\n    )),\n  );\n\n  @Effect()\n  refreshToken$ = this.actions$.pipe(\n    ofType(AppInitializationActions.refreshToken, LoginServiceActions.refreshToken),\n    exhaustMap(() => this.authService.refreshToken().pipe(\n      map((jwtRenewal: JwtRefreshResponse) => {\n        return (jwtRenewal.ok && jwtRenewal.user) ?\n          AuthApiActions.refreshTokenSuccess({user: jwtRenewal.user}) : AuthApiActions.refreshTokenFailed();\n      }),\n      catchError(() => of(AuthApiActions.refreshTokenFailed()))\n    )),\n  );\n\n  @Effect()\n  logout$ = this.actions$.pipe(\n    ofType(ErrorInterceptorActions.logout, NavigationActions.logout),\n    exhaustMap(() => this.authService.logout().pipe(\n      map(() => AuthApiActions.logoutSuccess()),\n      catchError(() => of(AuthApiActions.logoutFailure()))\n    )),\n  );\n\n  @Effect()\n  register$ = this.actions$.pipe(\n    ofType(RegisterContainerActions.register),\n    exhaustMap(({credentials}) => this.authService.register(credentials).pipe(\n      map((user: User) => AuthApiActions.registerSuccess({user})),\n      catchError((error) => {\n        const errorMessage = Array.isArray(error) ? error[0].messages[0].id : 'authBackend.error.connection';\n        return of(AuthApiActions.registerFailure({error: errorMessage}));\n      })\n    )),\n  );\n\n  @Effect()\n  sendPasswordResetMail$ = this.actions$.pipe(\n    ofType(ForgotPasswordContainerActions.requestEmail),\n    exhaustMap(({email}) => this.authService.forgotPassword(email).pipe(\n      map(() => AuthApiActions.forgotPasswordSuccess()),\n      catchError(() => of(AuthApiActions.forgotPasswordFailure()))\n    )),\n  );\n\n  @Effect()\n  resetPassword$ = this.actions$.pipe(\n    ofType(ResetPasswordContainerActions.resetPassword),\n    exhaustMap(({password, resetPasswordToken}) => this.authService.resetPassword(password, resetPasswordToken).pipe(\n      map((user: User) => AuthApiActions.restPasswordSuccess({user})),\n      tap(() => this.snackBarService.openSnackBar('auth.reset-password.success')),\n      catchError(() => of(AuthApiActions.restPasswordFailure({error: 'authBackend.resetPassword.failed'})))\n    )),\n  );\n\n  @Effect({dispatch: false})\n  redirectWhenLoggedIn$ = this.actions$.pipe(\n    ofType(AuthApiActions.loginSuccess, AuthApiActions.registerSuccess, AuthApiActions.restPasswordSuccess),\n    withLatestFrom(this.store.select(selectRequestedUrlBeforeLoginWasRequired)),\n    tap(([_, url]) => {\n      this.router.navigateByUrl(url || DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER);\n    }),\n  );\n\n  @Effect({dispatch: false})\n  redirectWhenLoggedOut$ = this.actions$.pipe(\n    ofType(AuthApiActions.logoutSuccess, AuthApiActions.deleteAccountSuccess),\n    withLatestFrom(this.store.select(selectRequestedUrlBeforeLoginWasRequired)),\n    tap(() => {\n      this.router.navigate([REDIRECT_URL_WHEN_LOGOUT]);\n    }),\n  );\n\n  @Effect()\n  deleteAccount$ = this.actions$.pipe(\n    ofType(AccountContainerActions.deleteAccount, AuthEffectsActions.retryDeleteAccount),\n    mergeMap(({user}: { user: User }) => {\n      return this.authService.deleteAccount(user).pipe(\n        map(() => AuthApiActions.deleteAccountSuccess({user})),\n        catchError(() => of(AuthApiActions.deleteAccountFailure({user})))\n      );\n    }),\n  );\n\n  @Effect()\n  retryDeleteAccount$ = this.actions$.pipe(\n    ofType(AuthApiActions.deleteAccountFailure),\n    switchMap(({user}) => {\n      console.log('here');\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        filter(({dismissedByAction}) => dismissedByAction),\n        map(() => AuthEffectsActions.retryDeleteAccount({user})));\n    })\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-b353db777cba7a5eea05305b579b91e9",
            "file": "src/app/features/auth/services/auth.service.ts",
            "properties": [
                {
                    "name": "refreshTokenTimeout",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteAccount",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserDetailApi>",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forgotPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "LoginCredentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "LoginCredentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 62
                },
                {
                    "name": "refreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<JwtRefreshResponse>",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "RegisterCredentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "RegisterCredentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "password",
                            "type": "string"
                        },
                        {
                            "name": "resetPasswordToken",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "resetPasswordToken",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startRefreshTokenTimer",
                    "args": [
                        {
                            "name": "jwt",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "jwt",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stopRefreshTokenTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { environment } from '../../../../environments/environment';\nimport { decodeJwtToken, mapUserApiToUserClient } from '../../../core/helpers/helpers';\nimport { UserApi, UserDetailApi } from '../../../core/models/model-api';\nimport { JwtRefreshResponse, LoginCredentials, RegisterCredentials, User } from '../../../core/models/model';\nimport { GlobalState } from '../../../core/store';\nimport { Store } from '@ngrx/store';\nimport { LoginServiceActions } from '../store/actions';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private refreshTokenTimeout: number | undefined;\n\n  constructor(private httpClient: HttpClient, private store: Store<GlobalState>) {\n  }\n\n  login(credentials: LoginCredentials): Observable<User> {\n    return this.httpClient.post<UserApi>(`${environment.authUrl}/auth/local`, credentials).pipe(\n      map((userApi: UserApi) => mapUserApiToUserClient(userApi)),\n      tap(user => this.startRefreshTokenTimer(user.jwt))\n    );\n  }\n\n  register(credentials: RegisterCredentials): Observable<User> {\n    return this.httpClient.post<UserApi>(`${environment.authUrl}/auth/local/register`, {username: credentials.email, ...credentials}).pipe(\n      map((userApi: UserApi) => mapUserApiToUserClient(userApi)),\n      tap(user => this.startRefreshTokenTimer(user.jwt))\n    );\n  }\n\n  deleteAccount(user: User): Observable<UserDetailApi> {\n    return this.httpClient.delete<UserDetailApi>(`${environment.apiUrl}/users/${user.id}`).pipe(\n      tap(() => this.stopRefreshTokenTimer())\n    );\n  }\n\n  refreshToken(): Observable<JwtRefreshResponse> {\n    return this.httpClient.post<JwtRefreshResponse>(`${environment.authUrl}/auth/refresh-token`, {}).pipe(\n      tap((jwtRenewal: JwtRefreshResponse) => jwtRenewal.user && this.startRefreshTokenTimer(jwtRenewal.user.jwt))\n    );\n  }\n\n  forgotPassword(email: string): Observable<{ ok: boolean }> {\n    return this.httpClient.post<{ ok: boolean }>(`${environment.authUrl}/auth/forgot-password`, {email, user: email});\n  }\n\n  resetPassword(password: string, resetPasswordToken: string): Observable<User> {\n    return this.httpClient.post<UserApi>(\n      `${environment.authUrl}/auth/reset-password`,\n      {code: resetPasswordToken, password, passwordConfirmation: password})\n      .pipe(\n        map((userApi: UserApi) => mapUserApiToUserClient(userApi)),\n        tap(user => this.startRefreshTokenTimer(user.jwt))\n      );\n  }\n\n  logout(): Observable<{ok: true}> {\n    this.stopRefreshTokenTimer();\n    return this.httpClient.post<{ok: true}>(`${environment.authUrl}/auth/logout`, {});\n  }\n\n  private startRefreshTokenTimer(jwt: string): void {\n    const {exp} = decodeJwtToken(jwt);\n\n    const expires = new Date(exp * 1000);\n    // set a timeout to refresh the token a minute before it expires\n    const timeout = expires.getTime() - Date.now() - (60 * 1000);\n    this.stopRefreshTokenTimer();\n    this.refreshTokenTimeout = window.setTimeout(() => this.store.dispatch(LoginServiceActions.refreshToken()), timeout);\n  }\n\n  private stopRefreshTokenTimer(): void {\n    clearTimeout(this.refreshTokenTimeout);\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CookbookEffects",
            "id": "injectable-CookbookEffects-5ebbe28bb57df311cfe106cc004719b2",
            "file": "src/app/features/cookbook/store/effects/cookbook.effects.ts",
            "properties": [
                {
                    "name": "chooseActiveCookbookId$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookApiActions.loadCookbookSuccess),\n    switchMap(({cookbooks}) => {\n      const requestedCookbookId = this.route.snapshot.queryParams.selectedCookbookId;\n      let selectedCookbookId = requestedCookbookId ? requestedCookbookId : this.storageService.getItem(STORAGE_SELECTED_COOKBOOK_ID);\n      const cookbookIds = cookbooks.map((cookbook) => cookbook.id);\n      selectedCookbookId = selectedCookbookId && cookbookIds.includes(selectedCookbookId) ?\n        selectedCookbookId : cookbookIds[0];\n      return of(CookbookApiActions.setActiveCookbookIdAsQueryParam({selectedCookbookId})\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "createCookbook$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.createCookbook),\n    exhaustMap(({title, optimisticId}) => this.cookbookService.saveCookbook(title).pipe(\n      map((cookbook: Cookbook) => CookbookApiActions.createCookbookSuccess({optimisticId, cookbook})),\n      catchError(() => of(CookbookApiActions.createCookbookFailure({optimisticId})))\n    ))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 160,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteCookbook$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.deleteCookbook),\n    filter(({cookbook}) => !!cookbook.id),\n    mergeMap(({cookbook}) => this.cookbookService.deleteCookbook(cookbook.id!).pipe(\n      map(() => CookbookApiActions.deleteCookbookSuccess({cookbook})),\n      catchError(() => of(CookbookApiActions.undoDeleteCookbookFromState({cookbook})))\n    ))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 178,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteRecipe$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.deleteRecipe),\n    filter(({recipe}: { recipe: Recipe }) => !!recipe.id),\n    mergeMap(({recipe}: { recipe: Recipe }) => this.recipeService.deleteRecipe(recipe.id!)\n      .pipe(\n        map(() => CookbookApiActions.deleteRecipeSuccess({deletedRecipe: recipe})),\n        catchError(() => of(CookbookApiActions.undoDeleteRecipeFromState({recipe})))\n      )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "editCookbook$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.editCookbook),\n    concatMap(({cookbook}) => this.cookbookService.editCookbook(cookbook).pipe(\n      map((editedCookbook: Cookbook) => CookbookApiActions.editCookbookSuccess({cookbook: editedCookbook})),\n      catchError(() => of(CookbookApiActions.editCookbookFailure()))\n    ))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 169,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "editRecipe$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(RecipeContainerActions.editRecipe),\n    withLatestFrom(this.store.select(((state: GlobalState) => state.cookbookState.activeCookbookId))),\n    concatMap(([action, cookbookId]) => this.recipeService.editRecipe(cookbookId, action.recipeToEdit)\n      .pipe(\n        map((recipe: Recipe) => RecipeApiActions.editRecipeSuccess({recipe})),\n        catchError(() => of(RecipeApiActions.editRecipeFailure()))\n      )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadCookbooks$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.loadCookbook, LoadMealDialogActions.loadCookbooks),\n    withLatestFrom(this.store),\n    exhaustMap(([_, store]) => this.cookbookService.loadCookbooks(store.appState.user?.id!).pipe(\n      map((cookbooks: Cookbook[]) => CookbookApiActions.loadCookbookSuccess({cookbooks})),\n      catchError(() => of(CookbookApiActions.loadCookbookFailure()))\n    ))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadRecipe$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(RecipeContainerActions.loadRecipe),\n    concatMap(({id}: { id: string }) => this.recipeService.loadRecipe(id).pipe(\n      map((recipe: Recipe) => RecipeApiActions.loadRecipeSuccess({recipe})),\n      catchError(() => of(RecipeApiActions.loadRecipeFailure()))\n    ))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadRecipes$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.loadRecipes, CookbookApiActions.loadCookbookSuccess, CookbookContainerActions.selectCookbook),\n    withLatestFrom(this.store.select(((state: GlobalState) => state.cookbookState))),\n    map(([_, cookbookState]) => {\n      const cookbookId = cookbookState?.activeCookbookId ? cookbookState.activeCookbookId :\n        this.storageService.getItem(STORAGE_SELECTED_COOKBOOK_ID);\n      return cookbookId ? cookbookId : cookbookState.cookbooks[0]?.id;\n    }),\n    concatMap((cookbookId: string) => this.recipeService.loadRecipes(cookbookId)\n      .pipe(\n        map((recipes: Recipe[]) => CookbookApiActions.loadRecipesSuccess({cookbookId, recipes})),\n        catchError(() => of(CookbookApiActions.loadRecipesFailure()))\n      )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "loadSpecificRecipes$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(LoadMealDialogActions.loadRecipesForSelectedCookbook),\n    concatMap(({id}) => this.recipeService.loadRecipes(id)\n      .pipe(\n        map((recipes: Recipe[]) => CookbookApiActions.loadSpecificRecipesSuccess({cookbookId: id, recipes})),\n        catchError(() => of(CookbookApiActions.loadSpecificRecipesFailure()))\n      )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "navigateToCookbook$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(RecipeApiActions.createRecipeSuccess, RecipeApiActions.editRecipeSuccess),\n    tap(({recipe}) => this.router.navigate(['/cookbook'], {queryParams: {selectedCookbookId: recipe.cookbookId}}))\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "saveRecipe$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(RecipeContainerActions.createRecipe),\n    withLatestFrom(this.store.select(((state: GlobalState) => state.cookbookState))),\n    map(([action, cookbookState]: [CreateRecipeAction, CookbookState]) => {\n      const cookbookId = cookbookState.activeCookbookId ? cookbookState.activeCookbookId :\n        this.storageService.getItem(STORAGE_SELECTED_COOKBOOK_ID);\n      const result: [CreateRecipeAction, string] = [action, cookbookId];\n      return result;\n    }),\n    concatMap(([action, activeCookbookId]) => this.recipeService.saveRecipe(activeCookbookId, action.recipeToSave)\n      .pipe(\n        map((recipe: Recipe) => RecipeApiActions.createRecipeSuccess({optimisticId: action.optimisticId, recipe})),\n        catchError(() => of(RecipeApiActions.createRecipeFailure({optimisticId: action.optimisticId, cookbookId: activeCookbookId})))\n      )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "setQueryParameterForActiveShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookApiActions.setActiveCookbookIdAsQueryParam, CookbookContainerActions.selectCookbook),\n    filter(() => stringBetweenChars(this.router.routerState.snapshot.url, '/', '?') === 'cookbook'),\n    tap(({selectedCookbookId}) => {\n      this.router.navigate([], {relativeTo: this.route, queryParams: {selectedCookbookId}});\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "storeSelectedCookbookIdInStorage",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookApiActions.setActiveCookbookIdAsQueryParam, CookbookContainerActions.selectCookbook),\n    tap(({selectedCookbookId}) => {\n      this.storageService.setItem(STORAGE_SELECTED_COOKBOOK_ID, selectedCookbookId);\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 152,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "switchCookbookWhenDeleted$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(CookbookContainerActions.deleteCookbookFromState),\n    withLatestFrom(this.store),\n    filter(([{cookbook}, store]) => cookbook.id === store.cookbookState.activeCookbookId && store.cookbookState.cookbooks?.length > 0),\n    map(([_, store]) => {\n      return CookbookContainerActions.selectCookbook({selectedCookbookId: store.cookbookState.cookbooks[0].id});\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 188,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { catchError, concatMap, exhaustMap, filter, map, mergeMap, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { STORAGE_SELECTED_COOKBOOK_ID } from '../../../../core/constants/constants';\nimport { Cookbook, Recipe } from '../../../../core/models/model';\nimport { CreateRecipeAction } from '../../../../core/models/model-action';\nimport { StorageService } from '../../../../core/services/storage.service';\nimport { GlobalState } from '../../../../core/store';\nimport { CookbookService } from '../../services/cookbook.service';\nimport { RecipeService } from '../../services/recipe.service';\nimport { CookbookApiActions, CookbookContainerActions, RecipeApiActions, RecipeContainerActions } from '../actions';\nimport { CookbookState } from '../state/cookbook-state';\nimport { LoadMealDialogActions } from '../../../meal-planer/store/actions';\nimport { stringBetweenChars } from '../../../../core/helpers/helpers';\n\n@Injectable()\nexport class CookbookEffects {\n  constructor(\n    private actions$: Actions,\n    private cookbookService: CookbookService,\n    private store: Store<GlobalState>,\n    private recipeService: RecipeService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private storageService: StorageService\n  ) {\n  }\n\n  @Effect()\n  loadCookbooks$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.loadCookbook, LoadMealDialogActions.loadCookbooks),\n    withLatestFrom(this.store),\n    exhaustMap(([_, store]) => this.cookbookService.loadCookbooks(store.appState.user?.id!).pipe(\n      map((cookbooks: Cookbook[]) => CookbookApiActions.loadCookbookSuccess({cookbooks})),\n      catchError(() => of(CookbookApiActions.loadCookbookFailure()))\n    ))\n  );\n\n  @Effect()\n  loadRecipes$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.loadRecipes, CookbookApiActions.loadCookbookSuccess, CookbookContainerActions.selectCookbook),\n    withLatestFrom(this.store.select(((state: GlobalState) => state.cookbookState))),\n    map(([_, cookbookState]) => {\n      const cookbookId = cookbookState?.activeCookbookId ? cookbookState.activeCookbookId :\n        this.storageService.getItem(STORAGE_SELECTED_COOKBOOK_ID);\n      return cookbookId ? cookbookId : cookbookState.cookbooks[0]?.id;\n    }),\n    concatMap((cookbookId: string) => this.recipeService.loadRecipes(cookbookId)\n      .pipe(\n        map((recipes: Recipe[]) => CookbookApiActions.loadRecipesSuccess({cookbookId, recipes})),\n        catchError(() => of(CookbookApiActions.loadRecipesFailure()))\n      )\n    )\n  );\n\n  @Effect()\n  loadSpecificRecipes$ = this.actions$.pipe(\n    ofType(LoadMealDialogActions.loadRecipesForSelectedCookbook),\n    concatMap(({id}) => this.recipeService.loadRecipes(id)\n      .pipe(\n        map((recipes: Recipe[]) => CookbookApiActions.loadSpecificRecipesSuccess({cookbookId: id, recipes})),\n        catchError(() => of(CookbookApiActions.loadSpecificRecipesFailure()))\n      )\n    )\n  );\n\n  @Effect()\n  saveRecipe$ = this.actions$.pipe(\n    ofType(RecipeContainerActions.createRecipe),\n    withLatestFrom(this.store.select(((state: GlobalState) => state.cookbookState))),\n    map(([action, cookbookState]: [CreateRecipeAction, CookbookState]) => {\n      const cookbookId = cookbookState.activeCookbookId ? cookbookState.activeCookbookId :\n        this.storageService.getItem(STORAGE_SELECTED_COOKBOOK_ID);\n      const result: [CreateRecipeAction, string] = [action, cookbookId];\n      return result;\n    }),\n    concatMap(([action, activeCookbookId]) => this.recipeService.saveRecipe(activeCookbookId, action.recipeToSave)\n      .pipe(\n        map((recipe: Recipe) => RecipeApiActions.createRecipeSuccess({optimisticId: action.optimisticId, recipe})),\n        catchError(() => of(RecipeApiActions.createRecipeFailure({optimisticId: action.optimisticId, cookbookId: activeCookbookId})))\n      )\n    )\n  );\n\n  @Effect()\n  loadRecipe$ = this.actions$.pipe(\n    ofType(RecipeContainerActions.loadRecipe),\n    concatMap(({id}: { id: string }) => this.recipeService.loadRecipe(id).pipe(\n      map((recipe: Recipe) => RecipeApiActions.loadRecipeSuccess({recipe})),\n      catchError(() => of(RecipeApiActions.loadRecipeFailure()))\n    ))\n  );\n\n\n  @Effect({dispatch: false})\n  navigateToCookbook$ = this.actions$.pipe(\n    ofType(RecipeApiActions.createRecipeSuccess, RecipeApiActions.editRecipeSuccess),\n    tap(({recipe}) => this.router.navigate(['/cookbook'], {queryParams: {selectedCookbookId: recipe.cookbookId}}))\n  );\n\n  @Effect()\n  editRecipe$ = this.actions$.pipe(\n    ofType(RecipeContainerActions.editRecipe),\n    withLatestFrom(this.store.select(((state: GlobalState) => state.cookbookState.activeCookbookId))),\n    concatMap(([action, cookbookId]) => this.recipeService.editRecipe(cookbookId, action.recipeToEdit)\n      .pipe(\n        map((recipe: Recipe) => RecipeApiActions.editRecipeSuccess({recipe})),\n        catchError(() => of(RecipeApiActions.editRecipeFailure()))\n      )\n    )\n  );\n\n  @Effect()\n  deleteRecipe$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.deleteRecipe),\n    filter(({recipe}: { recipe: Recipe }) => !!recipe.id),\n    mergeMap(({recipe}: { recipe: Recipe }) => this.recipeService.deleteRecipe(recipe.id!)\n      .pipe(\n        map(() => CookbookApiActions.deleteRecipeSuccess({deletedRecipe: recipe})),\n        catchError(() => of(CookbookApiActions.undoDeleteRecipeFromState({recipe})))\n      )\n    )\n  );\n\n  @Effect()\n  chooseActiveCookbookId$ = this.actions$.pipe(\n    ofType(CookbookApiActions.loadCookbookSuccess),\n    switchMap(({cookbooks}) => {\n      const requestedCookbookId = this.route.snapshot.queryParams.selectedCookbookId;\n      let selectedCookbookId = requestedCookbookId ? requestedCookbookId : this.storageService.getItem(STORAGE_SELECTED_COOKBOOK_ID);\n      const cookbookIds = cookbooks.map((cookbook) => cookbook.id);\n      selectedCookbookId = selectedCookbookId && cookbookIds.includes(selectedCookbookId) ?\n        selectedCookbookId : cookbookIds[0];\n      return of(CookbookApiActions.setActiveCookbookIdAsQueryParam({selectedCookbookId})\n      );\n    }),\n  );\n\n  @Effect({dispatch: false})\n  setQueryParameterForActiveShoppingList$ = this.actions$.pipe(\n    ofType(CookbookApiActions.setActiveCookbookIdAsQueryParam, CookbookContainerActions.selectCookbook),\n    filter(() => stringBetweenChars(this.router.routerState.snapshot.url, '/', '?') === 'cookbook'),\n    tap(({selectedCookbookId}) => {\n      this.router.navigate([], {relativeTo: this.route, queryParams: {selectedCookbookId}});\n    })\n  );\n\n  @Effect({dispatch: false})\n  storeSelectedCookbookIdInStorage = this.actions$.pipe(\n    ofType(CookbookApiActions.setActiveCookbookIdAsQueryParam, CookbookContainerActions.selectCookbook),\n    tap(({selectedCookbookId}) => {\n      this.storageService.setItem(STORAGE_SELECTED_COOKBOOK_ID, selectedCookbookId);\n    })\n  );\n\n  @Effect()\n  createCookbook$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.createCookbook),\n    exhaustMap(({title, optimisticId}) => this.cookbookService.saveCookbook(title).pipe(\n      map((cookbook: Cookbook) => CookbookApiActions.createCookbookSuccess({optimisticId, cookbook})),\n      catchError(() => of(CookbookApiActions.createCookbookFailure({optimisticId})))\n    ))\n  );\n\n  @Effect()\n  editCookbook$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.editCookbook),\n    concatMap(({cookbook}) => this.cookbookService.editCookbook(cookbook).pipe(\n      map((editedCookbook: Cookbook) => CookbookApiActions.editCookbookSuccess({cookbook: editedCookbook})),\n      catchError(() => of(CookbookApiActions.editCookbookFailure()))\n    ))\n  );\n\n  @Effect()\n  deleteCookbook$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.deleteCookbook),\n    filter(({cookbook}) => !!cookbook.id),\n    mergeMap(({cookbook}) => this.cookbookService.deleteCookbook(cookbook.id!).pipe(\n      map(() => CookbookApiActions.deleteCookbookSuccess({cookbook})),\n      catchError(() => of(CookbookApiActions.undoDeleteCookbookFromState({cookbook})))\n    ))\n  );\n\n  @Effect()\n  switchCookbookWhenDeleted$ = this.actions$.pipe(\n    ofType(CookbookContainerActions.deleteCookbookFromState),\n    withLatestFrom(this.store),\n    filter(([{cookbook}, store]) => cookbook.id === store.cookbookState.activeCookbookId && store.cookbookState.cookbooks?.length > 0),\n    map(([_, store]) => {\n      return CookbookContainerActions.selectCookbook({selectedCookbookId: store.cookbookState.cookbooks[0].id});\n    })\n  );\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "cookbookService",
                        "type": "CookbookService"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "recipeService",
                        "type": "RecipeService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookbookService",
                        "type": "CookbookService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "recipeService",
                        "type": "RecipeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CookbookService",
            "id": "injectable-CookbookService-1db36b1817e958475df6a2367402371e",
            "file": "src/app/features/cookbook/services/cookbook.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteCookbook",
                    "args": [
                        {
                            "name": "cookbookId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "cookbookId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editCookbook",
                    "args": [
                        {
                            "name": "cookbook",
                            "type": "Cookbook"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Cookbook>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "cookbook",
                            "type": "Cookbook",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCookbooks",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Cookbook[]>",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveCookbook",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Cookbook>",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../../environments/environment';\nimport { Cookbook } from '../../../core/models/model';\n\n@Injectable()\nexport class CookbookService {\n  constructor(private httpClient: HttpClient) {\n  }\n\n  loadCookbooks(userId: string): Observable<Cookbook[]> {\n    return this.httpClient.get<Cookbook[]>(`${environment.apiUrl}/cookbooks?user=${userId}&_sort=title:asc`);\n  }\n\n  saveCookbook(title: string): Observable<Cookbook> {\n    return this.httpClient.post<Cookbook>(`${environment.apiUrl}/cookbooks`, {title});\n  }\n\n  editCookbook(cookbook: Cookbook): Observable<Cookbook> {\n    return this.httpClient.put<Cookbook>(`${environment.apiUrl}/cookbooks/${cookbook.id}`, cookbook);\n  }\n\n  deleteCookbook(cookbookId: string): Observable<boolean> {\n    return this.httpClient.delete<{ DELETED: boolean }>(`${environment.apiUrl}/cookbooks/${cookbookId}`)\n      .pipe(map((result: { DELETED: boolean }) => result.DELETED));\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CustomPreloadingStrategyService",
            "id": "injectable-CustomPreloadingStrategyService-27f1806f57da34f0675126c1d361fcf6",
            "file": "src/app/core/services/custom-preloading-strategy.service.ts",
            "properties": [
                {
                    "name": "isLoggedIn$",
                    "defaultValue": "this.store.select(selectIsLoggedIn)",
                    "type": "Observable<boolean | null>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methods": [
                {
                    "name": "preload",
                    "args": [
                        {
                            "name": "route",
                            "type": "Route"
                        },
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "Route",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { PreloadingStrategy, Route, Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { GlobalState, isLoggedIn as selectIsLoggedIn } from '../store';\nimport { mergeMap } from 'rxjs/operators';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomPreloadingStrategyService implements PreloadingStrategy {\n  isLoggedIn$: Observable<boolean | null> = this.store.select(selectIsLoggedIn);\n\n  constructor(private store: Store<GlobalState>, private router: Router) {\n  }\n\n  // tslint:disable-next-line:no-any\n  preload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return this.isLoggedIn$.pipe(\n      mergeMap((isLoggedIn) => {\n        if (!isLoggedIn) {\n          return of(null);\n        }\n\n        const requestedPage = this.router.url.split('/').pop()!.split('?')[0];\n\n        return route.data?.usedBy?.includes(requestedPage) ? fn() : of(null);\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DBService",
            "id": "injectable-DBService-6b56a40c99e20260d5e5d61265932338",
            "file": "src/app/core/services/db.service.ts",
            "properties": [
                {
                    "name": "dataBase",
                    "type": "IDBPDatabase<ShoppingListItemDB> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "createDataBase",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<IDBPDatabase<ShoppingListItemDB>>",
                    "typeParameters": [],
                    "line": 18,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "write",
                    "args": [
                        {
                            "name": "item",
                            "type": "SyncItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SyncItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { IDBPDatabase, openDB } from 'idb';\nimport { ShoppingListItemDB, SyncItem } from '../models/model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DBService {\n\n  dataBase: IDBPDatabase<ShoppingListItemDB> | undefined;\n\n  constructor() {\n    this.createDataBase()\n      .then((database: IDBPDatabase<ShoppingListItemDB>) => this.dataBase = database)\n      .catch((err) => console.log('IndexedDB could not be created \\n') + err);\n  }\n\n  async createDataBase(): Promise<IDBPDatabase<ShoppingListItemDB>> {\n    return await openDB<ShoppingListItemDB>('shoppingListItems', 2, {\n      upgrade(db: IDBPDatabase<ShoppingListItemDB>): void {\n        db.createObjectStore('syncItems', {\n          keyPath: 'keyPath',\n        });\n      },\n    });\n  }\n\n  write(item: SyncItem): Promise<void> {\n    if (this.dataBase) {\n      const transaction = this.dataBase.transaction('syncItems', 'readwrite');\n      const store = transaction.objectStore('syncItems');\n      return store.put(item).then(() => transaction.done);\n    }\n    return Promise.reject();\n  }\n\n}\n\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "DialogService",
            "id": "injectable-DialogService-5f56c5290ad7daa3e5a1c35a73e01155",
            "file": "src/app/core/services/dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>"
                        },
                        {
                            "name": "data",
                            "type": "D"
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<T>",
                    "typeParameters": [
                        "T",
                        "D"
                    ],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "D",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { ComponentType } from '@angular/cdk/overlay';\nimport { Injectable } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DialogService {\n\n  constructor(\n    private dialog: MatDialog,\n  ) {\n  }\n\n  openDialog<T, D extends object>(component: ComponentType<T>, data: D): MatDialogRef<T> {\n    return this.dialog.open(component, {\n      data\n    });\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog"
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "I18nService",
            "id": "injectable-I18nService-726767442d62a787d5bf33fb513fc507",
            "file": "src/app/core/services/i18n.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getI18n",
                    "args": [
                        {
                            "name": "lang",
                            "type": "Language"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<I18nClient>",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "Language",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\nimport { mapI18nApiToI18nClient } from '../helpers/helpers';\nimport { I18n as I18nClient, Language } from '../models/model';\nimport { I18n as I18nApi } from '../models/model-api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class I18nService {\n  constructor(private httpClient: HttpClient) {\n  }\n\n  getI18n(lang: Language): Observable<I18nClient> {\n    return this.httpClient.get<I18nApi>(`${environment.apiUrl}/i18n/${lang}`).pipe(\n      map((i18n: I18nApi) => mapI18nApiToI18nClient(i18n))\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MealPlanersEffects",
            "id": "injectable-MealPlanersEffects-54685135e768b73cb0906cde9166ffa3",
            "file": "src/app/features/meal-planer/store/effects/meal-planers.effects.ts",
            "properties": [
                {
                    "name": "addMeal$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(MealPlanerContainerActions.addMeal, MealPlanerEffectActions.retryAddMeal),\n    withLatestFrom(this.store.select('mealPlanerState')),\n    concatMap(([action, state]) => {\n      return this.mealPlanerService.addMeal(action.mealType, state.selectedDate, state.activeMealPlaner || '', action.recipe.id || '').pipe(\n        map((mealApi: Meal) => {\n          return MealPlanerApiActions.addMealsSuccess({mealApi, optimisticId: action.optimisticId});\n        }),\n        catchError(() => {\n          return of(MealPlanerApiActions.addMealsFailure(\n            {mealType: action.mealType, recipe: action.recipe, optimisticId: action.optimisticId}\n          ));\n        })\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 232,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "changeMealPlanerIfCurrentGetsDeleted$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(MealPlanerContainerActions.deleteMealPlaner),\n    withLatestFrom(this.store),\n    filter(([{mealPlaner}, store]) => mealPlaner.id === store.mealPlanerState.activeMealPlaner),\n    map(([_, store]) => {\n      const idOfFirstMealPlaner = Object.keys(store.mealPlanerState.mealPlaners.entities)[0];\n      return MealPlanerEffectActions.setActiveMealPlaner({mealPlanerId: idOfFirstMealPlaner});\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 187,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "chooseCurrentMealPlaner$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(MealPlanerApiActions.loadMealPlanersSuccess),\n    switchMap(({mealPlaners}) => {\n      const mealPlanerIds = mealPlaners.map((mealPlaner) => mealPlaner.id);\n\n      const requestedMealPlanerId = this.activatedRoute.snapshot.queryParams.mealPlanerId;\n      if (requestedMealPlanerId && mealPlanerIds.includes(requestedMealPlanerId)) {\n        return of(MealPlanerEffectActions.setActiveMealPlaner({mealPlanerId: requestedMealPlanerId}));\n      }\n\n      const savedMealPlanerId = this.storageService.getItem('selectedMealPlanerId');\n      if (savedMealPlanerId && mealPlanerIds.includes(savedMealPlanerId)) {\n        return of(MealPlanerEffectActions.setActiveMealPlaner({mealPlanerId: savedMealPlanerId}));\n      }\n\n      return of(MealPlanerEffectActions.setActiveMealPlaner({mealPlanerId: mealPlanerIds[0]}));\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "createMealPlaner$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(\n      MealPlanerContainerActions.createMealPlaner,\n      MealPlanerEffectActions.retryCreateMealPlaner\n    ),\n    concatMap(({title}) => this.mealPlanerService.createMealPlaner(title).pipe(\n      map((mealPlaner) => {\n        return MealPlanerApiActions.createMealPlanerSuccess({mealPlaner});\n      }),\n      catchError(() => of(MealPlanerApiActions.createMealPlanerFailure({title})))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteMealPlaner$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(\n      MealPlanerContainerActions.deleteMealPlaner,\n      MealPlanerEffectActions.retryDeleteMealPlaner\n    ),\n    concatMap(({type, mealPlaner}) => {\n      return of({}).pipe(\n        delayWhen((action) =>\n          (type !== MealPlanerEffectActions.retryDeleteMealPlaner.type) ? interval(DELETION_DELAY) : interval(0)\n        ),\n        takeUntil(this.actions$.pipe(ofType(MealPlanerContainerActions.undoDeleteMealPlaner))),\n        mergeMap(() => this.mealPlanerService.deleteMealPlaner(mealPlaner.id).pipe(\n          map(() => {\n            return MealPlanerApiActions.deleteMealPlanerSuccess({mealPlaner});\n          }),\n          catchError(() => of(MealPlanerApiActions.deleteMealPlanerFailure({mealPlaner})))\n        ))\n      );\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 150,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "editMealPlaner$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(\n      MealPlanerContainerActions.editMealPlaner,\n      MealPlanerEffectActions.retryEditMealPlaner\n    ),\n    concatMap(({changes, mealPlaner}) => this.mealPlanerService.updateMealPlaner(changes).pipe(\n      map(() => {\n        return MealPlanerApiActions.editMealPlanerSuccess({mealPlaner: changes});\n      }),\n      catchError(() => of(MealPlanerApiActions.editMealPlanerFailure({changes, mealPlaner})))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "getMeal$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(\n      MealPlanerEffectActions.setActiveMealPlaner,\n      MealPlanerContainerActions.changeSelectedMealPlaner,\n      MealPlanerContainerActions.selectedDateChanged,\n    ),\n    withLatestFrom(this.store),\n    map(([_, store]) => {\n      const {activeMealPlaner, selectedDate} = store.mealPlanerState;\n      return {activeMealPlaner, selectedDate};\n    }),\n    filter(({activeMealPlaner}) => !!activeMealPlaner),\n    exhaustMap(({activeMealPlaner, selectedDate}) => {\n      const activeMealPlanerId = activeMealPlaner || ''; // activeMealPlaner has always a value here\n      return this.mealPlanerService.loadMealsByDay(activeMealPlanerId, selectedDate).pipe(\n        map((meals: Meal[]) => {\n          return meals.reduce((dayPlan, meal) => {\n            if (!dayPlan.hasOwnProperty(meal.type)) {\n              dayPlan[meal.type] = [meal];\n            } else {\n              dayPlan[meal.type].push(meal);\n            }\n            return dayPlan;\n          }, {} as DayPlan);\n        }),\n        map((dayPlan: DayPlan) => {\n          return MealPlanerApiActions.loadMealsSuccess({mealPlanerId: activeMealPlanerId, date: selectedDate, dayPlan});\n        }),\n        catchError(() => of(MealPlanerApiActions.loadMealPlanersFailure)),\n      );\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 198,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "getMealPlaners$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(MealPlanerContainerActions.loadMealPlaners),\n    withLatestFrom(this.store.select(selectUserID)),\n    filter(([_, userId]) => !!userId),\n    exhaustMap(([_, userId]) => this.mealPlanerService.getMealPlaners(userId!).pipe(\n      map((mealPlaners: MealPlaner[]) => MealPlanerApiActions.loadMealPlanersSuccess({mealPlaners})),\n      catchError(() => of(MealPlanerApiActions.loadMealPlanersFailure()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "removeMeal$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(MealPlanerContainerActions.removeMeal, MealPlanerEffectActions.retryRemoveMeal),\n    concatMap(({type, meal}) => {\n      return of({}).pipe(\n        delayWhen((action) =>\n          (type === MealPlanerContainerActions.removeMeal.type) ? interval(DELETION_DELAY) : interval(0)\n        ),\n        takeUntil(this.actions$.pipe(ofType(MealPlanerContainerActions.undoDeleteMealPlaner))),\n        concatMap(() => {\n          return this.mealPlanerService.removeMeal(meal).pipe(\n            map(() => {\n              return MealPlanerApiActions.removeMealsSuccess();\n            }),\n            catchError(() => of(MealPlanerApiActions.removeMealsFailure({meal})))\n          );\n        })\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 264,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "retryAndMeal$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(MealPlanerApiActions.addMealsFailure),\n    switchMap(({mealType, recipe, optimisticId}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            MealPlanerEffectActions.retryAddMeal({mealType, recipe, optimisticId}) :\n            MealPlanerEffectActions.undoOptimisticAddMeal({mealType, optimisticId});\n        }));\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 250,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "retryCreateMealPlaner$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(MealPlanerApiActions.createMealPlanerFailure),\n    switchMap(({title}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        filter(({dismissedByAction}) => dismissedByAction),\n        map(({dismissedByAction}) => MealPlanerEffectActions.retryCreateMealPlaner({title}))\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "retryDeleteMealPlaner$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(MealPlanerApiActions.deleteMealPlanerFailure),\n    switchMap(({mealPlaner}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            MealPlanerEffectActions.retryDeleteMealPlaner({mealPlaner}) :\n            MealPlanerEffectActions.undoOptimisticDeleteMealPlaner({mealPlaner});\n        }));\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 173,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "retryEditMealPlaner$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(MealPlanerApiActions.editMealPlanerFailure),\n    switchMap(({changes, mealPlaner}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            MealPlanerEffectActions.retryEditMealPlaner({changes, mealPlaner}) :\n            MealPlanerEffectActions.undoOptimisticEditMealPlaner({mealPlaner});\n        }));\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 136,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "retryRemoveMeal$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(MealPlanerApiActions.removeMealsFailure),\n    switchMap(({meal}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            MealPlanerEffectActions.retryRemoveMeal({meal}) :\n            MealPlanerEffectActions.undoOptimisticRemoveMeal({meal});\n        }));\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 285,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "setLocalStorageForActiveMealPlaner$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(\n      MealPlanerEffectActions.setActiveMealPlaner,\n      MealPlanerContainerActions.changeSelectedMealPlaner,\n    ),\n    tap(({mealPlanerId}) => {\n      this.storageService.setItem('selectedMealPlanerId', mealPlanerId);\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "setQueryParameterForActiveMealPlaner$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(\n      MealPlanerEffectActions.setActiveMealPlaner,\n      MealPlanerContainerActions.changeSelectedMealPlaner,\n    ),\n    filter(() => stringBetweenChars(this.router.routerState.snapshot.url, '/', '?') === 'meal-planer'),\n    tap(({mealPlanerId}) => {\n      this.router.navigate([], {relativeTo: this.activatedRoute, queryParams: {mealPlanerId}});\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { GlobalState, selectUserID } from '../../../../core/store';\nimport { SnackbarService } from '../../../../core/services/snackbar.service';\nimport { MealPlanerService } from '../../services/meal-planer.service';\nimport { MealPlanerApiActions, MealPlanerContainerActions, MealPlanerEffectActions } from '../actions';\nimport {\n  catchError,\n  concatMap,\n  delayWhen,\n  exhaustMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { DayPlan, Meal, MealPlaner } from '../../../../core/models/model';\nimport { interval, of } from 'rxjs';\nimport { DELETION_DELAY } from '../../../../core/constants/constants';\nimport { StorageService } from '../../../../core/services/storage.service';\nimport { stringBetweenChars } from '../../../../core/helpers/helpers';\n\n@Injectable()\nexport class MealPlanersEffects {\n  constructor(\n    private actions$: Actions,\n    private mealPlanerService: MealPlanerService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private storageService: StorageService,\n    private snackBarService: SnackbarService,\n    private store: Store<GlobalState>) {\n  }\n\n  @Effect()\n  getMealPlaners$ = this.actions$.pipe(\n    ofType(MealPlanerContainerActions.loadMealPlaners),\n    withLatestFrom(this.store.select(selectUserID)),\n    filter(([_, userId]) => !!userId),\n    exhaustMap(([_, userId]) => this.mealPlanerService.getMealPlaners(userId!).pipe(\n      map((mealPlaners: MealPlaner[]) => MealPlanerApiActions.loadMealPlanersSuccess({mealPlaners})),\n      catchError(() => of(MealPlanerApiActions.loadMealPlanersFailure()))\n    )),\n  );\n\n  @Effect()\n  chooseCurrentMealPlaner$ = this.actions$.pipe(\n    ofType(MealPlanerApiActions.loadMealPlanersSuccess),\n    switchMap(({mealPlaners}) => {\n      const mealPlanerIds = mealPlaners.map((mealPlaner) => mealPlaner.id);\n\n      const requestedMealPlanerId = this.activatedRoute.snapshot.queryParams.mealPlanerId;\n      if (requestedMealPlanerId && mealPlanerIds.includes(requestedMealPlanerId)) {\n        return of(MealPlanerEffectActions.setActiveMealPlaner({mealPlanerId: requestedMealPlanerId}));\n      }\n\n      const savedMealPlanerId = this.storageService.getItem('selectedMealPlanerId');\n      if (savedMealPlanerId && mealPlanerIds.includes(savedMealPlanerId)) {\n        return of(MealPlanerEffectActions.setActiveMealPlaner({mealPlanerId: savedMealPlanerId}));\n      }\n\n      return of(MealPlanerEffectActions.setActiveMealPlaner({mealPlanerId: mealPlanerIds[0]}));\n    }),\n  );\n\n  @Effect({dispatch: false})\n  setQueryParameterForActiveMealPlaner$ = this.actions$.pipe(\n    ofType(\n      MealPlanerEffectActions.setActiveMealPlaner,\n      MealPlanerContainerActions.changeSelectedMealPlaner,\n    ),\n    filter(() => stringBetweenChars(this.router.routerState.snapshot.url, '/', '?') === 'meal-planer'),\n    tap(({mealPlanerId}) => {\n      this.router.navigate([], {relativeTo: this.activatedRoute, queryParams: {mealPlanerId}});\n    })\n  );\n\n  @Effect({dispatch: false})\n  setLocalStorageForActiveMealPlaner$ = this.actions$.pipe(\n    ofType(\n      MealPlanerEffectActions.setActiveMealPlaner,\n      MealPlanerContainerActions.changeSelectedMealPlaner,\n    ),\n    tap(({mealPlanerId}) => {\n      this.storageService.setItem('selectedMealPlanerId', mealPlanerId);\n    })\n  );\n\n  @Effect()\n  createMealPlaner$ = this.actions$.pipe(\n    ofType(\n      MealPlanerContainerActions.createMealPlaner,\n      MealPlanerEffectActions.retryCreateMealPlaner\n    ),\n    concatMap(({title}) => this.mealPlanerService.createMealPlaner(title).pipe(\n      map((mealPlaner) => {\n        return MealPlanerApiActions.createMealPlanerSuccess({mealPlaner});\n      }),\n      catchError(() => of(MealPlanerApiActions.createMealPlanerFailure({title})))\n    )),\n  );\n\n  @Effect()\n  retryCreateMealPlaner$ = this.actions$.pipe(\n    ofType(MealPlanerApiActions.createMealPlanerFailure),\n    switchMap(({title}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        filter(({dismissedByAction}) => dismissedByAction),\n        map(({dismissedByAction}) => MealPlanerEffectActions.retryCreateMealPlaner({title}))\n      );\n    }),\n  );\n\n  @Effect()\n  editMealPlaner$ = this.actions$.pipe(\n    ofType(\n      MealPlanerContainerActions.editMealPlaner,\n      MealPlanerEffectActions.retryEditMealPlaner\n    ),\n    concatMap(({changes, mealPlaner}) => this.mealPlanerService.updateMealPlaner(changes).pipe(\n      map(() => {\n        return MealPlanerApiActions.editMealPlanerSuccess({mealPlaner: changes});\n      }),\n      catchError(() => of(MealPlanerApiActions.editMealPlanerFailure({changes, mealPlaner})))\n    )),\n  );\n\n  @Effect()\n  retryEditMealPlaner$ = this.actions$.pipe(\n    ofType(MealPlanerApiActions.editMealPlanerFailure),\n    switchMap(({changes, mealPlaner}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            MealPlanerEffectActions.retryEditMealPlaner({changes, mealPlaner}) :\n            MealPlanerEffectActions.undoOptimisticEditMealPlaner({mealPlaner});\n        }));\n    }),\n  );\n\n  @Effect()\n  deleteMealPlaner$ = this.actions$.pipe(\n    ofType(\n      MealPlanerContainerActions.deleteMealPlaner,\n      MealPlanerEffectActions.retryDeleteMealPlaner\n    ),\n    concatMap(({type, mealPlaner}) => {\n      return of({}).pipe(\n        delayWhen((action) =>\n          (type !== MealPlanerEffectActions.retryDeleteMealPlaner.type) ? interval(DELETION_DELAY) : interval(0)\n        ),\n        takeUntil(this.actions$.pipe(ofType(MealPlanerContainerActions.undoDeleteMealPlaner))),\n        mergeMap(() => this.mealPlanerService.deleteMealPlaner(mealPlaner.id).pipe(\n          map(() => {\n            return MealPlanerApiActions.deleteMealPlanerSuccess({mealPlaner});\n          }),\n          catchError(() => of(MealPlanerApiActions.deleteMealPlanerFailure({mealPlaner})))\n        ))\n      );\n    })\n  );\n\n\n  @Effect()\n  retryDeleteMealPlaner$ = this.actions$.pipe(\n    ofType(MealPlanerApiActions.deleteMealPlanerFailure),\n    switchMap(({mealPlaner}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            MealPlanerEffectActions.retryDeleteMealPlaner({mealPlaner}) :\n            MealPlanerEffectActions.undoOptimisticDeleteMealPlaner({mealPlaner});\n        }));\n    }),\n  );\n\n  @Effect()\n  changeMealPlanerIfCurrentGetsDeleted$ = this.actions$.pipe(\n    ofType(MealPlanerContainerActions.deleteMealPlaner),\n    withLatestFrom(this.store),\n    filter(([{mealPlaner}, store]) => mealPlaner.id === store.mealPlanerState.activeMealPlaner),\n    map(([_, store]) => {\n      const idOfFirstMealPlaner = Object.keys(store.mealPlanerState.mealPlaners.entities)[0];\n      return MealPlanerEffectActions.setActiveMealPlaner({mealPlanerId: idOfFirstMealPlaner});\n    })\n  );\n\n  @Effect()\n  getMeal$ = this.actions$.pipe(\n    ofType(\n      MealPlanerEffectActions.setActiveMealPlaner,\n      MealPlanerContainerActions.changeSelectedMealPlaner,\n      MealPlanerContainerActions.selectedDateChanged,\n    ),\n    withLatestFrom(this.store),\n    map(([_, store]) => {\n      const {activeMealPlaner, selectedDate} = store.mealPlanerState;\n      return {activeMealPlaner, selectedDate};\n    }),\n    filter(({activeMealPlaner}) => !!activeMealPlaner),\n    exhaustMap(({activeMealPlaner, selectedDate}) => {\n      const activeMealPlanerId = activeMealPlaner || ''; // activeMealPlaner has always a value here\n      return this.mealPlanerService.loadMealsByDay(activeMealPlanerId, selectedDate).pipe(\n        map((meals: Meal[]) => {\n          return meals.reduce((dayPlan, meal) => {\n            if (!dayPlan.hasOwnProperty(meal.type)) {\n              dayPlan[meal.type] = [meal];\n            } else {\n              dayPlan[meal.type].push(meal);\n            }\n            return dayPlan;\n          }, {} as DayPlan);\n        }),\n        map((dayPlan: DayPlan) => {\n          return MealPlanerApiActions.loadMealsSuccess({mealPlanerId: activeMealPlanerId, date: selectedDate, dayPlan});\n        }),\n        catchError(() => of(MealPlanerApiActions.loadMealPlanersFailure)),\n      );\n    })\n  );\n\n  @Effect()\n  addMeal$ = this.actions$.pipe(\n    ofType(MealPlanerContainerActions.addMeal, MealPlanerEffectActions.retryAddMeal),\n    withLatestFrom(this.store.select('mealPlanerState')),\n    concatMap(([action, state]) => {\n      return this.mealPlanerService.addMeal(action.mealType, state.selectedDate, state.activeMealPlaner || '', action.recipe.id || '').pipe(\n        map((mealApi: Meal) => {\n          return MealPlanerApiActions.addMealsSuccess({mealApi, optimisticId: action.optimisticId});\n        }),\n        catchError(() => {\n          return of(MealPlanerApiActions.addMealsFailure(\n            {mealType: action.mealType, recipe: action.recipe, optimisticId: action.optimisticId}\n          ));\n        })\n      );\n    }),\n  );\n\n  @Effect()\n  retryAndMeal$ = this.actions$.pipe(\n    ofType(MealPlanerApiActions.addMealsFailure),\n    switchMap(({mealType, recipe, optimisticId}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            MealPlanerEffectActions.retryAddMeal({mealType, recipe, optimisticId}) :\n            MealPlanerEffectActions.undoOptimisticAddMeal({mealType, optimisticId});\n        }));\n    }),\n  );\n\n  @Effect()\n  removeMeal$ = this.actions$.pipe(\n    ofType(MealPlanerContainerActions.removeMeal, MealPlanerEffectActions.retryRemoveMeal),\n    concatMap(({type, meal}) => {\n      return of({}).pipe(\n        delayWhen((action) =>\n          (type === MealPlanerContainerActions.removeMeal.type) ? interval(DELETION_DELAY) : interval(0)\n        ),\n        takeUntil(this.actions$.pipe(ofType(MealPlanerContainerActions.undoDeleteMealPlaner))),\n        concatMap(() => {\n          return this.mealPlanerService.removeMeal(meal).pipe(\n            map(() => {\n              return MealPlanerApiActions.removeMealsSuccess();\n            }),\n            catchError(() => of(MealPlanerApiActions.removeMealsFailure({meal})))\n          );\n        })\n      );\n    }),\n  );\n\n  @Effect()\n  retryRemoveMeal$ = this.actions$.pipe(\n    ofType(MealPlanerApiActions.removeMealsFailure),\n    switchMap(({meal}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            MealPlanerEffectActions.retryRemoveMeal({meal}) :\n            MealPlanerEffectActions.undoOptimisticRemoveMeal({meal});\n        }));\n    }),\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "mealPlanerService",
                        "type": "MealPlanerService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mealPlanerService",
                        "type": "MealPlanerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MealPlanerService",
            "id": "injectable-MealPlanerService-4df7bf1571dbe02fdf3ccd26a9615887",
            "file": "src/app/features/meal-planer/services/meal-planer.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addMeal",
                    "args": [
                        {
                            "name": "type",
                            "type": "MealType"
                        },
                        {
                            "name": "date",
                            "type": "Date"
                        },
                        {
                            "name": "mealplanerId",
                            "type": "string"
                        },
                        {
                            "name": "recipeId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Meal>",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "MealType",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mealplanerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "recipeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createMealPlaner",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MealPlaner>",
                    "typeParameters": [],
                    "line": 19,
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteMealPlaner",
                    "args": [
                        {
                            "name": "mealPlanerId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "mealPlanerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMealPlaners",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MealPlaner[]>",
                    "typeParameters": [],
                    "line": 15,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadMealsByDay",
                    "args": [
                        {
                            "name": "mealPlanerId",
                            "type": "string"
                        },
                        {
                            "name": "date",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Meal[]>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "mealPlanerId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeMeal",
                    "args": [
                        {
                            "name": "meal",
                            "type": "Meal"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "meal",
                            "type": "Meal",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMealPlaner",
                    "args": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MealPlaner>",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { Meal, MealPlaner, MealType } from '../../../core/models/model';\nimport { format } from 'date-fns';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MealPlanerService {\n  constructor(private httpClient: HttpClient) {\n  }\n\n  getMealPlaners(userId: string): Observable<MealPlaner[]> {\n    return this.httpClient.get<MealPlaner[]>(`${environment.apiUrl}/mealplaners?user=${userId}`);\n  }\n\n  createMealPlaner(title: string): Observable<MealPlaner> {\n    return this.httpClient.post<MealPlaner>(`${environment.apiUrl}/mealplaners`, {title});\n  }\n\n  updateMealPlaner(mealPlaner: MealPlaner): Observable<MealPlaner> {\n    return this.httpClient.put<MealPlaner>(`${environment.apiUrl}/mealplaners/${mealPlaner.id}`, {title: mealPlaner.title});\n  }\n\n  deleteMealPlaner(mealPlanerId: string): Observable<{ DELETED: true }> {\n    return this.httpClient.delete<{ DELETED: true }>(`${environment.apiUrl}/mealplaners/${mealPlanerId}`);\n  }\n\n  loadMealsByDay(mealPlanerId: string, date: Date): Observable<Meal[]> {\n    return this.httpClient.get<Meal[]>(`${environment.apiUrl}/meals/?mealplaner=${mealPlanerId}&date=${format(date, 'yyyy-MM-dd')}`);\n  }\n\n  addMeal(type: MealType, date: Date, mealplanerId: string, recipeId: string): Observable<Meal> {\n    return this.httpClient.post<Meal>(`${environment.apiUrl}/meals`, {\n      type,\n      date: format(date, 'yyyy-MM-dd'),\n      mealplaner: mealplanerId,\n      recipe: recipeId,\n    });\n  }\n\n  removeMeal(meal: Meal): Observable<{ DELETED: true }> {\n    return this.httpClient.delete<{ DELETED: true }>(`${environment.apiUrl}/meals/${meal.id}`);\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RecipeService",
            "id": "injectable-RecipeService-f90541741b5020f52010dc277fcf72df",
            "file": "src/app/features/cookbook/services/recipe.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "deleteRecipe",
                    "args": [
                        {
                            "name": "recipeId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "recipeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editRecipe",
                    "args": [
                        {
                            "name": "cookBookId",
                            "type": "string"
                        },
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Recipe>",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "cookBookId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadRecipe",
                    "args": [
                        {
                            "name": "recipeId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Recipe>",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "recipeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadRecipes",
                    "args": [
                        {
                            "name": "cookBookId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Recipe[]>",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "cookBookId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveRecipe",
                    "args": [
                        {
                            "name": "cookBookId",
                            "type": "string"
                        },
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Recipe>",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "cookBookId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../../environments/environment';\nimport { Recipe } from '../../../core/models/model';\n\n@Injectable()\nexport class RecipeService {\n  constructor(private httpClient: HttpClient) {\n  }\n\n  loadRecipes(cookBookId: string): Observable<Recipe[]> {\n    return this.httpClient.get<Recipe[]>(`${environment.apiUrl}/recipes?cookbook=${cookBookId}&_sort=title:asc`);\n  }\n\n  loadRecipe(recipeId: string): Observable<Recipe> {\n    return this.httpClient.get<Recipe>(`${environment.apiUrl}/recipes/${recipeId}`);\n  }\n\n  saveRecipe(cookBookId: string, recipe: Recipe): Observable<Recipe> {\n    return this.httpClient.post<Recipe>(`${environment.apiUrl}/recipes`, {...recipe, cookbook: cookBookId});\n  }\n\n  editRecipe(cookBookId: string, recipe: Recipe): Observable<Recipe> {\n    return this.httpClient.put<Recipe>(`${environment.apiUrl}/recipes/${recipe.id}`, {...recipe, cookbook: cookBookId});\n  }\n\n  deleteRecipe(recipeId: string): Observable<boolean> {\n    return this.httpClient.delete<{ DELETED: boolean }>(`${environment.apiUrl}/recipes/${recipeId}`)\n      .pipe(map((result: { DELETED: boolean }) => result.DELETED));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingListEffects",
            "id": "injectable-ShoppingListEffects-0765ca3e5190f41119b71a9c74504b44",
            "file": "src/app/features/shopping-list/store/effects/shopping-list.effects.ts",
            "properties": [
                {
                    "name": "addShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.addShoppingListItem,\n      CookbookContainerActions.copyIngredientsToShoppingList,\n      ShoppingListEffectActions.retryAddShoppingListItem,\n    ),\n    concatMap(({optimisticId, shoppingListItem}) => this.shoppingListService.addShoppingListItem(shoppingListItem).pipe(\n      map((shoppingListItemApi: ShoppingListItem) => {\n        return ShoppingListApiActions.addShoppingListItemSuccess({optimisticId, shoppingListItem: shoppingListItemApi});\n      }),\n      // tslint:disable-next-line:no-any\n      catchError((error: any) => {\n        if (error.status === 504 || error.status === 0) {\n          return of(ShoppingListEffectActions.registerShoppingListItemPostForSync({basicShoppingListItem: shoppingListItem, optimisticId}));\n        } else {\n          return of(ShoppingListApiActions.addShoppingListItemFailure({optimisticId, shoppingListItem}));\n        }\n      })\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "addShoppingListItemsFromMealPlaner$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(MealPlanerContainerActions.addMeal),\n    map(({shoppingListItems}) => {\n      return {\n        shoppingListItems,\n        updateObservables: shoppingListItems.map(shoppingListItem => this.shoppingListService.addShoppingListItem(shoppingListItem))\n      };\n    }),\n    concatMap(({shoppingListItems, updateObservables}) => {\n      const a = forkJoin(updateObservables);\n      return a.pipe(\n        map((shoppingListItemsApi, index) => ShoppingListApiActions.addShoppingListItemsSuccess({shoppingListItems: shoppingListItemsApi})),\n        catchError(() => of(ShoppingListApiActions.addShoppingListItemsFailure())));\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 223,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "bulkUpdateShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListEffectActions.bulkUpdateShoppingListItems, ShoppingListEffectActions.retryUpdateShoppingListItems),\n    map(({shoppingListItems}) => {\n      return {\n        shoppingListItems,\n        updateObservables: shoppingListItems.map(shoppingListItem => this.shoppingListService.updateShoppingListItem(shoppingListItem))\n      };\n    }),\n    concatMap(({shoppingListItems, updateObservables}) => {\n      const a = forkJoin(updateObservables);\n      return a.pipe(\n        map(() => ShoppingListApiActions.updateShoppingListItemSuccess()),\n        catchError((error) => {\n          if (error.status === 504 || error.status === 0) {\n            return of(ShoppingListEffectActions.registerShoppingListItemUpdatesForSync({shoppingListItems}));\n          }\n          return of(ShoppingListApiActions.updateShoppingListItemFailure({shoppingListItems}));\n        }));\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 258,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "changeShoppingListIfCurrentGetsDeleted$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingList),\n    withLatestFrom(this.store),\n    filter(([{shoppingList}, store]) => shoppingList.id === store.shoppingListState.activeShoppingList),\n    map(([_, store]) => {\n      const idOfFirstShoppingList = Object.keys(store.shoppingListState.shoppingLists.entities)[0];\n      return ShoppingListEffectActions.setActiveShoppingList({shoppingListId: idOfFirstShoppingList});\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 400,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "chooseCurrentShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListApiActions.loadShoppingListsSuccess),\n    switchMap(({shoppingLists}) => {\n      const shoppingListsIds = shoppingLists.map((shoppingList) => shoppingList.id);\n\n      const requestedShoppingListId = this.activatedRoute.snapshot.queryParams.shoppingListId;\n      if (requestedShoppingListId && shoppingListsIds.includes(requestedShoppingListId)) {\n        return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: requestedShoppingListId}));\n      }\n\n      const savedShoppingListId = this.storageService.getItem(STORAGE_SELECTED_SHOPPING_LIST_ID);\n      if (savedShoppingListId && shoppingListsIds.includes(savedShoppingListId)) {\n        return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: savedShoppingListId}));\n      }\n\n      return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: shoppingListsIds[0]}));\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "createShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.createShoppingList, ShoppingListEffectActions.retryCreateShoppingList),\n    concatMap(({title}) => this.shoppingListService.createShoppingList(title).pipe(\n      map((shoppingList) => {\n        return ShoppingListApiActions.createShoppingListSuccess({shoppingList});\n      }),\n      catchError(() => of(ShoppingListApiActions.createShoppingListFailure({title})))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 312,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingList, ShoppingListEffectActions.retryDeleteShoppingList),\n    concatMap(({type, shoppingList}) => {\n      return of({}).pipe(\n        delayWhen((action) =>\n          (type !== ShoppingListEffectActions.retryDeleteShoppingList.type) ? interval(DELETION_DELAY) : interval(0)\n        ),\n        takeUntil(this.actions$.pipe(ofType(ShoppingListContainerActions.undoDeleteShoppingList))),\n        mergeMap(() => this.shoppingListService.deleteShoppingList(shoppingList.id).pipe(\n          map(() => {\n            return ShoppingListApiActions.deleteShoppingListSuccess({shoppingList});\n          }),\n          catchError(() => of(ShoppingListApiActions.deleteShoppingListFailure({shoppingList})))\n        ))\n      );\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 366,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "deleteShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingListItem, ShoppingListEffectActions.retryDeleteShoppingListItem),\n    concatMap(({type, shoppingListItem}) => {\n      return of({}).pipe(\n        delayWhen((action) =>\n          (type !== ShoppingListEffectActions.retryDeleteShoppingListItem.type) ? interval(DELETION_DELAY) : interval(0)\n        ),\n        takeUntil(this.actions$.pipe(ofType(ShoppingListContainerActions.undoDeleteShoppingListItem))),\n        mergeMap(() => this.shoppingListService.deleteShoppingListItem(shoppingListItem.id).pipe(\n          map(() => ShoppingListApiActions.deleteShoppingListItemSuccess({shoppingListItem})),\n          catchError((error) => {\n            if (error.status === 504 || error.status === 0) {\n              return of(ShoppingListEffectActions.registerShoppingListItemDeleteForSync({shoppingListItem}));\n            }\n            return of(ShoppingListApiActions.deleteShoppingListItemFailure({shoppingListItem}));\n          })\n        )),\n      );\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 172,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "editShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.editShoppingList, ShoppingListEffectActions.retryEditShoppingList),\n    concatMap(({changes, shoppingList}) => this.shoppingListService.updateShoppingList(changes).pipe(\n      map((editedShoppingList) => {\n        return ShoppingListApiActions.editShoppingListSuccess({shoppingList: changes});\n      }),\n      catchError(() => of(ShoppingListApiActions.editShoppingListFailure({changes, shoppingList})))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 341,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "getShoppingListItems$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListEffectActions.setActiveShoppingList, ShoppingListContainerActions.changeShoppingList),\n    exhaustMap(({shoppingListId}: SetActiveShoppingListAction | ChangeShoppingListAction) => {\n      return this.shoppingListService.getShoppingListItems(shoppingListId).pipe(\n        map((shoppingListItems: ShoppingListItem[]) => {\n          return ShoppingListApiActions.loadShoppingListItemsSuccess({shoppingListId, shoppingListItems});\n        }),\n        catchError(() => of(ShoppingListApiActions.loadShoppingListItemsFailure()))\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "getShoppingLists$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(\n      ShoppingListContainerActions.loadShoppingLists,\n      CookbookContainerActions.loadShoppingLists,\n      LoadMealDialogActions.loadShoppingLists,\n    ),\n    withLatestFrom(this.store.select(selectUserID)),\n    filter(([_, userId]) => !!userId),\n    exhaustMap(([_, userId]) => this.shoppingListService.getShoppingLists(userId!).pipe(\n      map((shoppingLists: ShoppingList[]) => ShoppingListApiActions.loadShoppingListsSuccess({shoppingLists})),\n      catchError(() => of(ShoppingListApiActions.loadShoppingListsFailure()))\n    )),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "moveShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListContainerActions.moveShoppingListItem),\n    withLatestFrom(this.store.select(selectCurrentShoppingListItems)),\n    map(([{shoppingListId, previousIndex, currentIndex}, shoppingListItems]) => {\n      const [fromIndex, toIndex] = [previousIndex, currentIndex].sort();\n      const itemsToUpdate = moveItemInArray(shoppingListItems, previousIndex, currentIndex).slice(fromIndex, toIndex + 1);\n      const maxOrder = Math.max(...itemsToUpdate.map((shoppingListItem: ShoppingListItem) => shoppingListItem.order || 0));\n\n      moveItemInArray(itemsToUpdate, previousIndex, currentIndex);\n\n      return ShoppingListEffectActions.bulkUpdateShoppingListItems({\n        shoppingListId,\n        shoppingListItems: itemsToUpdate.map((item, index) => ({...item, order: maxOrder - index})),\n      });\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 240,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "retryAddShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListApiActions.addShoppingListItemFailure),\n    switchMap(({optimisticId, shoppingListItem}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            ShoppingListEffectActions.retryAddShoppingListItem({optimisticId, shoppingListItem}) :\n            ShoppingListEffectActions.undoOptimisticAddShoppingListItem({optimisticId, shoppingListItem});\n        })\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 157,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "retryCreateShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListApiActions.createShoppingListFailure),\n    switchMap(({title}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        filter(({dismissedByAction}) => dismissedByAction),\n        map(({dismissedByAction}) => ShoppingListEffectActions.retryCreateShoppingList({title}))\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 323,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "retryDeleteShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListApiActions.deleteShoppingListFailure),\n    switchMap(({shoppingList}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            ShoppingListEffectActions.retryDeleteShoppingList({shoppingList}) :\n            ShoppingListEffectActions.undoOptimisticDeleteShoppingList({shoppingList});\n        }));\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 386,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "retryDeleteShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListApiActions.deleteShoppingListItemFailure),\n    switchMap(({shoppingListItem}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            ShoppingListEffectActions.retryDeleteShoppingListItem({shoppingListItem}) :\n            ShoppingListEffectActions.undoOptimisticDeleteShoppingListItem({shoppingListItem});\n        })\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 208,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "retryEditShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListApiActions.editShoppingListFailure),\n    switchMap(({changes, shoppingList}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            ShoppingListEffectActions.retryEditShoppingList({changes, shoppingList}) :\n            ShoppingListEffectActions.undoOptimisticEditShoppingList({shoppingList});\n        }));\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 352,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "retryUpdateShoppingListItem$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListApiActions.updateShoppingListItemFailure),\n    switchMap(({shoppingListItems}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        filter(({dismissedByAction}) => dismissedByAction),\n        map(() => ShoppingListEffectActions.retryUpdateShoppingListItems({shoppingListItems}))\n      );\n    }),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 300,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "selectNewlyCreatedShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListApiActions.createShoppingListSuccess),\n    map(({shoppingList}) => ShoppingListEffectActions.setActiveShoppingList({shoppingListId: shoppingList.id})),\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 335,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "setLocalStorageForActiveShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(\n      ShoppingListEffectActions.setActiveShoppingList,\n      ShoppingListContainerActions.changeShoppingList\n    ),\n    tap(({shoppingListId}) => {\n      this.storageService.setItem(STORAGE_SELECTED_SHOPPING_LIST_ID, shoppingListId);\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "setQueryParameterForActiveShoppingList$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(\n      ShoppingListEffectActions.setActiveShoppingList,\n      ShoppingListContainerActions.changeShoppingList,\n    ),\n    filter(() => stringBetweenChars(this.router.routerState.snapshot.url, '/', '?') === 'shopping-list'),\n    tap(({shoppingListId}) => {\n      this.router.navigate([], {relativeTo: this.activatedRoute, queryParams: {shoppingListId}});\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "syncShoppingListItemDelete",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListEffectActions.registerShoppingListItemDeleteForSync),\n    concatMap(({shoppingListItem}) => {\n        const syncItem: SyncItem = this.syncService.createSyncItem(shoppingListItem, 'DELETE');\n        return this.syncService.registerForSync(syncItem)\n          .pipe(\n            map(() => ShoppingListEffectActions.registerShoppingListItemDeleteForSyncSuccess()),\n            catchError(() => of(ShoppingListApiActions.deleteShoppingListItemFailure({shoppingListItem})))\n          );\n      }\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 194,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "syncShoppingListItemPost",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListEffectActions.registerShoppingListItemPostForSync),\n    concatMap(({basicShoppingListItem, optimisticId}) => {\n        const syncItem: SyncItem = this.syncService.createSyncItemForPost(basicShoppingListItem, optimisticId);\n        return this.syncService.registerForSync(syncItem)\n          .pipe(\n            map(() => ShoppingListEffectActions.registerShoppingListItemPostForSyncSuccess()),\n            catchError(() => of(ShoppingListApiActions.addShoppingListItemFailure({\n              optimisticId,\n              shoppingListItem: syncItem.payload.basicShoppingListItem\n            })))\n          );\n      }\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 140,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "syncShoppingListItemUpdates$",
                    "defaultValue": "this.actions$.pipe(\n    ofType(ShoppingListEffectActions.registerShoppingListItemUpdatesForSync),\n    map(({shoppingListItems}) => {\n      const syncItems: SyncItem[] = shoppingListItems\n        .map((shoppingListItem: ShoppingListItem) => this.syncService\n          .createSyncItem(shoppingListItem, 'PUT'));\n      return {\n        shoppingListItems,\n        registries: syncItems.map((syncItem: SyncItem) => this.syncService.registerForSync(syncItem))\n      };\n    }),\n    concatMap(({shoppingListItems, registries}) => {\n      return forkJoin(registries).pipe(\n        map(() => ShoppingListEffectActions.registerShoppingListItemUpdatesForSyncSuccess()),\n        catchError(() => of(ShoppingListApiActions.updateShoppingListItemFailure({shoppingListItems})))\n      );\n    })\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 280,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { forkJoin, interval, of } from 'rxjs';\nimport {\n  catchError,\n  concatMap,\n  delayWhen,\n  exhaustMap,\n  filter,\n  map,\n  mergeMap,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { DELETION_DELAY, STORAGE_SELECTED_SHOPPING_LIST_ID } from '../../../../core/constants/constants';\nimport { moveItemInArray, stringBetweenChars } from '../../../../core/helpers/helpers';\nimport { ShoppingList, ShoppingListItem, SyncItem } from '../../../../core/models/model';\nimport { ChangeShoppingListAction, SetActiveShoppingListAction } from '../../../../core/models/model-action';\nimport { SnackbarService } from '../../../../core/services/snackbar.service';\nimport { StorageService } from '../../../../core/services/storage.service';\nimport { SyncService } from '../../../../core/services/sync.service';\nimport { GlobalState, selectCurrentShoppingListItems, selectUserID } from '../../../../core/store';\nimport { CookbookContainerActions } from '../../../cookbook/store/actions';\nimport { LoadMealDialogActions, MealPlanerContainerActions } from '../../../meal-planer/store/actions';\nimport { ShoppingListService } from '../../service/shopping-list.service';\nimport { ShoppingListApiActions, ShoppingListContainerActions, ShoppingListEffectActions } from '../actions';\n\n@Injectable()\nexport class ShoppingListEffects {\n  constructor(\n    private actions$: Actions,\n    private shoppingListService: ShoppingListService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private snackBarService: SnackbarService,\n    private store: Store<GlobalState>,\n    private storageService: StorageService,\n    private syncService: SyncService,\n  ) {\n  }\n\n  @Effect()\n  getShoppingLists$ = this.actions$.pipe(\n    ofType(\n      ShoppingListContainerActions.loadShoppingLists,\n      CookbookContainerActions.loadShoppingLists,\n      LoadMealDialogActions.loadShoppingLists,\n    ),\n    withLatestFrom(this.store.select(selectUserID)),\n    filter(([_, userId]) => !!userId),\n    exhaustMap(([_, userId]) => this.shoppingListService.getShoppingLists(userId!).pipe(\n      map((shoppingLists: ShoppingList[]) => ShoppingListApiActions.loadShoppingListsSuccess({shoppingLists})),\n      catchError(() => of(ShoppingListApiActions.loadShoppingListsFailure()))\n    )),\n  );\n\n  @Effect()\n  chooseCurrentShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListApiActions.loadShoppingListsSuccess),\n    switchMap(({shoppingLists}) => {\n      const shoppingListsIds = shoppingLists.map((shoppingList) => shoppingList.id);\n\n      const requestedShoppingListId = this.activatedRoute.snapshot.queryParams.shoppingListId;\n      if (requestedShoppingListId && shoppingListsIds.includes(requestedShoppingListId)) {\n        return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: requestedShoppingListId}));\n      }\n\n      const savedShoppingListId = this.storageService.getItem(STORAGE_SELECTED_SHOPPING_LIST_ID);\n      if (savedShoppingListId && shoppingListsIds.includes(savedShoppingListId)) {\n        return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: savedShoppingListId}));\n      }\n\n      return of(ShoppingListEffectActions.setActiveShoppingList({shoppingListId: shoppingListsIds[0]}));\n    }),\n  );\n\n  @Effect({dispatch: false})\n  setQueryParameterForActiveShoppingList$ = this.actions$.pipe(\n    ofType(\n      ShoppingListEffectActions.setActiveShoppingList,\n      ShoppingListContainerActions.changeShoppingList,\n    ),\n    filter(() => stringBetweenChars(this.router.routerState.snapshot.url, '/', '?') === 'shopping-list'),\n    tap(({shoppingListId}) => {\n      this.router.navigate([], {relativeTo: this.activatedRoute, queryParams: {shoppingListId}});\n    })\n  );\n\n  @Effect({dispatch: false})\n  setLocalStorageForActiveShoppingList$ = this.actions$.pipe(\n    ofType(\n      ShoppingListEffectActions.setActiveShoppingList,\n      ShoppingListContainerActions.changeShoppingList\n    ),\n    tap(({shoppingListId}) => {\n      this.storageService.setItem(STORAGE_SELECTED_SHOPPING_LIST_ID, shoppingListId);\n    })\n  );\n\n  @Effect()\n  getShoppingListItems$ = this.actions$.pipe(\n    ofType(ShoppingListEffectActions.setActiveShoppingList, ShoppingListContainerActions.changeShoppingList),\n    exhaustMap(({shoppingListId}: SetActiveShoppingListAction | ChangeShoppingListAction) => {\n      return this.shoppingListService.getShoppingListItems(shoppingListId).pipe(\n        map((shoppingListItems: ShoppingListItem[]) => {\n          return ShoppingListApiActions.loadShoppingListItemsSuccess({shoppingListId, shoppingListItems});\n        }),\n        catchError(() => of(ShoppingListApiActions.loadShoppingListItemsFailure()))\n      );\n    }),\n  );\n\n  @Effect()\n  addShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.addShoppingListItem,\n      CookbookContainerActions.copyIngredientsToShoppingList,\n      ShoppingListEffectActions.retryAddShoppingListItem,\n    ),\n    concatMap(({optimisticId, shoppingListItem}) => this.shoppingListService.addShoppingListItem(shoppingListItem).pipe(\n      map((shoppingListItemApi: ShoppingListItem) => {\n        return ShoppingListApiActions.addShoppingListItemSuccess({optimisticId, shoppingListItem: shoppingListItemApi});\n      }),\n      // tslint:disable-next-line:no-any\n      catchError((error: any) => {\n        if (error.status === 504 || error.status === 0) {\n          return of(ShoppingListEffectActions.registerShoppingListItemPostForSync({basicShoppingListItem: shoppingListItem, optimisticId}));\n        } else {\n          return of(ShoppingListApiActions.addShoppingListItemFailure({optimisticId, shoppingListItem}));\n        }\n      })\n    )),\n  );\n\n  @Effect()\n  syncShoppingListItemPost = this.actions$.pipe(\n    ofType(ShoppingListEffectActions.registerShoppingListItemPostForSync),\n    concatMap(({basicShoppingListItem, optimisticId}) => {\n        const syncItem: SyncItem = this.syncService.createSyncItemForPost(basicShoppingListItem, optimisticId);\n        return this.syncService.registerForSync(syncItem)\n          .pipe(\n            map(() => ShoppingListEffectActions.registerShoppingListItemPostForSyncSuccess()),\n            catchError(() => of(ShoppingListApiActions.addShoppingListItemFailure({\n              optimisticId,\n              shoppingListItem: syncItem.payload.basicShoppingListItem\n            })))\n          );\n      }\n    )\n  );\n\n  @Effect()\n  retryAddShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListApiActions.addShoppingListItemFailure),\n    switchMap(({optimisticId, shoppingListItem}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            ShoppingListEffectActions.retryAddShoppingListItem({optimisticId, shoppingListItem}) :\n            ShoppingListEffectActions.undoOptimisticAddShoppingListItem({optimisticId, shoppingListItem});\n        })\n      );\n    }),\n  );\n\n  @Effect()\n  deleteShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingListItem, ShoppingListEffectActions.retryDeleteShoppingListItem),\n    concatMap(({type, shoppingListItem}) => {\n      return of({}).pipe(\n        delayWhen((action) =>\n          (type !== ShoppingListEffectActions.retryDeleteShoppingListItem.type) ? interval(DELETION_DELAY) : interval(0)\n        ),\n        takeUntil(this.actions$.pipe(ofType(ShoppingListContainerActions.undoDeleteShoppingListItem))),\n        mergeMap(() => this.shoppingListService.deleteShoppingListItem(shoppingListItem.id).pipe(\n          map(() => ShoppingListApiActions.deleteShoppingListItemSuccess({shoppingListItem})),\n          catchError((error) => {\n            if (error.status === 504 || error.status === 0) {\n              return of(ShoppingListEffectActions.registerShoppingListItemDeleteForSync({shoppingListItem}));\n            }\n            return of(ShoppingListApiActions.deleteShoppingListItemFailure({shoppingListItem}));\n          })\n        )),\n      );\n    })\n  );\n\n  @Effect()\n  syncShoppingListItemDelete = this.actions$.pipe(\n    ofType(ShoppingListEffectActions.registerShoppingListItemDeleteForSync),\n    concatMap(({shoppingListItem}) => {\n        const syncItem: SyncItem = this.syncService.createSyncItem(shoppingListItem, 'DELETE');\n        return this.syncService.registerForSync(syncItem)\n          .pipe(\n            map(() => ShoppingListEffectActions.registerShoppingListItemDeleteForSyncSuccess()),\n            catchError(() => of(ShoppingListApiActions.deleteShoppingListItemFailure({shoppingListItem})))\n          );\n      }\n    )\n  );\n\n  @Effect()\n  retryDeleteShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListApiActions.deleteShoppingListItemFailure),\n    switchMap(({shoppingListItem}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            ShoppingListEffectActions.retryDeleteShoppingListItem({shoppingListItem}) :\n            ShoppingListEffectActions.undoOptimisticDeleteShoppingListItem({shoppingListItem});\n        })\n      );\n    }),\n  );\n\n  @Effect()\n  addShoppingListItemsFromMealPlaner$ = this.actions$.pipe(\n    ofType(MealPlanerContainerActions.addMeal),\n    map(({shoppingListItems}) => {\n      return {\n        shoppingListItems,\n        updateObservables: shoppingListItems.map(shoppingListItem => this.shoppingListService.addShoppingListItem(shoppingListItem))\n      };\n    }),\n    concatMap(({shoppingListItems, updateObservables}) => {\n      const a = forkJoin(updateObservables);\n      return a.pipe(\n        map((shoppingListItemsApi, index) => ShoppingListApiActions.addShoppingListItemsSuccess({shoppingListItems: shoppingListItemsApi})),\n        catchError(() => of(ShoppingListApiActions.addShoppingListItemsFailure())));\n    })\n  );\n\n  @Effect()\n  moveShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.moveShoppingListItem),\n    withLatestFrom(this.store.select(selectCurrentShoppingListItems)),\n    map(([{shoppingListId, previousIndex, currentIndex}, shoppingListItems]) => {\n      const [fromIndex, toIndex] = [previousIndex, currentIndex].sort();\n      const itemsToUpdate = moveItemInArray(shoppingListItems, previousIndex, currentIndex).slice(fromIndex, toIndex + 1);\n      const maxOrder = Math.max(...itemsToUpdate.map((shoppingListItem: ShoppingListItem) => shoppingListItem.order || 0));\n\n      moveItemInArray(itemsToUpdate, previousIndex, currentIndex);\n\n      return ShoppingListEffectActions.bulkUpdateShoppingListItems({\n        shoppingListId,\n        shoppingListItems: itemsToUpdate.map((item, index) => ({...item, order: maxOrder - index})),\n      });\n    }),\n  );\n\n  @Effect()\n  bulkUpdateShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListEffectActions.bulkUpdateShoppingListItems, ShoppingListEffectActions.retryUpdateShoppingListItems),\n    map(({shoppingListItems}) => {\n      return {\n        shoppingListItems,\n        updateObservables: shoppingListItems.map(shoppingListItem => this.shoppingListService.updateShoppingListItem(shoppingListItem))\n      };\n    }),\n    concatMap(({shoppingListItems, updateObservables}) => {\n      const a = forkJoin(updateObservables);\n      return a.pipe(\n        map(() => ShoppingListApiActions.updateShoppingListItemSuccess()),\n        catchError((error) => {\n          if (error.status === 504 || error.status === 0) {\n            return of(ShoppingListEffectActions.registerShoppingListItemUpdatesForSync({shoppingListItems}));\n          }\n          return of(ShoppingListApiActions.updateShoppingListItemFailure({shoppingListItems}));\n        }));\n    })\n  );\n\n  @Effect()\n  syncShoppingListItemUpdates$ = this.actions$.pipe(\n    ofType(ShoppingListEffectActions.registerShoppingListItemUpdatesForSync),\n    map(({shoppingListItems}) => {\n      const syncItems: SyncItem[] = shoppingListItems\n        .map((shoppingListItem: ShoppingListItem) => this.syncService\n          .createSyncItem(shoppingListItem, 'PUT'));\n      return {\n        shoppingListItems,\n        registries: syncItems.map((syncItem: SyncItem) => this.syncService.registerForSync(syncItem))\n      };\n    }),\n    concatMap(({shoppingListItems, registries}) => {\n      return forkJoin(registries).pipe(\n        map(() => ShoppingListEffectActions.registerShoppingListItemUpdatesForSyncSuccess()),\n        catchError(() => of(ShoppingListApiActions.updateShoppingListItemFailure({shoppingListItems})))\n      );\n    })\n  );\n\n  @Effect()\n  retryUpdateShoppingListItem$ = this.actions$.pipe(\n    ofType(ShoppingListApiActions.updateShoppingListItemFailure),\n    switchMap(({shoppingListItems}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        filter(({dismissedByAction}) => dismissedByAction),\n        map(() => ShoppingListEffectActions.retryUpdateShoppingListItems({shoppingListItems}))\n      );\n    }),\n  );\n\n  @Effect()\n  createShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.createShoppingList, ShoppingListEffectActions.retryCreateShoppingList),\n    concatMap(({title}) => this.shoppingListService.createShoppingList(title).pipe(\n      map((shoppingList) => {\n        return ShoppingListApiActions.createShoppingListSuccess({shoppingList});\n      }),\n      catchError(() => of(ShoppingListApiActions.createShoppingListFailure({title})))\n    )),\n  );\n\n  @Effect()\n  retryCreateShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListApiActions.createShoppingListFailure),\n    switchMap(({title}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        filter(({dismissedByAction}) => dismissedByAction),\n        map(({dismissedByAction}) => ShoppingListEffectActions.retryCreateShoppingList({title}))\n      );\n    }),\n  );\n\n  @Effect()\n  selectNewlyCreatedShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListApiActions.createShoppingListSuccess),\n    map(({shoppingList}) => ShoppingListEffectActions.setActiveShoppingList({shoppingListId: shoppingList.id})),\n  );\n\n  @Effect()\n  editShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.editShoppingList, ShoppingListEffectActions.retryEditShoppingList),\n    concatMap(({changes, shoppingList}) => this.shoppingListService.updateShoppingList(changes).pipe(\n      map((editedShoppingList) => {\n        return ShoppingListApiActions.editShoppingListSuccess({shoppingList: changes});\n      }),\n      catchError(() => of(ShoppingListApiActions.editShoppingListFailure({changes, shoppingList})))\n    )),\n  );\n\n  @Effect()\n  retryEditShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListApiActions.editShoppingListFailure),\n    switchMap(({changes, shoppingList}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            ShoppingListEffectActions.retryEditShoppingList({changes, shoppingList}) :\n            ShoppingListEffectActions.undoOptimisticEditShoppingList({shoppingList});\n        }));\n    }),\n  );\n\n  @Effect()\n  deleteShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingList, ShoppingListEffectActions.retryDeleteShoppingList),\n    concatMap(({type, shoppingList}) => {\n      return of({}).pipe(\n        delayWhen((action) =>\n          (type !== ShoppingListEffectActions.retryDeleteShoppingList.type) ? interval(DELETION_DELAY) : interval(0)\n        ),\n        takeUntil(this.actions$.pipe(ofType(ShoppingListContainerActions.undoDeleteShoppingList))),\n        mergeMap(() => this.shoppingListService.deleteShoppingList(shoppingList.id).pipe(\n          map(() => {\n            return ShoppingListApiActions.deleteShoppingListSuccess({shoppingList});\n          }),\n          catchError(() => of(ShoppingListApiActions.deleteShoppingListFailure({shoppingList})))\n        ))\n      );\n    })\n  );\n\n\n  @Effect()\n  retryDeleteShoppingList$ = this.actions$.pipe(\n    ofType(ShoppingListApiActions.deleteShoppingListFailure),\n    switchMap(({shoppingList}) => {\n      return this.snackBarService.openSnackBar('backend-failed.error-message', 'backend-failed.retry').afterDismissed().pipe(\n        take(1),\n        map(({dismissedByAction}) => {\n          return dismissedByAction ?\n            ShoppingListEffectActions.retryDeleteShoppingList({shoppingList}) :\n            ShoppingListEffectActions.undoOptimisticDeleteShoppingList({shoppingList});\n        }));\n    }),\n  );\n\n  @Effect()\n  changeShoppingListIfCurrentGetsDeleted$ = this.actions$.pipe(\n    ofType(ShoppingListContainerActions.deleteShoppingList),\n    withLatestFrom(this.store),\n    filter(([{shoppingList}, store]) => shoppingList.id === store.shoppingListState.activeShoppingList),\n    map(([_, store]) => {\n      const idOfFirstShoppingList = Object.keys(store.shoppingListState.shoppingLists.entities)[0];\n      return ShoppingListEffectActions.setActiveShoppingList({shoppingListId: idOfFirstShoppingList});\n    })\n  );\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "shoppingListService",
                        "type": "ShoppingListService"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    },
                    {
                        "name": "syncService",
                        "type": "SyncService"
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shoppingListService",
                        "type": "ShoppingListService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "syncService",
                        "type": "SyncService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ShoppingListService",
            "id": "injectable-ShoppingListService-39646b5230cbfe9f053afb587b9e9ecc",
            "file": "src/app/features/shopping-list/service/shopping-list.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addShoppingListItem",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingListItem>",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createShoppingList",
                    "args": [
                        {
                            "name": "title",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingList>",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteShoppingList",
                    "args": [
                        {
                            "name": "shoppingListId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "shoppingListId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteShoppingListItem",
                    "args": [
                        {
                            "name": "shoppingListItemId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItemId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getShoppingListItems",
                    "args": [
                        {
                            "name": "shoppingListId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingListItem[]>",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "shoppingListId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getShoppingLists",
                    "args": [
                        {
                            "name": "userId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingList[]>",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateShoppingList",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingList>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateShoppingListItem",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ShoppingListItem>",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../../environments/environment';\nimport { BasicShoppingListItem, ShoppingList, ShoppingListItem } from '../../../core/models/model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShoppingListService {\n  constructor(private httpClient: HttpClient) {}\n\n\n  getShoppingLists(userId: string): Observable<ShoppingList[]> {\n    return this.httpClient.get<ShoppingList[]>(`${environment.apiUrl}/shopping-lists?user=${userId}`);\n  }\n\n  createShoppingList(title: string): Observable<ShoppingList> {\n    return this.httpClient.post<ShoppingList>(`${environment.apiUrl}/shopping-lists`, {title});\n  }\n\n  updateShoppingList(shoppingList: ShoppingList): Observable<ShoppingList> {\n    return this.httpClient.put<ShoppingList>(`${environment.apiUrl}/shopping-lists/${shoppingList.id}`, {title: shoppingList.title});\n  }\n\n  deleteShoppingList(shoppingListId: string): Observable<{ DELETED: true }> {\n    return this.httpClient.delete<{ DELETED: true }>(`${environment.apiUrl}/shopping-lists/${shoppingListId}`);\n  }\n\n  getShoppingListItems(shoppingListId: string): Observable<ShoppingListItem[]> {\n    return this.httpClient.get<ShoppingListItem[]>(`${environment.apiUrl}/shopping-list-items?shoppingList=${shoppingListId}`);\n  }\n\n  addShoppingListItem(shoppingListItem: BasicShoppingListItem): Observable<ShoppingListItem> {\n    return this.httpClient.post<ShoppingListItem>(`${environment.apiUrl}/shopping-list-items`, shoppingListItem);\n  }\n\n  updateShoppingListItem(shoppingListItem: ShoppingListItem): Observable<ShoppingListItem> {\n    return this.httpClient.put<ShoppingListItem>(`${environment.apiUrl}/shopping-list-items/${shoppingListItem.id}`, shoppingListItem);\n  }\n\n  deleteShoppingListItem(shoppingListItemId: string): Observable<{ DELETED: true }> {\n    return this.httpClient.delete<{ DELETED: true }>(`${environment.apiUrl}/shopping-list-items/${shoppingListItemId}`);\n  }\n}\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "httpClient",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SnackbarService",
            "id": "injectable-SnackbarService-f064c43a6ea9998717a285385796f482",
            "file": "src/app/core/services/snackbar.service.ts",
            "properties": [
                {
                    "name": "currentLang",
                    "type": "Language | undefined",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "translations",
                    "type": "I18n | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "openSnackBar",
                    "args": [
                        {
                            "name": "messageKey",
                            "type": "string"
                        },
                        {
                            "name": "actionKey",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "displayInMilliSeconds",
                            "type": "number",
                            "defaultValue": "DELETION_DELAY"
                        }
                    ],
                    "optional": false,
                    "returnType": "MatSnackBarRef<TextOnlySnackBar>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "messageKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionKey",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "displayInMilliSeconds",
                            "type": "number",
                            "defaultValue": "DELETION_DELAY",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { MatSnackBar, MatSnackBarRef } from '@angular/material/snack-bar';\nimport { TextOnlySnackBar } from '@angular/material/snack-bar/simple-snack-bar';\nimport { Store } from '@ngrx/store';\nimport { TranslatePipe } from '../../shared/pipes/translate.pipe';\nimport { DELETION_DELAY } from '../constants/constants';\nimport { I18n, Language } from '../models/model';\nimport { GlobalState, selectTranslations } from '../store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SnackbarService {\n\n  private translations: I18n | null | undefined;\n  private currentLang: Language | undefined;\n\n  constructor(\n    private snackBar: MatSnackBar,\n    private store: Store<GlobalState>,\n    private translatePipe: TranslatePipe\n  ) {\n    this.store.select(selectTranslations).subscribe((translations: I18n | null) => this.translations = translations);\n    this.store.select((state: GlobalState) => state.appState.language).subscribe((lang: Language) => this.currentLang = lang);\n  }\n\n  openSnackBar(messageKey: string, actionKey?: string , displayInMilliSeconds: number = DELETION_DELAY): MatSnackBarRef<TextOnlySnackBar> {\n    const message = this.translatePipe.transform(messageKey, this.translations || null, this.currentLang);\n    const action = actionKey ? this.translatePipe.transform(actionKey, this.translations || null, this.currentLang) : undefined;\n    return this.snackBar.open(message, action, {\n      duration: displayInMilliSeconds,\n      panelClass: 'snackbar'\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-b54a0f898182d62d68ef3e63c37bf69f",
            "file": "src/app/core/services/storage.service.ts",
            "properties": [
                {
                    "name": "storage",
                    "type": "Storage",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  private storage: Storage;\n\n  constructor() {\n    this.storage = localStorage;\n  }\n\n  setItem(key: string, value: string): void {\n    this.storage.setItem(key, value);\n  }\n\n  getItem(key: string): string {\n    const item = this.storage.getItem(key);\n    return !!item ? item : '';\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "SyncService",
            "id": "injectable-SyncService-9ef80fa7ddcb2f7c160dfa97cadc328b",
            "file": "src/app/core/services/sync.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createSyncItem",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem"
                        },
                        {
                            "name": "method",
                            "type": "SyncMethod"
                        }
                    ],
                    "optional": false,
                    "returnType": "SyncItem",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "method",
                            "type": "SyncMethod",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSyncItemForPost",
                    "args": [
                        {
                            "name": "basicShoppingListItem",
                            "type": "BasicShoppingListItem"
                        },
                        {
                            "name": "optimisticId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "SyncItem",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "basicShoppingListItem",
                            "type": "BasicShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "optimisticId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerForSync",
                    "args": [
                        {
                            "name": "item",
                            "type": "SyncItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "SyncItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, throwError } from 'rxjs';\nimport { fromPromise } from 'rxjs/internal-compatibility';\nimport { v4 as uuid } from 'uuid';\nimport { BasicShoppingListItem, ShoppingListItem, SyncItem, SyncMethod } from '../models/model';\nimport { GlobalState } from '../store';\nimport { SyncServiceActions } from '../store/actions';\nimport { DBService } from './db.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SyncService {\n\n  constructor(\n    private dbService: DBService,\n    private store: Store<GlobalState>\n  ) {\n    window.addEventListener('offline', () => store.dispatch(SyncServiceActions.setOfflineMode({isOffline: true})));\n    window.addEventListener('online', () => store.dispatch(SyncServiceActions.setOfflineMode({isOffline: false})));\n  }\n\n  registerForSync(item: SyncItem): Observable<void> {\n    if ('serviceWorker' in navigator && 'SyncManager' in window) {\n      return fromPromise(this.dbService.write(item)\n        .then(() => {\n          return navigator.serviceWorker.ready\n            .then(registration => registration.sync.register('ShoppingListItems')\n              .then(() => console.log('Sync Successfully registered'))\n              .catch((err) => console.log('Register for sync failed \\n' + err)));\n        }));\n    }\n    return throwError('Offline Mode is not available');\n  }\n\n  createSyncItemForPost(basicShoppingListItem: BasicShoppingListItem, optimisticId: string): SyncItem {\n    return {\n      payload: {\n        basicShoppingListItem,\n        id: optimisticId,\n        order: null\n      },\n      keyPath: uuid(),\n      timeStamp: new Date().getTime(),\n      method: 'POST'\n    };\n  }\n\n  createSyncItem(shoppingListItem: ShoppingListItem, method: SyncMethod): SyncItem {\n    return {\n      payload: {\n        basicShoppingListItem: {\n          title: shoppingListItem.title,\n          amount: shoppingListItem.amount,\n          unit: shoppingListItem.unit,\n          shoppingList: shoppingListItem.shoppingList\n        },\n        id: shoppingListItem.id,\n        order: shoppingListItem.order || null\n      },\n      keyPath: uuid(),\n      timeStamp: new Date().getTime(),\n      method\n    };\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dbService",
                        "type": "DBService"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dbService",
                        "type": "DBService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "RouterLinkDirectiveStub",
            "id": "directive-RouterLinkDirectiveStub-c9217ce2763c98d52dd892c167c14067",
            "file": "testing/router-link-directive.stub.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[routerLink]'\n})\nexport class RouterLinkDirectiveStub {\n  @Input('routerLink') linkParams: any;\n  navigatedTo: any = null;\n\n  @HostListener('click')\n  onClick(): void {\n    this.navigatedTo = this.linkParams;\n  }\n}\n",
            "selector": "[routerLink]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "routerLink",
                    "line": 8,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 12
                }
            ],
            "propertiesClass": [
                {
                    "name": "navigatedTo",
                    "defaultValue": "null",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": []
        }
    ],
    "components": [
        {
            "name": "AccountContainerComponent",
            "id": "component-AccountContainerComponent-fb0a5d904168e2d1614b819a9ac82c4f",
            "file": "src/app/features/auth/containers/account-container/account-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-container",
            "styleUrls": [
                "./account-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmDialogTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.pipe(select(state => state.appState.language))",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "currentUser",
                    "defaultValue": "null",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentUser$",
                    "defaultValue": "this.store.select(selectUser)",
                    "type": "Observable<User | null>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "onDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { I18n, Language, User } from '../../../../core/models/model';\nimport { GlobalState, selectTranslations, selectUser } from '../../../../core/store';\nimport { select, Store } from '@ngrx/store';\nimport { DialogService } from '../../../../core/services/dialog.service';\nimport { DeleteAccountConfirmationDialogPageComponent } from '../../pages/delete-account-confirmation-dialog-page/delete-account-confirmation-dialog-page.component';\nimport { filter, take, withLatestFrom } from 'rxjs/operators';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport { AccountContainerActions } from '../../store/actions';\n\n@Component({\n  selector: 'app-account-container',\n  templateUrl: './account-container.component.html',\n  styleUrls: ['./account-container.component.scss']\n})\nexport class AccountContainerComponent implements OnInit {\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.pipe(select(state => state.appState.language));\n  currentUser$: Observable<User | null> = this.store.select(selectUser);\n\n  private currentUser: User | null = null;\n  private confirmDialogTranslations: { [key: string]: string } = {};\n\n  constructor(private store: Store<GlobalState>, private dialogService: DialogService, private translatePipe: TranslatePipe) {\n    this.store.select(selectTranslations).pipe(\n      withLatestFrom(this.store.select((state: GlobalState) => state.appState.language))\n    ).subscribe(([translations, currentLanguage]: [I18n | null, Language]) => {\n      this.confirmDialogTranslations = {\n        'button-confirm': this.translatePipe.transform('account-delete-confirm.button-confirm', translations, currentLanguage),\n        'button-discard': this.translatePipe.transform('account-delete-confirm.button-discard', translations, currentLanguage),\n        'task-label': this.translatePipe.transform('account-delete-confirm.task-label', translations, currentLanguage),\n        'no-undo': this.translatePipe.transform('account-delete-confirm.no-undo', translations, currentLanguage),\n        title: this.translatePipe.transform('account-delete-confirm.title', translations, currentLanguage),\n        warning: this.translatePipe.transform('account-delete-confirm.warning', translations, currentLanguage),\n      };\n    });\n\n    this.currentUser$.subscribe((user) => this.currentUser = user);\n  }\n\n  ngOnInit(): void {\n  }\n\n  onDelete(): void {\n    const dialogRef = this.dialogService.openDialog(DeleteAccountConfirmationDialogPageComponent, {\n      translations: this.confirmDialogTranslations,\n      data: this.currentUser\n    });\n\n    dialogRef.afterClosed()\n      .pipe(\n        take(1),\n        filter(({confirmed}) => confirmed),\n        withLatestFrom(this.store.select(selectUser))\n      )\n      .subscribe(([_, user]) => {\n        if (this.currentUser) {\n          this.store.dispatch(AccountContainerActions.deleteAccount({user: this.currentUser}));\n        }\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./account-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-account-page\n  [currentLanguage]=\"currentLanguage$ | async\"\n  [translations]=\"translations$ | async\"\n  [user]=\"currentUser$ | async\"\n  (delete)=\"onDelete()\"\n>\n</app-account-page>\n"
        },
        {
            "name": "AccountPageComponent",
            "id": "component-AccountPageComponent-3e9804c8388f0ec47476530016011888",
            "file": "src/app/features/auth/pages/account-page/account-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account-page",
            "styleUrls": [
                "./account-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./account-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLanguage",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 12,
                    "type": "Language | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 11,
                    "type": "I18n | null"
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 13,
                    "type": "User | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter<undefined>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "deleteAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { I18n, Language, User } from '../../../../core/models/model';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\n\n@Component({\n  selector: 'app-account-page',\n  templateUrl: './account-page.component.html',\n  styleUrls: ['./account-page.component.scss']\n})\nexport class AccountPageComponent implements OnInit {\n  @Input() translations: I18n | null = {};\n  @Input() currentLanguage: Language | null = DEFAULT_LANGUAGE;\n  @Input() user: User | null = null;\n  @Output() delete: EventEmitter<undefined> = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  deleteAccount(): void {\n    this.delete.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/settings/colors\";\n\n\n.account-page {\n  color: $text-100;\n\n  &__heading {\n    font-size: $font-size-medium;\n  }\n\n  &__lead-text {\n    margin: $spacing-small 0 $spacing-medium 0;\n    line-height: 1.8;\n  }\n\n  &__delete-button,\n  &__support-link {\n    background: none;\n    border: none;\n    padding: 0;\n    color: $blue_100;\n    cursor: pointer;\n    text-decoration: none;\n\n    &:hover {\n      color: $blue_80;\n    }\n\n    &:focus {\n      color: $blue_80;\n    }\n  }\n\n  &__action {\n    padding: $spacing-small 0;\n    border-top: 1px solid $blue-grey_30;\n\n    &:last-child {\n      border-bottom: 1px solid $blue-grey_30;\n    }\n  }\n}\n",
                    "styleUrl": "./account-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 14
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"account-page container\">\n  <h1 class=\"account-page__heading\">{{'account.greeting' | translate:translations:currentLanguage}} {{user?.name}}, </h1>\n  <div class=\"account-page__lead-text\">\n    {{ 'account.lead-text' | translate:translations:currentLanguage}}\n  </div>\n\n  <section class=\"account-page__actions\">\n    <div class=\"account-page__action\">\n      <button type=\"button\" class=\"account-page__delete-button\" (click)=\"deleteAccount()\">{{'account.delete' | translate:translations:currentLanguage}}</button>\n    </div>\n    <div class=\"account-page__action\">\n      <a class=\"account-page__support-link\" href=\"mailto:info@missionweb.ch\">{{'account.support' | translate:translations:currentLanguage}}</a>\n    </div>\n  </section>\n</div>\n"
        },
        {
            "name": "AddMealDialogComponent",
            "id": "component-AddMealDialogComponent-f7a0d47ac9b2128434fb0c96fba6868b",
            "file": "src/app/features/meal-planer/containers/add-meal-dialog/add-meal-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-meal-dialog",
            "styleUrls": [
                "./add-meal-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-meal-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cookBooks$",
                    "defaultValue": "this.store.select(selectCookbooks)",
                    "type": "Observable<[] | null>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.select((state: GlobalState) => state.appState.language)",
                    "type": "Observable<Language | null>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "dialogData",
                    "type": "DialogData<literal type>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<AddMealDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditing",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "preSelectedCookbookId$",
                    "defaultValue": "this.store.select(selectActiveCookbookId)",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "preSelectedShoppingListId$",
                    "defaultValue": "this.store.select(activeShoppingListId)",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "recipes$",
                    "defaultValue": "this.store.select(selectRecipes)",
                    "type": "Observable<literal type | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "shoppingLists$",
                    "defaultValue": "this.store.select(selectShoppingLists)",
                    "type": "Observable<[] | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "addRecipe",
                    "args": [
                        {
                            "type": "MealPlanerAddEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "type": "MealPlanerAddEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "onSelectedCookbookChanged",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Cookbook, DialogData, I18n, Language, MealPlanerAddEvent, MealType, Recipe, ShoppingList } from '../../../../core/models/model';\nimport { Store } from '@ngrx/store';\nimport {\n  activeShoppingListId,\n  GlobalState,\n  selectActiveCookbookId,\n  selectCookbooks,\n  selectRecipes,\n  selectShoppingLists,\n  selectTranslations\n} from '../../../../core/store';\nimport { LoadMealDialogActions } from '../../store/actions';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-add-meal-dialog',\n  templateUrl: './add-meal-dialog.component.html',\n  styleUrls: ['./add-meal-dialog.component.scss']\n})\nexport class AddMealDialogComponent implements OnInit {\n  public isEditing = false;\n  recipes$: Observable<{ [key: string]: Recipe[] } | undefined> = this.store.select(selectRecipes);\n  preSelectedCookbookId$: Observable<string> = this.store.select(selectActiveCookbookId);\n  preSelectedShoppingListId$: Observable<string | undefined> = this.store.select(activeShoppingListId);\n  shoppingLists$: Observable<ShoppingList[] | undefined> = this.store.select(selectShoppingLists);\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language | null> = this.store.select((state: GlobalState) => state.appState.language);\n  cookBooks$: Observable<Cookbook[] | null> = this.store.select(selectCookbooks);\n\n\n  constructor(\n    public dialogRef: MatDialogRef<AddMealDialogComponent>,\n    private store: Store<GlobalState>,\n    @Inject(MAT_DIALOG_DATA) public dialogData: DialogData<{ mealType: MealType }>,\n  ) {}\n\n  ngOnInit(): void {\n    this.store.dispatch(LoadMealDialogActions.loadShoppingLists());\n    this.store.dispatch(LoadMealDialogActions.loadCookbooks());\n  }\n\n  addRecipe({recipe, shoppingListItems}: MealPlanerAddEvent): void {\n    this.dialogRef.close({\n      event: 'addMeal',\n      mealType: this.dialogData.data.mealType,\n      recipe,\n      shoppingListItems\n    });\n  }\n\n  onSelectedCookbookChanged(id: string): void {\n    this.store.dispatch(LoadMealDialogActions.loadRecipesForSelectedCookbook({id}));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./add-meal-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddMealDialogComponent>"
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<literal type>"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddMealDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<literal type>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-add-meal-dialog-page\n  [recipes]=\"recipes$ | async\"\n  [translations]=\"translations$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n  [cookbooks]=\"cookBooks$ | async\"\n  [preSelectedCookbookId]=\"preSelectedCookbookId$ | async\"\n  [preSelectedShoppingListId]=\"preSelectedShoppingListId$ | async\"\n  [shoppingLists]=\"shoppingLists$ | async\"\n  (addRecipe)=\"addRecipe($event)\"\n  (changeSelectedCookbook)=\"onSelectedCookbookChanged($event)\"\n>\n</app-add-meal-dialog-page>\n"
        },
        {
            "name": "AddMealDialogPageComponent",
            "id": "component-AddMealDialogPageComponent-ad5f8ab64791d8615981c161869f60c5",
            "file": "src/app/features/meal-planer/pages/add-meal-dialog-page/add-meal-dialog-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-meal-dialog-page",
            "styleUrls": [
                "./add-meal-dialog-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-meal-dialog-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cookbooks",
                    "defaultValue": "null",
                    "line": 15,
                    "type": "Cookbook[] | null"
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "null",
                    "line": 12,
                    "type": "Language | null"
                },
                {
                    "name": "preSelectedCookbookId",
                    "defaultValue": "undefined",
                    "line": 13,
                    "type": "string | null | undefined"
                },
                {
                    "name": "preSelectedShoppingListId",
                    "defaultValue": "undefined",
                    "line": 14,
                    "type": "string | null | undefined"
                },
                {
                    "name": "recipes",
                    "defaultValue": "undefined",
                    "line": 10,
                    "type": "literal type | null | undefined"
                },
                {
                    "name": "shoppingLists",
                    "defaultValue": "null",
                    "line": 16,
                    "type": "ShoppingList[] | undefined | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "null",
                    "line": 11,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "addRecipe",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter<MealPlanerAddEvent>"
                },
                {
                    "name": "changeSelectedCookbook",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "selectedRecipe",
                    "defaultValue": "undefined",
                    "type": "Recipe | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onChoseIngredients",
                    "args": [
                        {
                            "name": "shoppingListItems",
                            "type": "BasicShoppingListItem[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItems",
                            "type": "BasicShoppingListItem[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGoBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "onSelectedCookbookChanged",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { BasicShoppingListItem, Cookbook, I18n, Language, MealPlanerAddEvent, Recipe, ShoppingList } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-add-meal-dialog-page',\n  templateUrl: './add-meal-dialog-page.component.html',\n  styleUrls: ['./add-meal-dialog-page.component.scss']\n})\nexport class AddMealDialogPageComponent implements OnInit {\n  @Input() recipes: { [key: string]: Recipe[] } | null | undefined = undefined;\n  @Input() translations: I18n | null = null;\n  @Input() currentLanguage: Language | null = null;\n  @Input() preSelectedCookbookId: string | null | undefined = undefined;\n  @Input() preSelectedShoppingListId: string | null | undefined = undefined;\n  @Input() cookbooks: Cookbook[] | null = null;\n  @Input() shoppingLists: ShoppingList[] | undefined | null = null;\n  @Output() addRecipe: EventEmitter<MealPlanerAddEvent> = new EventEmitter();\n  @Output() changeSelectedCookbook: EventEmitter<string> = new EventEmitter();\n\n  selectedRecipe: Recipe | undefined = undefined;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n  onSelectRecipe(recipe: Recipe): void {\n    this.selectedRecipe = recipe;\n  }\n\n  onSelectedCookbookChanged(id: string): void {\n    this.changeSelectedCookbook.emit(id);\n  }\n\n  onChoseIngredients(shoppingListItems: BasicShoppingListItem[]): void {\n    if (this.selectedRecipe) {\n      this.addRecipe.emit({recipe: this.selectedRecipe, shoppingListItems});\n    }\n  }\n\n  onGoBack(): void {\n    this.selectedRecipe = undefined;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/functions\";\n@import \"../../../../../styles/settings/variables\";\n\n\n.add-meal-dialog {\n  height: rem(400);\n  max-height: 80%;\n  width: rem(400);\n  margin: 0;\n  padding: 0;\n  max-width: 100%;\n\n  &__actions {\n    *:nth-child(2) {\n      margin-left: $spacing-medium;\n    }\n  }\n}\n",
                    "styleUrl": "./add-meal-dialog-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-dialog-content class=\"mat-typography add-meal-dialog\">\n  <app-meal-picker\n    [hidden]=\"selectedRecipe\"\n    [recipes]=\"recipes\"\n    [cookbooks]=\"cookbooks\"\n    [translations]=\"translations\"\n    [preSelectedCookbookId]=\"preSelectedCookbookId\"\n    [currentLanguage]=\"currentLanguage\"\n    (changeSelectedCookbook)=\"onSelectedCookbookChanged($event)\"\n    (selectRecipe)=\"onSelectRecipe($event)\">\n  </app-meal-picker>\n  <app-ingredients-picker\n    *ngIf=\"selectedRecipe\"\n    [translations]=\"translations\"\n    [currentLanguage]=\"currentLanguage\"\n    [preSelectedShoppingListId]=\"preSelectedShoppingListId\"\n    [shoppingLists]=\"shoppingLists\"\n    [ingredientsList]=\"selectedRecipe.ingredients\"\n    (choseIngredients)=\"onChoseIngredients($event)\"\n    (back)=\"onGoBack()\"\n  >\n  </app-ingredients-picker>\n</mat-dialog-content>\n\n\n"
        },
        {
            "name": "AddRecipeDialogComponent",
            "id": "component-AddRecipeDialogComponent-68ffde602873ea71efc9a95d40d517e2",
            "file": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-dialog",
            "styleUrls": [
                "./add-recipe-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-recipe-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogData",
                    "type": "DialogData<Recipe>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<AddRecipeDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "ingredientsForm",
                    "defaultValue": "new FormGroup({\n    ingredients: new FormArray([])\n  })",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onAddIngredients",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "toggleSelected",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl"
                        },
                        {
                            "name": "isSelected",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSelected",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { DialogData, Recipe, RecipeIngredient, SelectedIngredient } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-recipe-dialog',\n  templateUrl: './add-recipe-dialog.component.html',\n  styleUrls: ['./add-recipe-dialog.component.scss']\n})\nexport class AddRecipeDialogComponent implements OnInit {\n  ingredientsForm: FormGroup = new FormGroup({\n    ingredients: new FormArray([])\n  });\n\n  get ingredients(): FormArray {\n    return this.ingredientsForm.controls.ingredients as FormArray;\n  }\n\n  constructor(\n    public dialogRef: MatDialogRef<AddRecipeDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public dialogData: DialogData<Recipe>,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.dialogData.data.ingredients.forEach((ingredient: RecipeIngredient) => {\n      ((this.ingredientsForm.controls.ingredients as FormArray).controls).push(new FormGroup({\n        id: new FormControl(ingredient.id),\n        isSelected: new FormControl(!ingredient.isStapleFood),\n        title: new FormControl(ingredient.title),\n        amount: new FormControl(ingredient.amount),\n        unit: new FormControl(ingredient.unit),\n        unitLabel: new FormControl(this.dialogData.translations[ingredient.unit])\n      }));\n    });\n  }\n\n  onAddIngredients(): void {\n    this.dialogRef.close({\n      event: 'selectedIngredients',\n      selectedIngredients: this.ingredients.controls.map((control: AbstractControl) => (control as FormGroup).value)\n        .filter((item: SelectedIngredient) => item.isSelected)\n    });\n  }\n\n  getFormControl(ingredient: AbstractControl, key: string): FormControl {\n    return (ingredient as FormGroup).controls[key] as FormControl;\n  }\n\n  toggleSelected(ingredient: AbstractControl, isSelected: boolean): void {\n    this.getFormControl(ingredient, 'isSelected').setValue(isSelected);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/breakpoints\";\n@import \"../../../../../styles/settings/variables\";\n\n\n\n.ingredient-dialog {\n  &__list {\n    width: 100%;\n    display: block;\n    overflow: hidden;\n  }\n\n  &__list-column {\n    display: inline-block;\n    margin-right: $spacing-small;\n\n    &:last-child {\n      margin-right: 0;\n    }\n  }\n\n  &__actions {\n    margin-top: $spacing-medium;\n  }\n}\n",
                    "styleUrl": "./add-recipe-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddRecipeDialogComponent>"
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<Recipe>"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddRecipeDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<Recipe>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "ingredients": {
                    "name": "ingredients",
                    "getSignature": {
                        "name": "ingredients",
                        "type": "",
                        "returnType": "FormArray",
                        "line": 16
                    }
                }
            },
            "templateData": "<div class=\"ingredient-dialog\">\n  <div mat-dialog-title>{{dialogData.data.title}}</div>\n  <h4>{{dialogData.translations['ingredients.label-text']}}</h4>\n  <form [formGroup]=\"ingredientsForm\" (ngSubmit)=\"onAddIngredients()\">\n    <div class=\"ingredient-dialog__list\" *ngFor=\"let ingredient of ingredients.controls\" mat-dialog-content>\n      <mat-checkbox\n        class=\"ingredient-dialog__list-item\"\n        [checked]=\"getFormControl(ingredient, 'isSelected').value\"\n        [color]=\"'primary'\"\n        [disableRipple]=\"true\"\n        (change)=\"toggleSelected(ingredient, $event.checked)\">\n          <span\n            class=\"ingredient-dialog__list-column\">{{getFormControl(ingredient, 'amount').value}}\n            {{getFormControl(ingredient, 'unitLabel').value}}</span>\n        <span class=\"ingredient-dialog__list-column\">{{getFormControl(ingredient, 'title').value}}</span>\n      </mat-checkbox>\n    </div>\n    <div class=\"ingredient-dialog__actions\" mat-dialog-actions>\n      <app-button\n        [buttonType]=\"'submit'\"\n        [buttonText]=\"dialogData.translations['button.add-to-shopping-list']\"\n        [color]=\"'accent'\"\n      >\n      </app-button>\n    </div>\n  </form>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-9e14e71eaa5fd214641e5f26d94e1a32",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.select(selectCurrentLanguage)",
                    "type": "Observable<Language | null>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isLoggedIn$",
                    "defaultValue": "this.store.select(isLoggedIn)",
                    "type": "Observable<boolean | null>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isOffline$",
                    "defaultValue": "this.store.select(isOffline)",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "language",
                            "type": "Language"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "Language",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { environment } from '../environments/environment';\nimport { I18n, Language } from './core/models/model';\nimport { GlobalState, isLoggedIn, isOffline, selectCurrentLanguage, selectTranslations } from './core/store';\nimport { NavigationActions } from './core/store/actions';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language | null> = this.store.select(selectCurrentLanguage);\n  isLoggedIn$: Observable<boolean | null> = this.store.select(isLoggedIn);\n  isOffline$: Observable<boolean> = this.store.select(isOffline);\n\n  get showBetaTeaser(): boolean {\n    return environment.showBetaTeaser;\n  }\n\n  constructor(private store: Store<GlobalState>) {}\n\n  onLogout(): void {\n    this.store.dispatch(NavigationActions.logout());\n  }\n\n  changeLanguage(language: Language): void {\n    this.store.dispatch(NavigationActions.changeLanguage({language}));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "showBetaTeaser": {
                    "name": "showBetaTeaser",
                    "getSignature": {
                        "name": "showBetaTeaser",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 20
                    }
                }
            },
            "templateData": "<app-navigation\n  [isLoggedIn]=\"isLoggedIn$ | async\"\n  [translations]=\"translations$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n  (logout)=\"onLogout()\"\n  (languageChanged)=\"changeLanguage($event)\"\n></app-navigation>\n<app-teaser\n  *ngIf=\"showBetaTeaser\"\n  [translations]=\"translations$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n  [textKey]=\"'beta.teaser'\"\n>\n</app-teaser>\n<app-teaser\n  *ngIf=\"isOffline$ | async\"\n  [translations]=\"translations$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n  [textKey]=\"'offline.teaser'\"\n>\n</app-teaser>\n\n<div id=\"main-page\" [class.main-page--beat]=\"showBetaTeaser || (isOffline$ | async)\">\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "AuthFormComponent",
            "id": "component-AuthFormComponent-8aa10bd6e39c98977cf2c9270d396f0e",
            "file": "src/app/features/auth/components/auth-form/auth-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth-form",
            "styleUrls": [
                "./auth-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "authForm",
                    "defaultValue": "new FormGroup({})",
                    "line": 15,
                    "type": "FormGroup"
                },
                {
                    "name": "backedErrorMessage",
                    "line": 14,
                    "type": "string | undefined"
                },
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "line": 13
                },
                {
                    "name": "heading",
                    "defaultValue": "''",
                    "line": 12
                },
                {
                    "name": "showButton",
                    "defaultValue": "true",
                    "line": 16
                }
            ],
            "outputsClass": [
                {
                    "name": "formSubmit",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter<LoginCredentials>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formFooter",
                    "type": "TemplateRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'formFooter'"
                        }
                    ]
                },
                {
                    "name": "formTemplate",
                    "type": "TemplateRef<any> | null",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ContentChild",
                            "stringifiedArguments": "'formTemplate'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ContentChild, EventEmitter, Input, Output, TemplateRef } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { LoginCredentials } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-auth-form',\n  templateUrl: './auth-form.component.html',\n  styleUrls: ['./auth-form.component.scss']\n})\nexport class AuthFormComponent {\n\n  @Input() heading = '';\n  @Input() buttonText = '';\n  @Input() backedErrorMessage: string | undefined;\n  @Input() authForm: FormGroup = new FormGroup({});\n  @Input() showButton = true;\n  @Output() formSubmit: EventEmitter<LoginCredentials> = new EventEmitter();\n\n  /* tslint:disable no-any*/\n  @ContentChild('formTemplate') formTemplate: TemplateRef<any> | null;\n  @ContentChild('formFooter') formFooter: TemplateRef<any> | null;\n  /* tslint:enable no-any*/\n\n  constructor() {\n    this.formTemplate = null;\n    this.formFooter = null;\n  }\n\n  onSubmit(): void {\n    this.formSubmit.emit(this.authForm?.value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/settings/functions\";\n\n.auth-form {\n  max-width: rem(500);\n\n  &__header {\n    background: $blue_100;\n    color: $blue_10;\n    text-align: center;\n    font-size: $font-size-medium;\n    letter-spacing: rem(3);\n    padding: $spacing-medium 0;\n    margin: 0 $spacing-medium;\n  }\n\n  &__form {\n    background: $blue-grey_10;\n    margin: 0 $spacing-medium;\n    padding: $spacing-large 0;\n    display: flex;\n    flex-direction: column;\n  }\n\n  &__button {\n    background: $blue_100;\n    position: relative;\n    border: none;\n    display: block;\n    color: $blue-grey_10;\n    width: 100%;\n    letter-spacing: rem(3);\n    padding: $spacing-small 0;\n    cursor: pointer;\n    font-size: $font-size-normal;\n    user-select: none;\n    &:focus {\n      outline: 2px solid $blue_40;\n    }\n\n\n    &::before,\n    &::after {\n      content: \"\";\n      position: absolute;\n      display: block;\n      height: rem(10);\n      width: rem(10);\n      top: rem(26);\n      border-style: solid;\n      border-width: rem(20);\n      z-index: -1;\n    }\n\n    &::before {\n      left: rem(-20);\n      border-color: transparent $blue_70 transparent transparent;\n    }\n\n    &::after {\n      right: rem(-20);\n      border-color: transparent  transparent transparent $blue_70;\n    }\n  }\n\n  &__footer {\n    color: $blue_grey_40;\n    background: $blue-grey_10;\n    text-align: center;\n    margin: 0 $spacing-medium;\n    padding: $spacing-large 0;\n    line-height: 1.5;\n  }\n\n  &__backend-error {\n    width: 80%;\n    padding: $spacing-small $spacing-tiny;\n    color: $red_10;\n    background: $red_50;\n    margin: 0 auto;\n    border-radius: $border-radius-default;\n  }\n\n  &__link {\n    color: $blue_80;\n  }\n}\n",
                    "styleUrl": "./auth-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "templateData": "<div class=\"container auth-form\">\n  <div class=\"auth-form__header\">\n    {{heading}}\n  </div>\n  <form [formGroup]=\"authForm\" (ngSubmit)=\"onSubmit()\">\n\n    <div class=\"auth-form__form\">\n      <div class=\"auth-form__backend-error\" *ngIf=\"backedErrorMessage\">\n        {{backedErrorMessage}}\n      </div>\n\n      <ng-container *ngTemplateOutlet=\"formTemplate; context: {form: authForm}\"></ng-container>\n    </div>\n\n    <button *ngIf=\"showButton\" class=\"auth-form__button\">{{ buttonText }}</button>\n  </form>\n\n  <section *ngIf=\"showButton\" class=\"auth-form__footer\">\n    <ng-container [ngTemplateOutlet]=\"formFooter\"></ng-container>\n  </section>\n</div>\n\n\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-5fbe89dd6b22be67f5bdb2bd71fdfc40",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "line": 11
                },
                {
                    "name": "buttonType",
                    "defaultValue": "'button'",
                    "line": 12
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "line": 15
                },
                {
                    "name": "e2eTestName",
                    "defaultValue": "''",
                    "line": 14
                },
                {
                    "name": "hasErrors",
                    "defaultValue": "false",
                    "line": 19
                },
                {
                    "name": "iconLeft",
                    "line": 16,
                    "type": "IconName | undefined"
                },
                {
                    "name": "iconRight",
                    "line": 17,
                    "type": "IconName | undefined"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 13
                },
                {
                    "name": "isInputGroup",
                    "defaultValue": "false",
                    "line": 18
                }
            ],
            "outputsClass": [
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "line": 20,
                    "type": "EventEmitter<MouseEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IconName } from '@fortawesome/fontawesome-common-types';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent {\n\n  @Input() buttonText = '';\n  @Input() buttonType = 'button';\n  @Input() isDisabled = false;\n  @Input() e2eTestName = '';\n  @Input() color = 'primary';\n  @Input() iconLeft: IconName | undefined;\n  @Input() iconRight: IconName | undefined;\n  @Input() isInputGroup = false;\n  @Input() hasErrors = false;\n  @Output() clicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  onClick(event: MouseEvent): void {\n    this.clicked.emit(event);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/mixins/forms\";\n\n.button{\n  cursor: pointer;\n  @include button();\n  @include buttonColors();\n  @include buttonIcons();\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n  class=\"button\"\n  [disabled]=\"isDisabled\"\n  [attr.data-test]=\"e2eTestName\"\n  [type]=\"buttonType\"\n  (click)=\"onClick($event)\"\n  [ngClass]=\"{\n  'button--color-inverted': color === 'inverted' && !isDisabled,\n  'button--color-accent': color === 'accent' && !isDisabled,\n  'button--color-warning': color === 'warn' && !isDisabled,\n  'button--color-disabled': isDisabled,\n  'button--warning-border': hasErrors\n  }\"\n>\n  <fa-icon *ngIf=\"iconLeft\"\n           [icon]=\"['fas', iconLeft]\"\n           class=\"icon-left\"\n  ></fa-icon>\n  {{buttonText}}\n  <fa-icon *ngIf=\"iconRight\"\n           [icon]=\"['fas', iconRight]\"\n           class=\"icon-right\"\n  ></fa-icon>\n</button>\n"
        },
        {
            "name": "ButtonLinkComponent",
            "id": "component-ButtonLinkComponent-cc7d69ec2336446c5c4ea7770fbd41c3",
            "file": "dist/mealplaner-gzip/shared/components/button-link/button-link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-link",
            "styleUrls": [
                "./button-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-button-link',\n  templateUrl: './button-link.component.html',\n  styleUrls: ['./button-link.component.scss']\n})\nexport class ButtonLinkComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>button-link works!</p>\n"
        },
        {
            "name": "ButtonLinkComponent",
            "id": "component-ButtonLinkComponent-78bdcc71e57cb01720c7fd6887e97326-1",
            "file": "src/app/shared/components/button-link/button-link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-link",
            "styleUrls": [
                "./button-link.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "line": 14
                },
                {
                    "name": "e2eTestName",
                    "defaultValue": "''",
                    "line": 11
                },
                {
                    "name": "iconLeft",
                    "line": 15,
                    "type": "IconName | undefined"
                },
                {
                    "name": "iconRight",
                    "line": 16,
                    "type": "IconName | undefined"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 13
                },
                {
                    "name": "link",
                    "defaultValue": "''",
                    "line": 12
                },
                {
                    "name": "linkText",
                    "defaultValue": "''",
                    "line": 10
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { IconName } from '@fortawesome/fontawesome-common-types';\n\n@Component({\n  selector: 'app-button-link',\n  templateUrl: './button-link.component.html',\n  styleUrls: ['./button-link.component.scss']\n})\nexport class ButtonLinkComponent implements OnInit {\n  @Input() linkText = '';\n  @Input() e2eTestName = '';\n  @Input() link = '';\n  @Input() isDisabled = false;\n  @Input() color = 'primary';\n  @Input() iconLeft: IconName | undefined;\n  @Input() iconRight: IconName | undefined;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/mixins/forms\";\n\n.button-link {\n  background-color: $blue_90;\n  color: $blue-grey_10;\n  text-decoration: none;\n  @include button();\n  @include buttonColors();\n  @include buttonIcons();\n\n}\n",
                    "styleUrl": "./button-link.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonLinkComponent-1",
            "templateData": "<a\n  class=\"button-link\"\n  [attr.data-test]=\"e2eTestName\"\n  [routerLink]=\"link\"\n  [ngClass]=\"{\n    'button-link--color-inverted': color === 'inverted' && !isDisabled,\n    'button-link--color-accent': color === 'accent' && !isDisabled,\n    'button-link--color-warning': color === 'warn' && !isDisabled,\n    'button-link--color-disabled': isDisabled\n  }\"\n>\n  <fa-icon *ngIf=\"iconLeft\"\n           [icon]=\"['fas', iconLeft]\"\n           class=\"icon-left\"\n  ></fa-icon>\n  {{linkText}}\n  <fa-icon *ngIf=\"iconRight\"\n           [icon]=\"['fas', iconRight]\"\n           class=\"icon-right\"\n  ></fa-icon>\n</a>\n"
        },
        {
            "name": "CookbookContainerComponent",
            "id": "component-CookbookContainerComponent-e141d44fc92c3454ab414cebe6b8532a",
            "file": "src/app/features/cookbook/containers/cookbook-container/cookbook-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cookbook-container",
            "styleUrls": [
                "./cookbook-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cookbook-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeShoppingList$",
                    "defaultValue": "this.store.select(activeShoppingList)",
                    "type": "Observable<ShoppingList | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "addRecipeDialogTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "cookbooks$",
                    "defaultValue": "this.store.select(selectCookbooks)",
                    "type": "Observable<Cookbook[]>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "createListDialogTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.select((state: GlobalState) => state.appState.language)",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "editListDialogTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isOffline$",
                    "defaultValue": "this.store.select(isOffline)",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "recipes$",
                    "defaultValue": "this.selectRecipes()",
                    "type": "Observable<Recipe[]>",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "selectedCookbook$",
                    "type": "Observable<Cookbook | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70
                },
                {
                    "name": "onClickRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateCookbook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181
                },
                {
                    "name": "onCreateRecipe",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127
                },
                {
                    "name": "onDeleteCookbook",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditCookbook",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditRecipe",
                    "args": [
                        {
                            "name": "recipeId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "jsdoctags": [
                        {
                            "name": "recipeId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchStringChanged",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectCookbook",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectRecipes",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Recipe[]>",
                    "typeParameters": [],
                    "line": 174
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subject } from 'rxjs';\nimport { map, switchMap, take, withLatestFrom } from 'rxjs/operators';\nimport { v4 as uuid } from 'uuid';\nimport { mapSelectedIngredientToBasicShoppingListItem } from '../../../../core/helpers/helpers';\nimport {\n  BasicShoppingListItem,\n  Cookbook,\n  CreateListDialogEvent,\n  EditListDialogEvent,\n  I18n,\n  Language,\n  List,\n  Recipe,\n  RecipeViewDialogEvent,\n  SelectedIngredient,\n  ShoppingList\n} from '../../../../core/models/model';\nimport { DialogService } from '../../../../core/services/dialog.service';\nimport { SnackbarService } from '../../../../core/services/snackbar.service';\nimport {\n  activeShoppingList,\n  activeShoppingListId,\n  GlobalState,\n  isOffline,\n  selectActiveCookbookId,\n  selectCookbooks,\n  selectedCookbook,\n  selectTranslations\n} from '../../../../core/store';\n\n\nimport { EditListDialogComponent } from '../../../../shared/components/edit-list-dialog/edit-list-dialog.component';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport { AddRecipeDialogComponent } from '../../components/add-recipe-dialog/add-recipe-dialog.component';\nimport { CookbookApiActions, CookbookContainerActions } from '../../store/actions';\nimport { copyIngredientsToShoppingList, copyRecipeToMealplaner } from '../../store/actions/cookbook-container.actions';\n\n@Component({\n  selector: 'app-cookbook-container',\n  templateUrl: './cookbook-container.component.html',\n  styleUrls: ['./cookbook-container.component.scss']\n})\nexport class CookbookContainerComponent implements OnInit, OnDestroy {\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.select((state: GlobalState) => state.appState.language);\n  recipes$: Observable<Recipe[]> = this.selectRecipes();\n  cookbooks$: Observable<Cookbook[]> = this.store.select(selectCookbooks);\n  selectedCookbook$: Observable<Cookbook | undefined>;\n  activeShoppingList$: Observable<ShoppingList | undefined> = this.store.select(activeShoppingList);\n  isOffline$: Observable<boolean> = this.store.select(isOffline);\n  private destroy$: Subject<void> = new Subject<void>();\n\n  private addRecipeDialogTranslations: {[key: string]: string} = {};\n  private createListDialogTranslations: {[key: string]: string} = {};\n  private editListDialogTranslations: {[key: string]: string} = {};\n\n  constructor(\n    private store: Store<GlobalState>,\n    private router: Router,\n    private snackBarService: SnackbarService,\n    private dialogService: DialogService,\n    private translatePipe: TranslatePipe,\n  ) {\n    this.selectedCookbook$ = this.store.select(selectedCookbook);\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(CookbookContainerActions.loadCookbook());\n    this.activeShoppingList$.pipe(take(1)).subscribe((shoppingList: ShoppingList | undefined) => {\n      if (!shoppingList) {\n        this.store.dispatch(CookbookContainerActions.loadShoppingLists());\n      }\n    });\n    this.store.select(selectTranslations).pipe(\n      withLatestFrom(this.store.select((state: GlobalState) => state.appState.language))\n    ).subscribe(([translations, currentLanguage]: [I18n | null, Language]) => {\n      this.addRecipeDialogTranslations = {\n        'ingredients.label-text': this.translatePipe.transform('ingredients.label-text', translations, currentLanguage),\n        'button.add-to-shopping-list': this.translatePipe.transform('button.add-to-shopping-list', translations, currentLanguage),\n        'button.add-to-mealplaner': this.translatePipe.transform('button.add-to-mealplaner', translations, currentLanguage),\n        kg: 'kg',\n        g: 'g',\n        l: 'l',\n        dl: 'dl',\n        ml: 'ml',\n        tableSpoon: this.translatePipe.transform('unit.table-spoon', translations, currentLanguage),\n        coffeeSpoon: this.translatePipe.transform('unit.coffee-spoon', translations, currentLanguage),\n        pinch: this.translatePipe.transform('unit.pinch', translations, currentLanguage),\n        piece: this.translatePipe.transform('unit.piece', translations, currentLanguage),\n        pack: this.translatePipe.transform('unit.pack', translations, currentLanguage),\n      };\n      this.createListDialogTranslations = {\n        title: this.translatePipe.transform('create-cookbook.heading', translations, currentLanguage),\n        'save-button-text': this.translatePipe.transform('create-cookbook.save-button-text', translations, currentLanguage),\n        'cancel-button-text': this.translatePipe.transform('create-cookbook.cancel-button-text', translations, currentLanguage),\n        placeholder: this.translatePipe.transform('create-cookbook.placeholder', translations, currentLanguage),\n      };\n      this.editListDialogTranslations = {\n        title: this.translatePipe.transform('edit-cookbook.heading', translations, currentLanguage),\n        'save-button-text': this.translatePipe.transform('edit-cookbook.save-button-text', translations, currentLanguage),\n        'cancel-button-text': this.translatePipe.transform('edit-cookbook.cancel-button-text', translations, currentLanguage),\n        placeholder: this.translatePipe.transform('edit-cookbook.placeholder', translations, currentLanguage),\n      };\n    });\n  }\n\n  onDeleteRecipe(recipe: Recipe): void {\n    const snackBarRef = this.snackBarService.openSnackBar('message.undo', 'message.action');\n    this.store.dispatch(CookbookContainerActions.deleteRecipeFromState({recipeToDelete: recipe}));\n    snackBarRef.afterDismissed().pipe(take(1))\n      .subscribe(({dismissedByAction}) => {\n        if (dismissedByAction) {\n          this.store.dispatch(CookbookApiActions.undoDeleteRecipeFromState({recipe}));\n        } else {\n          this.store.dispatch(CookbookContainerActions.deleteRecipe({recipe}));\n        }\n      });\n  }\n\n  onEditRecipe(recipeId: string): void {\n    this.router.navigate([`cookbook/recipe/${recipeId}`]);\n  }\n\n  onCreateRecipe(): void {\n    this.router.navigate(['cookbook/recipe']);\n  }\n\n  onClickRecipe(recipe: Recipe): void {\n    const dialogRef = this.dialogService.openDialog(AddRecipeDialogComponent, {\n      data: recipe,\n      translations: this.addRecipeDialogTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(\n        take(1),\n        withLatestFrom(this.store.select(activeShoppingListId))\n      )\n      .subscribe(([event, shoppingListId]: [RecipeViewDialogEvent, string | undefined]) => {\n        switch (event?.event) {\n          case 'recipe':\n            this.store.dispatch(copyRecipeToMealplaner({recipe: event.recipe!}));\n            break;\n          case 'selectedIngredients':\n            event.selectedIngredients\n              ?.map((item: SelectedIngredient) => mapSelectedIngredientToBasicShoppingListItem(item, shoppingListId))\n              .forEach((item: BasicShoppingListItem) => this.store.dispatch(copyIngredientsToShoppingList({\n                optimisticId: uuid(),\n                shoppingListItem: item\n              })));\n            this.activeShoppingList$.pipe(take(1)).subscribe((shoppingList: ShoppingList | undefined) => {\n              const snackBarRef = this.snackBarService.openSnackBar('message.ingredients-added-to-shoppinglist', shoppingList?.title || '');\n              snackBarRef.afterDismissed().pipe(take(1)).subscribe(({dismissedByAction}) => {\n                if (dismissedByAction) {\n                  this.router.navigate(['/shopping-list'], {queryParams: {shoppingListId: shoppingList?.id}});\n                }\n              });\n            });\n            break;\n        }\n      });\n  }\n\n  onSearchStringChanged(searchTerm: string): void {\n    this.recipes$ = this.selectRecipes().pipe(\n      map((recipes: Recipe[]) => {\n        return recipes.filter((recipe: Recipe) => recipe.title.toLowerCase().includes(searchTerm.toLowerCase()));\n      })\n    );\n  }\n\n  selectRecipes(): Observable<Recipe[]> {\n    return this.store.select(selectActiveCookbookId).pipe(\n      switchMap((activeCookbookId: string) => this.store\n        .select((state: GlobalState) => state.cookbookState.recipes[activeCookbookId]))\n    );\n  }\n\n  onCreateCookbook(): void {\n    const dialogRef = this.dialogService.openDialog(EditListDialogComponent, {\n      data: {},\n      translations: this.createListDialogTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: CreateListDialogEvent | undefined) => {\n        if (result?.event === 'create') {\n          this.store.dispatch(CookbookContainerActions.createCookbook({optimisticId: uuid(), title: result.title}));\n        }\n      });\n  }\n\n  onSelectCookbook(list: List): void {\n        this.store.dispatch(CookbookContainerActions.selectCookbook({selectedCookbookId: list.id}));\n  }\n\n  onEditCookbook(list: List): void {\n    const dialogRef = this.dialogService.openDialog(EditListDialogComponent, {\n      data: list,\n      translations: this.editListDialogTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: EditListDialogEvent | undefined) => {\n        if (result?.event === 'edit') {\n          this.store.dispatch(CookbookContainerActions.editCookbook({cookbook: result.list}));\n        }\n      });\n  }\n\n  onDeleteCookbook(list: List): void {\n    const snackBarRef = this.snackBarService.openSnackBar('message.undo', 'message.action');\n    this.store.dispatch(CookbookContainerActions.deleteCookbookFromState({cookbook: list}));\n    snackBarRef.afterDismissed().pipe(take(1))\n      .subscribe(({dismissedByAction}) => {\n        if (dismissedByAction) {\n          this.store.dispatch(CookbookApiActions.undoDeleteCookbookFromState({cookbook: list}));\n        } else {\n          this.store.dispatch(CookbookContainerActions.deleteCookbook({cookbook: list}));\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cookbook-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-cookbook-page\n  [translations]=\"translations$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n  [recipes]=\"recipes$ | async\"\n  [cookbooks]=\"cookbooks$ | async\"\n  [selectedCookbook]=\"selectedCookbook$ | async\"\n  [isOffline]=\"isOffline$ | async\"\n  (clickRecipe)=\"onClickRecipe($event)\"\n  (createRecipe)=\"onCreateRecipe()\"\n  (editRecipe)=\"onEditRecipe($event)\"\n  (deleteRecipe)=\"onDeleteRecipe($event)\"\n  (searchStringChanged)=\"onSearchStringChanged($event)\"\n  (createCookbook)=\"onCreateCookbook()\"\n  (selectCookbook)=\"onSelectCookbook($event)\"\n  (editCookbook)=\"onEditCookbook($event)\"\n  (deleteCookbook)=\"onDeleteCookbook($event)\"\n></app-cookbook-page>\n"
        },
        {
            "name": "CookbookPageComponent",
            "id": "component-CookbookPageComponent-c2b624dee9517aa7ab8725d69d5737a3",
            "file": "src/app/features/cookbook/pages/cookbook-page/cookbook-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cookbook-page",
            "styleUrls": [
                "./cookbook-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cookbook-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cookbooks",
                    "line": 14,
                    "type": "Cookbook[] | undefined | null"
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 12,
                    "type": "Language | null"
                },
                {
                    "name": "isOffline",
                    "defaultValue": "false",
                    "line": 16,
                    "type": "boolean | null"
                },
                {
                    "name": "recipes",
                    "line": 13,
                    "type": "Recipe[] | undefined | null"
                },
                {
                    "name": "selectedCookbook",
                    "line": 15,
                    "type": "Cookbook | undefined | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 11,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickRecipe",
                    "defaultValue": "new EventEmitter<Recipe>()",
                    "line": 20,
                    "type": "EventEmitter<Recipe>"
                },
                {
                    "name": "createCookbook",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter<undefined>"
                },
                {
                    "name": "createRecipe",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 21,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "deleteCookbook",
                    "defaultValue": "new EventEmitter()",
                    "line": 25,
                    "type": "EventEmitter<List>"
                },
                {
                    "name": "deleteRecipe",
                    "defaultValue": "new EventEmitter<Recipe>()",
                    "line": 19,
                    "type": "EventEmitter<Recipe>"
                },
                {
                    "name": "editCookbook",
                    "defaultValue": "new EventEmitter()",
                    "line": 24,
                    "type": "EventEmitter<List>"
                },
                {
                    "name": "editRecipe",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 18,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "searchStringChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 17,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "selectCookbook",
                    "defaultValue": "new EventEmitter()",
                    "line": 23,
                    "type": "EventEmitter<List>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "onClickRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateCookbook",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49
                },
                {
                    "name": "onDeleteCookbook",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditCookbook",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditRecipe",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onInputChanged",
                    "args": [
                        {
                            "name": "searchTerm",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "searchTerm",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectCookbook",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { Cookbook, I18n, Language, List, Recipe } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-cookbook-page',\n  templateUrl: './cookbook-page.component.html',\n  styleUrls: ['./cookbook-page.component.scss']\n})\nexport class CookbookPageComponent {\n  @Input() translations: I18n | null = {};\n  @Input() currentLanguage: Language | null = DEFAULT_LANGUAGE;\n  @Input() recipes: Recipe[] | undefined | null;\n  @Input() cookbooks: Cookbook[] | undefined | null;\n  @Input() selectedCookbook: Cookbook | undefined | null;\n  @Input() isOffline: boolean | null = false;\n  @Output() searchStringChanged: EventEmitter<string> = new EventEmitter<string>();\n  @Output() editRecipe: EventEmitter<string> = new EventEmitter<string>();\n  @Output() deleteRecipe: EventEmitter<Recipe> = new EventEmitter<Recipe>();\n  @Output() clickRecipe: EventEmitter<Recipe> = new EventEmitter<Recipe>();\n  @Output() createRecipe: EventEmitter<void> = new EventEmitter<void>();\n  @Output() createCookbook: EventEmitter<undefined> = new EventEmitter();\n  @Output() selectCookbook: EventEmitter<List> = new EventEmitter();\n  @Output() editCookbook: EventEmitter<List> = new EventEmitter();\n  @Output() deleteCookbook: EventEmitter<List> = new EventEmitter();\n\n  onEditRecipe(id: string | undefined): void {\n    if (id) {\n      this.editRecipe.emit(id);\n    }\n  }\n\n  onDeleteRecipe(recipe: Recipe): void {\n    this.deleteRecipe.emit(recipe);\n  }\n\n  onClickRecipe(recipe: Recipe): void {\n    this.clickRecipe.emit(recipe);\n  }\n\n  onInputChanged(searchTerm: string): void {\n    this.searchStringChanged.emit(searchTerm);\n  }\n\n  click(): void {\n    this.createRecipe.emit();\n  }\n\n  onCreateCookbook(): void {\n    this.createCookbook.emit();\n  }\n\n  onSelectCookbook(list: List): void {\n    this.selectCookbook.emit(list);\n  }\n\n  onEditCookbook(list: List): void {\n    this.editCookbook.emit(list);\n  }\n\n  onDeleteCookbook(list: List): void {\n    this.deleteCookbook.emit(list);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/variables\";\n\n.create-recipe-button{\n  display: block;\n  padding-top: $spacing-large;\n}\n",
                    "styleUrl": "./cookbook-page.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"container\">\n  <app-list-header\n    [selectedList]=\"selectedCookbook\"\n    [lists]=\"cookbooks\"\n    [defaultTitle]=\"'cookbook.default-title' | translate:translations:currentLanguage\"\n    [addListLabel]=\"'cookbook.new-list' | translate:translations:currentLanguage\"\n    [buttonLabel]=\"'cookbook.my-cookbooks' | translate:translations:currentLanguage\"\n    [isOffline]=\"isOffline\"\n    (createList)=\"onCreateCookbook()\"\n    (selectList)=\"onSelectCookbook($event)\"\n    (editList)=\"onEditCookbook($event)\"\n    (deleteList)=\"onDeleteCookbook($event)\"\n  >\n  </app-list-header>\n  <app-recipe-list\n    [isOffline]=\"isOffline\"\n    [translations]=\"translations\"\n    [currentLang]=\"currentLanguage\"\n    [recipes]=\"recipes\"\n    (deleteRecipe)=\"onDeleteRecipe($event)\"\n    (editRecipe)=\"onEditRecipe($event)\"\n    (clickRecipe)=\"onClickRecipe($event)\"\n    (inputChanged)=\"onInputChanged($event)\"\n  ></app-recipe-list>\n  <app-button\n    class=\"create-recipe-button\"\n    [buttonText]=\"'button.submit' | translate: translations : currentLanguage\"\n    (click)=\"click()\"\n    [e2eTestName]=\"'add-recipe'\"\n  >\n  </app-button>\n</div>\n"
        },
        {
            "name": "DeleteAccountConfirmationDialogPageComponent",
            "id": "component-DeleteAccountConfirmationDialogPageComponent-b65b1235dab8e94d95abe90ae8de373d",
            "file": "src/app/features/auth/pages/delete-account-confirmation-dialog-page/delete-account-confirmation-dialog-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-delete-account-confirmation-dialog-page",
            "styleUrls": [
                "./delete-account-confirmation-dialog-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./delete-account-confirmation-dialog-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cookbooks",
                    "defaultValue": "null",
                    "line": 16,
                    "type": "Cookbook[] | null"
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "null",
                    "line": 13,
                    "type": "Language | null"
                },
                {
                    "name": "preSelectedCookbookId",
                    "defaultValue": "undefined",
                    "line": 14,
                    "type": "string | null | undefined"
                },
                {
                    "name": "preSelectedShoppingListId",
                    "defaultValue": "undefined",
                    "line": 15,
                    "type": "string | null | undefined"
                },
                {
                    "name": "recipes",
                    "defaultValue": "undefined",
                    "line": 11,
                    "type": "literal type | null | undefined"
                },
                {
                    "name": "shoppingLists",
                    "defaultValue": "null",
                    "line": 17,
                    "type": "ShoppingList[] | undefined | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "null",
                    "line": 12,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "addRecipe",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<MealPlanerAddEvent>"
                },
                {
                    "name": "changeSelectedCookbook",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "confirmInput",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "dialogData",
                    "type": "DialogData<User>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<DeleteAccountConfirmationDialogPageComponent>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "selectedRecipe",
                    "defaultValue": "undefined",
                    "type": "Recipe | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "discard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, OnInit, Output } from '@angular/core';\nimport { Cookbook, DialogData, I18n, Language, MealPlanerAddEvent, Recipe, ShoppingList, User } from '../../../../core/models/model';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-delete-account-confirmation-dialog-page',\n  templateUrl: './delete-account-confirmation-dialog-page.component.html',\n  styleUrls: ['./delete-account-confirmation-dialog-page.component.scss']\n})\nexport class DeleteAccountConfirmationDialogPageComponent implements OnInit {\n  @Input() recipes: { [key: string]: Recipe[] } | null | undefined = undefined;\n  @Input() translations: I18n | null = null;\n  @Input() currentLanguage: Language | null = null;\n  @Input() preSelectedCookbookId: string | null | undefined = undefined;\n  @Input() preSelectedShoppingListId: string | null | undefined = undefined;\n  @Input() cookbooks: Cookbook[] | null = null;\n  @Input() shoppingLists: ShoppingList[] | undefined | null = null;\n  @Output() addRecipe: EventEmitter<MealPlanerAddEvent> = new EventEmitter();\n  @Output() changeSelectedCookbook: EventEmitter<string> = new EventEmitter();\n\n  selectedRecipe: Recipe | undefined = undefined;\n  confirmInput = '';\n\n  get isConfirmed(): boolean {\n    return this.confirmInput === this.dialogData.data.name;\n  }\n\n  constructor(public dialogRef: MatDialogRef<DeleteAccountConfirmationDialogPageComponent>,\n              @Inject(MAT_DIALOG_DATA) public dialogData: DialogData<User>) {\n  }\n\n  ngOnInit(): void {\n    console.log(this.dialogData);\n  }\n\n  confirm(): void {\n    this.dialogRef.close({\n      confirmed: true,\n    });\n  }\n\n  discard(): void {\n    this.dialogRef.close({\n      confirmed: false,\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/functions\";\n@import \"../../../../../styles/settings/variables\";\n\n\n.delete-account-confirmation-dialog {\n  height: rem(400);\n  max-height: 80%;\n  width: rem(400);\n  margin: 0;\n  padding: 0;\n  max-width: 100%;\n\n  &__title {\n    color: $red_50;\n    font-size: $font-size-normal;\n  }\n\n  &__warning {\n    background: $red_20;\n    border-radius: $border-radius-default;\n    margin: $spacing-medium 0;\n    padding: $spacing-small;\n  }\n\n  &__no-undo {\n    margin: $spacing-medium 0;\n  }\n\n  &__confirm-text {\n    background: $blue-grey_30;\n    padding: $spacing-tiny;\n    border-radius: $border-radius-default;\n    flex-grow: 0;\n  }\n\n  &__input {\n    display: block;\n    margin: $spacing-medium 0;\n    width: 100%;\n  }\n\n  &__actions {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    margin-bottom: $spacing-medium;\n  }\n}\n",
                    "styleUrl": "./delete-account-confirmation-dialog-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteAccountConfirmationDialogPageComponent>"
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<User>"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DeleteAccountConfirmationDialogPageComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<User>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "isConfirmed": {
                    "name": "isConfirmed",
                    "getSignature": {
                        "name": "isConfirmed",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 24
                    }
                }
            },
            "templateData": "<div class=\"delete-account-confirmation-dialog\">\n  <h1 class=\"delete-account-confirmation-dialog__title\">{{dialogData.translations['title']}}</h1>\n  <div class=\"delete-account-confirmation-dialog__warning\" [innerHTML]=\"dialogData.translations['warning']\">\n  </div>\n  <div class=\"delete-account-confirmation-dialog__no-undo\">\n    {{dialogData.translations['no-undo']}}\n  </div>\n  <div class=\"delete-account-confirmation-dialog__confirm-task\">\n    <label for=\"confirm-input\">\n      {{dialogData.translations['task-label']}}\n      <br/>\n      <span class=\"delete-account-confirmation-dialog__confirm-text\">{{dialogData.data.name}}</span>\n    </label>\n    <input id=\"confirm-input\" class=\"delete-account-confirmation-dialog__input\" [(ngModel)]=\"confirmInput\"/>\n  </div>\n  <div class=\"delete-account-confirmation-dialog__actions\">\n    <app-button\n      [buttonType]=\"'button'\"\n      [buttonText]=\"dialogData.translations['button-discard']\"\n      [color]=\"'inverted'\"\n      (clicked)=\"discard()\"\n    >\n    </app-button>\n    <app-button\n      [buttonType]=\"'button'\"\n      [isDisabled]=\"!isConfirmed\"\n      [buttonText]=\"dialogData.translations['button-confirm']\"\n      [color]=\"'primary'\"\n      (clicked)=\"confirm()\"\n    >\n    </app-button>\n  </div>\n</div>\n\n\n\n"
        },
        {
            "name": "EditListDialogComponent",
            "id": "component-EditListDialogComponent-38612700b41c19ded58eb9308853e86b",
            "file": "src/app/shared/components/edit-list-dialog/edit-list-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-edit-list-dialog",
            "styleUrls": [
                "./edit-list-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edit-list-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogData",
                    "type": "DialogData<List>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<EditListDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "isEditing",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "listForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "createList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { DialogData, List } from '../../../core/models/model';\n\n@Component({\n  selector: 'app-edit-list-dialog',\n  templateUrl: './edit-list-dialog.component.html',\n  styleUrls: ['./edit-list-dialog.component.scss']\n})\nexport class EditListDialogComponent {\n  public isEditing = false;\n  public listForm: FormGroup;\n\n  constructor(\n    public dialogRef: MatDialogRef<EditListDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public dialogData: DialogData<List>,\n  ) {\n    if (dialogData.data.id) {\n      this.isEditing = true;\n    }\n\n    this.listForm = new FormGroup({\n      title: new FormControl(this.isEditing ? dialogData.data.title : '', [Validators.required])\n    });\n  }\n\n  createList(): void {\n    this.isEditing ?\n      this.dialogRef.close({\n        event: 'edit',\n        list: {...this.dialogData.data, ...this.listForm.value}\n      }) : this.dialogRef.close({event: 'create', title: this.listForm.value.title});\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.listForm?.controls[key] as FormControl;\n  }\n\n  close(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/settings/functions\";\n@import \"../../../../styles/settings/variables\";\n\n\n.creat-list-dialog {\n  max-height: rem(300);\n  width: rem(400);\n  margin: 0;\n  padding: 0;\n  max-width: 100%;\n\n  &__actions {\n    *:nth-child(2) {\n      margin-left: $spacing-medium;\n    }\n  }\n}\n\n",
                    "styleUrl": "./edit-list-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditListDialogComponent>"
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<List>"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<EditListDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<List>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form [formGroup]=\"listForm\" (ngSubmit)=\"createList()\">\n  <h2 mat-dialog-title>{{dialogData.translations['title']}}</h2>\n  <mat-dialog-content class=\"mat-typography creat-list-dialog\">\n    <app-input [placeholder]=\"dialogData.translations['placeholder']\" [name]=\"'title'\"\n               [formControl]=\"getFormControl('title')\"></app-input>\n  </mat-dialog-content>\n  <mat-dialog-actions [attr.align]=\"'end'\" class=\"creat-list-dialog__actions\">\n    <app-button [buttonText]=\"dialogData.translations['cancel-button-text']\" color=\"accent\"\n                (click)=\"close()\"></app-button>\n    <app-button [buttonText]=\"dialogData.translations['save-button-text']\" [isDisabled]=\"listForm.invalid\"\n                [buttonType]=\"'submit'\"></app-button>\n  </mat-dialog-actions>\n</form>\n\n"
        },
        {
            "name": "ForgotPasswordContainerComponent",
            "id": "component-ForgotPasswordContainerComponent-84ae06b4e0c0349b21ba9b815e722d3f",
            "file": "src/app/features/auth/containers/forgot-password-container/forgot-password-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password-container",
            "styleUrls": [
                "./forgot-password-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.pipe(select(state => state.appState.language))",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "emailQueryParam",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "passwordResetRequested",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "requestPasswordResetEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { I18n, Language } from '../../../../core/models/model';\nimport { GlobalState, selectTranslations } from '../../../../core/store';\nimport { select, Store } from '@ngrx/store';\nimport { Actions } from '@ngrx/effects';\nimport { ForgotPasswordContainerActions } from '../../store/actions';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-forgot-password-container',\n  templateUrl: './forgot-password-container.component.html',\n  styleUrls: ['./forgot-password-container.component.scss']\n})\nexport class ForgotPasswordContainerComponent {\n\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.pipe(select(state => state.appState.language));\n  passwordResetRequested = false;\n  emailQueryParam: string | undefined;\n\n\n  constructor(private store: Store<GlobalState>, private actions$: Actions, private activatedRout: ActivatedRoute) {\n    this.emailQueryParam = this.activatedRout.snapshot.queryParams?.email;\n  }\n\n  requestPasswordResetEmail(email: string): void {\n    this.store.dispatch(ForgotPasswordContainerActions.requestEmail({email}));\n    this.passwordResetRequested = true;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./forgot-password-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "activatedRout",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRout",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-forgot-password-page\n  [translations]=\"translations$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n  [emailPrefillValue]=\"emailQueryParam\"\n  [passwordResetRequested]=\"passwordResetRequested\"\n  (submitResetRequestForm)=\"requestPasswordResetEmail($event)\"\n>\n</app-forgot-password-page>\n"
        },
        {
            "name": "ForgotPasswordPageComponent",
            "id": "component-ForgotPasswordPageComponent-fa658cd2f429741724975dd884e627b3",
            "file": "src/app/features/auth/pages/forgot-password-page/forgot-password-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password-page",
            "styleUrls": [
                "./forgot-password-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLanguage",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 17,
                    "type": "Language | null"
                },
                {
                    "name": "emailPrefillValue",
                    "line": 19,
                    "type": "string | undefined"
                },
                {
                    "name": "passwordResetRequested",
                    "defaultValue": "false",
                    "line": 18
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 16,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "submitResetRequestForm",
                    "defaultValue": "new EventEmitter()",
                    "line": 20,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "requestPasswordResetCodeForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { I18n, Language } from '../../../../core/models/model';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport * as CustomValidators from '../../../../core/validators/custom-validators.validator';\nimport { translateValidationErrors } from '../../../../core/helpers/helpers';\n\n@Component({\n  selector: 'app-forgot-password-page',\n  templateUrl: './forgot-password-page.component.html',\n  styleUrls: ['./forgot-password-page.component.scss']\n})\nexport class ForgotPasswordPageComponent implements OnInit {\n\n  @Input() translations: I18n | null = {};\n  @Input() currentLanguage: Language | null = DEFAULT_LANGUAGE;\n  @Input() passwordResetRequested = false;\n  @Input() emailPrefillValue: string | undefined;\n  @Output() submitResetRequestForm: EventEmitter<string> = new EventEmitter();\n\n  requestPasswordResetCodeForm: FormGroup;\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.requestPasswordResetCodeForm = new FormGroup({\n      email: new FormControl('', [\n        Validators.required,\n        CustomValidators.email,\n      ])\n    });\n  }\n\n  ngOnInit(): void {\n    if (this.emailPrefillValue) {\n      this.requestPasswordResetCodeForm.setValue({email: this.emailPrefillValue});\n    }\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.requestPasswordResetCodeForm?.controls[key] as FormControl;\n  }\n\n  onSubmit(): void {\n    if (this.requestPasswordResetCodeForm.valid) {\n      this.submitResetRequestForm.emit(this.requestPasswordResetCodeForm?.value.email);\n      return;\n    }\n\n    this.requestPasswordResetCodeForm.markAllAsTouched();\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLanguage)\n      .filter((error, index) => index === 0);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/mixins/forms\";\n@import \"../../../../../styles/settings/variables\";\n\n\n.forgot-password-form {\n  @include authform;\n\n  &__confirmation {\n    width: 80%;\n    margin: 0 auto;\n    font-size: $font-size-small;\n    color: $blue_grey_60;\n  }\n}\n",
                    "styleUrl": "./forgot-password-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-auth-form\n  class=\"forgot-password-form\"\n  [heading]=\"'auth.forgot-password.title' | translate:translations:currentLanguage\"\n  [buttonText]=\"'auth.forgot-password.cta' | translate:translations:currentLanguage\"\n  [authForm]=\"requestPasswordResetCodeForm\"\n  [showButton]=\"!passwordResetRequested\"\n  (formSubmit)=\"onSubmit()\"\n>\n  <ng-template #formTemplate let-form=\"form\">\n    <div *ngIf=\"!passwordResetRequested; else submitMessage\" [formGroup]=\"form\">\n      <div class=\"forgot-password-form__helper\" id=\"reset-disclaimer\">\n        {{'auth.forgot-password.disclaimer' | translate:translations:currentLanguage}}\n      </div>\n      <div class=\"forgot-password-form__field\">\n        <fa-icon class=\"forgot-password-form__icon\"\n                 [icon]=\"['fas','user']\"></fa-icon>\n        <app-input\n          class=\"forgot-password-form__input\"\n          type=\"email\"\n          [border]=\"false\"\n          [name]=\"'email'\"\n          [placeholder]=\"'auth.register.email' | translate:translations:currentLanguage\"\n          [ariaDescribedBy]=\"'reset-disclaimer'\"\n          [formControl]=\"getFormControl('email')\"\n          [errors]=\"getErrorsFor('email')\"></app-input>\n      </div>\n    </div>\n\n    <ng-template #submitMessage>\n      <div class=\"forgot-password-form__confirmation\">\n        {{'auth.forgot-password.sent' | translate:translations:currentLanguage}}\n      </div>\n    </ng-template>\n  </ng-template>\n</app-auth-form>\n\n\n\n\n\n"
        },
        {
            "name": "IngredientsPickerComponent",
            "id": "component-IngredientsPickerComponent-4689497f0080d0924de5f6900868c2f5",
            "file": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-ingredients-picker",
            "styleUrls": [
                "./ingredients-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./ingredients-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLanguage",
                    "defaultValue": "null",
                    "line": 13,
                    "type": "Language | null"
                },
                {
                    "name": "ingredientsList",
                    "defaultValue": "undefined",
                    "line": 16,
                    "type": "RecipeIngredient[] | undefined"
                },
                {
                    "name": "preSelectedShoppingListId",
                    "defaultValue": "undefined",
                    "line": 14,
                    "type": "string | null | undefined"
                },
                {
                    "name": "shoppingLists",
                    "defaultValue": "null",
                    "line": 15,
                    "type": "ShoppingList[] | undefined | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "null",
                    "line": 12,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "back",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<undefined>"
                },
                {
                    "name": "choseIngredients",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter<BasicShoppingListItem[]>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "ingredientsForm",
                    "defaultValue": "new FormGroup({\n    ingredients: new FormArray([])\n  })",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedShoppingListId",
                    "defaultValue": "undefined",
                    "type": "string | null | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onChangeSelectedShoppingList",
                    "args": [
                        {
                            "name": "selectedShoppingListId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "selectedShoppingListId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChooseIngredients",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "toggleSelected",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl"
                        },
                        {
                            "name": "isSelected",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSelected",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { BasicShoppingListItem, I18n, Language, RecipeIngredient, SelectedIngredient, ShoppingList } from '../../../../core/models/model';\nimport { AbstractControl, FormArray, FormControl, FormGroup } from '@angular/forms';\nimport { mapSelectedIngredientToBasicShoppingListItem } from '../../../../core/helpers/helpers';\n\n@Component({\n  selector: 'app-ingredients-picker',\n  templateUrl: './ingredients-picker.component.html',\n  styleUrls: ['./ingredients-picker.component.scss']\n})\nexport class IngredientsPickerComponent implements OnInit {\n  @Input() translations: I18n | null = null;\n  @Input() currentLanguage: Language | null = null;\n  @Input() preSelectedShoppingListId: string | null | undefined = undefined;\n  @Input() shoppingLists: ShoppingList[] | undefined | null = null;\n  @Input() ingredientsList: RecipeIngredient[] | undefined = undefined;\n  @Output() choseIngredients: EventEmitter<BasicShoppingListItem[]> = new EventEmitter();\n  @Output() back: EventEmitter<undefined> = new EventEmitter();\n\n  selectedShoppingListId: string | null | undefined = undefined;\n\n  ingredientsForm: FormGroup = new FormGroup({\n    ingredients: new FormArray([])\n  });\n\n  get ingredientsControls(): AbstractControl[] {\n    return (this.ingredientsForm.controls.ingredients as FormArray).controls;\n  }\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.selectedShoppingListId = this.preSelectedShoppingListId;\n\n    this.ingredientsList?.forEach((ingredient: RecipeIngredient) => {\n      ((this.ingredientsForm.controls.ingredients as FormArray).controls).push(new FormGroup({\n        id: new FormControl(ingredient.id),\n        isSelected: new FormControl(!ingredient.isStapleFood),\n        title: new FormControl(ingredient.title),\n        amount: new FormControl(ingredient.amount),\n        unit: new FormControl(ingredient.unit),\n        unitLabel: new FormControl('unit.' + ingredient.unit)\n      }));\n    });\n  }\n\n  getFormControl(ingredient: AbstractControl, key: string): FormControl {\n    return (ingredient as FormGroup)?.controls ? (ingredient as FormGroup)?.controls[key] as FormControl : {} as FormControl;\n  }\n\n  toggleSelected(ingredient: AbstractControl, isSelected: boolean): void {\n    this.getFormControl(ingredient, 'isSelected').setValue(isSelected);\n  }\n\n  onChooseIngredients(): void {\n    const ingredients = this.ingredientsControls\n      .map((control: AbstractControl) => (control as FormGroup).value)\n      .filter((item: SelectedIngredient) => item.isSelected)\n      .map((item: SelectedIngredient) => mapSelectedIngredientToBasicShoppingListItem(item, this.selectedShoppingListId || undefined));\n\n    this.choseIngredients.emit(ingredients);\n  }\n\n  onChangeSelectedShoppingList(selectedShoppingListId: string): void {\n    this.selectedShoppingListId = selectedShoppingListId;\n  }\n\n  goBack(): void {\n    this.back.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/mixins/style\";\n@import \"../../../../../styles/settings/functions\";\n\n.ingredients-picker {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n\n  &__back-button {\n    background: none;\n    border: none;\n    color: $blue_100;\n    align-self: flex-start;\n    margin-bottom: $spacing-medium;\n    cursor: pointer;\n  }\n\n  &__shopping-list-select-label {\n    margin-bottom: $spacing-tiny;\n    font-weight: 500;\n  }\n\n  &__shopping-list-select {\n    margin-bottom: $spacing-small;\n  }\n\n  &__list {\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    overflow: scroll\n  }\n\n  &__list-item {\n    padding: $spacing-tiny 0;\n  }\n\n  &__actions {\n    display: flex;\n    justify-content: space-between;\n  }\n}\n",
                    "styleUrl": "./ingredients-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "ingredientsControls": {
                    "name": "ingredientsControls",
                    "getSignature": {
                        "name": "ingredientsControls",
                        "type": "[]",
                        "returnType": "AbstractControl[]",
                        "line": 26
                    }
                }
            },
            "templateData": "<form\n  [formGroup]=\"ingredientsForm\"\n  (ngSubmit)=\"onChooseIngredients()\"\n  class=\"ingredients-picker\"\n>\n  <button (click)=\"goBack()\" class=\"ingredients-picker__back-button\">\n    <fa-icon [icon]=\"['fas', 'arrow-left']\" class=\"icon-left\"></fa-icon>\n    {{ 'ingredients-picker.back' | translate:translations:currentLanguage}}\n  </button>\n\n  <label for=\"shoppingLists\" class=\"ingredients-picker__shopping-list-select-label\">\n    {{ 'ingredients-picker.shopping-list' | translate:translations:currentLanguage }}\n  </label>\n  <select\n    #shoppingListSelect\n    name=\"shoppingLists\"\n    id=\"shoppingLists\"\n    class=\"ingredients-picker__shopping-list-select\"\n    (change)=\"onChangeSelectedShoppingList(shoppingListSelect.value)\">\n    <option\n      *ngFor=\"let shoppingList of shoppingLists\"\n      [value]=\"shoppingList.id\"\n      [selected]=\"shoppingList.id === selectedShoppingListId\"\n    >{{shoppingList.title || ('shopping-list.default-title' |  translate:translations:currentLanguage)}}</option>\n  </select>\n\n\n  <div\n    class=\"ingredients-picker__list\">\n    <mat-checkbox\n      *ngFor=\"let ingredient of ingredientsControls\"\n      class=\"ingredients-picker__list-item\"\n      [checked]=\"getFormControl(ingredient, 'isSelected').value\"\n      [color]=\"'primary'\"\n      [disableRipple]=\"true\"\n      (change)=\"toggleSelected(ingredient, $event.checked)\">\n       <span\n         class=\"ingredients-picker__list-column\">\n         {{getFormControl(ingredient, 'amount').value}} {{getFormControl(ingredient, 'unitLabel').value | translate:translations:currentLanguage}}\n       </span>\n      <span class=\"ingredients-picker__list-column\">\n         {{getFormControl(ingredient, 'title').value}}\n       </span>\n    </mat-checkbox>\n  </div>\n  <div class=\"ingredient-dialog__actions\">\n    <app-button\n      [buttonType]=\"'submit'\"\n      [buttonText]=\"'ingredients-picker.button' | translate:translations:currentLanguage\"\n      [color]=\"'primary'\"\n    >\n    </app-button>\n  </div>\n</form>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-d7205c49d1f0c74bfb7d86f0f66a8932",
            "file": "src/app/shared/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaDescribedBy",
                    "line": 21,
                    "type": "string | undefined"
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'on'",
                    "line": 26,
                    "type": "\"on\" | \"off\""
                },
                {
                    "name": "border",
                    "defaultValue": "true",
                    "line": 20
                },
                {
                    "name": "e2eTestName",
                    "defaultValue": "''",
                    "line": 28
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "line": 24,
                    "type": "string[]"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 25
                },
                {
                    "name": "label",
                    "line": 23,
                    "type": "string | undefined"
                },
                {
                    "name": "minValue",
                    "line": 22,
                    "type": "number | undefined"
                },
                {
                    "name": "name",
                    "line": 19,
                    "type": "string | undefined"
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "line": 27
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "line": 18
                }
            ],
            "outputsClass": [
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "line": 29,
                    "type": "EventEmitter<MouseEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentValue",
                    "defaultValue": "''",
                    "type": "string | number",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "inputId",
                    "defaultValue": "uuid()",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "markAsTouched",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                }
            ],
            "methodsClass": [
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "option",
                            "type": "string | number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "string | number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClicked",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { v4 as uuid } from 'uuid';\n\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => InputComponent),\n      multi: true\n    }\n  ]})\nexport class InputComponent implements ControlValueAccessor {\n\n  @Input() type = 'text';\n  @Input() name: string | undefined;\n  @Input() border = true;\n  @Input() ariaDescribedBy: string | undefined;\n  @Input() minValue: number | undefined;\n  @Input() label: string | undefined;\n  @Input() errors: string[] = [];\n  @Input() isDisabled = false;\n  @Input() autocomplete: 'on' | 'off' = 'on';\n  @Input() placeholder = '';\n  @Input() e2eTestName = '';\n  @Output() clicked: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  inputId: string = uuid();\n\n  currentValue: string | number = '';\n\n  onChange(option: string | number): void {\n    this.propagateChange(option);\n  }\n\n  onBlur(): void {\n    this.markAsTouched();\n  }\n\n  onClicked(event: MouseEvent): void {\n    this.clicked.emit(event);\n  }\n\n  propagateChange = (value: string | number) => {};\n  markAsTouched = () => {};\n\n  registerOnChange(fn: () => {}): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n    this.markAsTouched = fn;\n  }\n\n  writeValue(value: string | number): void {\n    if (value !== undefined) {\n      this.currentValue = value;\n    }\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/mixins/forms\";\n\n\n.input {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n\n  &__label {\n    @include label;\n  }\n\n  &__field {\n    @include form-field;\n  }\n\n  &__error {\n    @include form-errors;\n  }\n}\n\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"input\">\n  <label class=\"input__label\" *ngIf=\"label\" [for]=\"inputId\">{{label}}</label>\n    <input class=\"input__field\"\n           [(ngModel)]=\"currentValue\"\n           [type]=\"type\"\n           [id]=\"inputId\"\n           [class.input__field--no-border]=\"!border\"\n           [attr.name]=\"name\"\n           [autocomplete]=\"autocomplete\"\n           [placeholder]=\"placeholder\"\n           [attr.data-test]=\"e2eTestName\"\n           [attr.min]=\"minValue\"\n           [attr.aria-label]=\"placeholder\"\n           [attr.aria-describedby]=\"ariaDescribedBy\"\n           (blur)=\"onBlur()\"\n           (ngModelChange)=\"onChange($event)\"\n    >\n  <div>\n    <div class=\"input__error\" *ngFor=\"let error of errors\">{{error}}</div>\n  </div>\n</div>\n\n"
        },
        {
            "name": "ListHeaderComponent",
            "id": "component-ListHeaderComponent-1fc52c2b39f2ed6477be6b51cca2aaf9",
            "file": "src/app/shared/components/list-header/list-header.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-header",
            "styleUrls": [
                "./list-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "addListLabel",
                    "defaultValue": "''",
                    "line": 17
                },
                {
                    "name": "ariaDeleteLabel",
                    "defaultValue": "''",
                    "line": 20
                },
                {
                    "name": "ariaEditLabel",
                    "defaultValue": "''",
                    "line": 19
                },
                {
                    "name": "buttonLabel",
                    "defaultValue": "''",
                    "line": 18
                },
                {
                    "name": "defaultTitle",
                    "defaultValue": "''",
                    "line": 16
                },
                {
                    "name": "isOffline",
                    "defaultValue": "false",
                    "line": 21,
                    "type": "boolean | null"
                },
                {
                    "name": "lists",
                    "defaultValue": "undefined",
                    "line": 15,
                    "type": "List[] | null | undefined"
                },
                {
                    "name": "selectedList",
                    "defaultValue": "undefined",
                    "line": 14,
                    "type": "List | null | undefined"
                }
            ],
            "outputsClass": [
                {
                    "name": "createList",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter<undefined>"
                },
                {
                    "name": "deleteList",
                    "defaultValue": "new EventEmitter()",
                    "line": 25,
                    "type": "EventEmitter<List>"
                },
                {
                    "name": "editList",
                    "defaultValue": "new EventEmitter()",
                    "line": 24,
                    "type": "EventEmitter<List>"
                },
                {
                    "name": "selectList",
                    "defaultValue": "new EventEmitter()",
                    "line": 23,
                    "type": "EventEmitter<List>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "openList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { take } from 'rxjs/operators';\nimport { List, ListPickerDialogEvent } from '../../../core/models/model';\nimport { DialogService } from '../../../core/services/dialog.service';\nimport { ListPickerDialogComponent } from '../list-picker-dialog/list-picker-dialog.component';\n\n@Component({\n  selector: 'app-list-header',\n  templateUrl: './list-header.component.html',\n  styleUrls: ['./list-header.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ListHeaderComponent {\n  @Input() selectedList: List | null | undefined = undefined;\n  @Input() lists: List[] | null | undefined = undefined;\n  @Input() defaultTitle = '';\n  @Input() addListLabel = '';\n  @Input() buttonLabel = '';\n  @Input() ariaEditLabel = '';\n  @Input() ariaDeleteLabel = '';\n  @Input() isOffline: boolean | null = false;\n  @Output() createList: EventEmitter<undefined> = new EventEmitter();\n  @Output() selectList: EventEmitter<List> = new EventEmitter();\n  @Output() editList: EventEmitter<List> = new EventEmitter();\n  @Output() deleteList: EventEmitter<List> = new EventEmitter();\n\n  constructor(private dialogService: DialogService) {}\n\n  openList(): void {\n    const dialogRef = this.dialogService.openDialog(ListPickerDialogComponent, {\n      data: this.lists,\n      translations: {\n        'new-list': this.addListLabel,\n        'default-title': this.defaultTitle,\n        'aria-edit': this.ariaEditLabel,\n        'aria-delete': this.ariaDeleteLabel,\n      }\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: ListPickerDialogEvent | undefined) => {\n        switch (result?.event) {\n          case 'create':\n            this.createList.emit();\n            break;\n          case 'select':\n            this.selectList.emit(result?.list);\n            break;\n          case 'edit':\n            this.editList.emit(result?.list);\n            break;\n          case 'delete':\n            this.deleteList.emit(result?.list);\n            break;\n        }\n      });\n\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/settings/variables\";\n@import \"../../../../styles/mixins/style\";\n@import \"../../../../styles/settings/functions\";\n\n\n\n.list-header {\n  padding-bottom: $spacing-large;\n  padding-left: $spacing-small;\n  color: $blue-grey_80;\n  display: flex;\n  align-items: baseline;\n  justify-content: space-between;\n\n\n  &__title {\n    font-weight: 400;\n    font-size: $font-size-medium;\n  }\n\n  @include skeleton('.list-header__title-wrapper', $blue-grey_30, 3.5s) {\n    background: $blue-grey_40;\n    width: 60%;\n    height: rem(24);\n    align-self: center;\n    border-radius: $border-radius-default;\n  };\n\n  @include skeleton('.list-header__button', $cyan_70, 3.5s) {\n    background: $cyan_80;\n    width: rem(80);\n    height: rem(30);\n    cursor: wait;\n    border-radius: $border-radius-default;\n  };\n\n\n  &__button {\n    border: none;\n    color: #ffffff;\n    padding: $spacing-tiny $spacing-medium;\n    border-radius: $border-radius-default;\n    background-color: $cyan_80;\n    cursor: pointer;\n  }\n}\n\n\n",
                    "styleUrl": "./list-header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"list-header\">\n  <div class=\"list-header__title-wrapper\">\n    <h2 *ngIf=\"selectedList\" class=\"list-header__title\">\n      {{selectedList?.title || defaultTitle}}\n    </h2>\n  </div>\n\n\n  <button *ngIf=\"!isOffline\" (click)=\"openList()\" class=\"list-header__button\">\n    <span *ngIf=\"buttonLabel && lists?.length\">{{buttonLabel}}</span>\n  </button>\n</div>\n"
        },
        {
            "name": "ListPickerDialogComponent",
            "id": "component-ListPickerDialogComponent-e37fb4ffec6dddbe23d10db7a7dff6af",
            "file": "src/app/shared/components/list-picker-dialog/list-picker-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-list-picker-dialog",
            "styleUrls": [
                "./list-picker-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-picker-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogData",
                    "type": "DialogData<List[]>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "dialogRef",
                    "type": "MatDialogRef<ListPickerDialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "deleteList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectList",
                    "args": [
                        {
                            "name": "list",
                            "type": "List"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "list",
                            "type": "List",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { DialogData, List } from '../../../core/models/model';\n\n@Component({\n  selector: 'app-list-picker-dialog',\n  templateUrl: './list-picker-dialog.component.html',\n  styleUrls: ['./list-picker-dialog.component.scss']\n})\nexport class ListPickerDialogComponent {\n\n  constructor(\n    public dialogRef: MatDialogRef<ListPickerDialogComponent>,\n    @Inject(MAT_DIALOG_DATA) public dialogData: DialogData<List[]>,\n  ) {\n  }\n\n  createList(): void {\n    this.dialogRef.close({event: 'create'});\n  }\n\n  selectList(list: List): void {\n    this.dialogRef.close({event: 'select', list});\n  }\n\n  editList(list: List): void {\n    this.dialogRef.close({event: 'edit', list});\n  }\n\n  deleteList(list: List): void {\n    this.dialogRef.close({event: 'delete', list});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/settings/functions\";\n@import \"../../../../styles/settings/variables\";\n\n\n.list-picker {\n  max-height: rem(300);\n  width: rem(400);\n  margin: 0;\n  max-width: 100%;\n\n  &__item {\n    border-bottom: 1px dashed $blue-grey_100;\n    cursor: pointer;\n    display: flex;\n    justify-content: space-between;\n    color: $text-100;\n\n    &:hover:not(:first-child) {\n      background: $blue-grey_10;\n    }\n\n    &:first-child {\n      padding-top: 0;\n    }\n\n    &:last-child {\n      border-bottom: none;\n    }\n  }\n\n  &__item-title {\n    padding: $spacing-medium $spacing-tiny;\n    flex-grow: 1;\n  }\n\n  &__item--add {\n    font-weight: 500;\n    color: $cyan_80;\n    font-size: $font-size-small;\n  }\n\n  &__item-actions {\n    flex-shrink: 0;\n    padding: $spacing-medium $spacing-tiny $spacing-medium 0;\n  }\n\n  &__item-icon {\n    padding-right: $spacing-tiny;\n  }\n\n  &__item-action:nth-child(2) {\n    padding-left: $spacing-medium\n  }\n}\n",
                    "styleUrl": "./list-picker-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ListPickerDialogComponent>"
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<List[]>"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ListPickerDialogComponent>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogData",
                        "type": "DialogData<List[]>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-dialog-content class=\"mat-typography list-picker\">\n  <div class=\"list-picker__item list-picker__item--add\"  (click)=\"createList()\">\n    <section class=\"list-picker__item-title\">\n      <fa-icon\n        class=\"list-picker__item-icon\"\n        [icon]=\"['fas','plus']\"\n      ></fa-icon>\n      {{dialogData.translations['new-list']}}\n    </section>\n  </div>\n  <div *ngFor=\"let list of dialogData.data\"\n       class=\"list-picker__item\">\n    <section class=\"list-picker__item-title\" (click)=\"selectList(list)\">\n      {{list.title || dialogData.translations['default-title']}}\n    </section>\n    <section class=\"list-picker__item-actions\">\n      <fa-icon\n        class=\"list-picker__item-action\"\n        (click)=\"editList(list)\"\n        [attr.aria-label]=\"(list.title || dialogData.translations['default-title']) + ' ' + dialogData.translations['aria-edit']\"\n        [icon]=\"['fas','edit']\"\n      ></fa-icon>\n      <fa-icon\n        class=\"list-picker__item-action\"\n        *ngIf=\"dialogData.data.length > 1\"\n        (click)=\"deleteList(list)\"\n        [attr.aria-label]=\"(list.title || dialogData.translations['default-title']) + ' ' + dialogData.translations['aria-delete']\"\n        [icon]=\"['fas','trash-alt']\"\n      ></fa-icon>\n    </section>\n  </div>\n</mat-dialog-content>\n\n"
        },
        {
            "name": "LoginContainerComponent",
            "id": "component-LoginContainerComponent-4037e4b58a8abbf2a4d2f0a7ac46882a",
            "file": "src/app/features/auth/containers/login-container/login-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-container",
            "styleUrls": [
                "./login-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backendError",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.pipe(select(state => state.appState.language))",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "onLogin",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "LoginCredentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "LoginCredentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { I18n, Language, LoginCredentials } from '../../../../core/models/model';\nimport { select, Store } from '@ngrx/store';\nimport { GlobalState, selectTranslations } from '../../../../core/store';\nimport { AuthApiActions, LoginContainerActions } from '../../store/actions';\nimport { Observable } from 'rxjs';\nimport { Actions, ofType } from '@ngrx/effects';\n\n@Component({\n  selector: 'app-login-container',\n  templateUrl: './login-container.component.html',\n  styleUrls: ['./login-container.component.scss']\n})\nexport class LoginContainerComponent {\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.pipe(select(state => state.appState.language));\n  backendError: string | undefined;\n\n\n  constructor(private store: Store<GlobalState>, private actions$: Actions) {\n    this.actions$.pipe(ofType(AuthApiActions.loginFailure)).subscribe(({error}: {error: string}) => {\n      this.backendError = error;\n    });\n  }\n\n  onLogin(credentials: LoginCredentials): void {\n    this.store.dispatch(LoginContainerActions.login({credentials}));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-login-page\n  [translations]=\"translations$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n  [backendErrorMessage]=\"backendError\"\n  (login)=\"onLogin($event)\"\n></app-login-page>\n"
        },
        {
            "name": "LoginPageComponent",
            "id": "component-LoginPageComponent-f3cf66ce59126533e53efa1f9aafd1e6",
            "file": "src/app/features/auth/pages/login-page/login-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-page",
            "styleUrls": [
                "./login-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backendErrorMessage",
                    "line": 18,
                    "type": "string | undefined"
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 17,
                    "type": "Language | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 16,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "login",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<LoginCredentials>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isPasswordVisible",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "IconProp",
                    "typeParameters": [],
                    "line": 66
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { translateValidationErrors } from '../../../../core/helpers/helpers';\nimport { I18n, Language, LoginCredentials } from '../../../../core/models/model';\nimport * as CustomValidators from '../../../../core/validators/custom-validators.validator';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\n\n@Component({\n  selector: 'app-login-page',\n  templateUrl: './login-page.component.html',\n  styleUrls: ['./login-page.component.scss']\n})\nexport class LoginPageComponent {\n  @Input() translations: I18n | null = {};\n  @Input() currentLanguage: Language | null = DEFAULT_LANGUAGE;\n  @Input() backendErrorMessage: string | undefined;\n  @Output() login: EventEmitter<LoginCredentials> = new EventEmitter();\n\n  loginForm: FormGroup;\n  isPasswordVisible = false;\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.loginForm = new FormGroup({\n      identifier: new FormControl('', [\n        Validators.required,\n        CustomValidators.email,\n      ]),\n      password: new FormControl('', [\n        Validators.required,\n      ])\n    });\n  }\n\n  get email(): string {\n    return this.loginForm.value.identifier;\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.loginForm?.controls[key] as FormControl;\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.valid) {\n      this.login.emit(this.loginForm?.value);\n      return;\n    }\n\n    this.loginForm.markAllAsTouched();\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLanguage)\n      .filter((error, index) => index === 0);\n  }\n\n    togglePasswordVisibility(): void {\n        this.isPasswordVisible = !this.isPasswordVisible;\n    }\n\n    getIcon(): IconProp {\n        return this.isPasswordVisible ? ['fas', 'eye-slash'] : ['fas', 'eye'];\n    }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/mixins/forms\";\n\n\n.login-form {\n    @include authform;\n}\n",
                    "styleUrl": "./login-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "string",
                        "returnType": "string",
                        "line": 36
                    }
                }
            },
            "templateData": "<app-auth-form\n  class=\"login-form\"\n  [heading]=\"'auth.login.title' | translate:translations:currentLanguage\"\n  [buttonText]=\"'auth.login.cta' | translate:translations:currentLanguage\"\n  [authForm]=\"loginForm\"\n  [backedErrorMessage]=\"backendErrorMessage && (backendErrorMessage | translate:translations:currentLanguage)\"\n  (formSubmit)=\"onSubmit()\"\n>\n  <ng-template #formTemplate let-form=\"form\">\n    <div [formGroup]=\"form\">\n      <div class=\"login-form__field\">\n        <fa-icon class=\"login-form__icon\"\n                 [icon]=\"['fas','user']\"></fa-icon>\n        <app-input\n          class=\"login-form__input\"\n          type=\"email\"\n          [border]=\"false\"\n          [name]=\"'email'\"\n          [placeholder]=\"'auth.login.email' | translate:translations:currentLanguage\"\n          [formControl]=\"getFormControl('identifier')\"\n          [errors]=\"getErrorsFor('identifier')\"></app-input>\n      </div>\n\n      <div class=\"login-form__field\">\n        <fa-icon class=\"login-form__icon\"\n                 [icon]=\"['fas','unlock-alt']\"></fa-icon>\n        <app-input\n          class=\"login-form__input\"\n          [type]=\"isPasswordVisible ? 'text' : 'password'\"\n          [border]=\"false\"\n          [name]=\"'password'\"\n          [placeholder]=\"'auth.login.password' | translate:translations:currentLanguage\"\n          [formControl]=\"getFormControl('password')\"\n          [errors]=\"getErrorsFor('password')\"></app-input>\n        <fa-icon class=\"login-form__icon login-form__icon--padding-left\"\n                 (click)=\"togglePasswordVisibility()\"\n                 [icon]=\"getIcon()\"></fa-icon>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #formFooter>\n    <div class=\"login-form__hint\">\n      <a [routerLink]=\"['/auth/forgot']\" [queryParams]=\"email ? {email: email} : {}\"> {{ 'auth.login.forgot-password' | translate:translations:currentLanguage}}</a>\n    </div>\n    <div class=\"login-form__hint\" [innerHTML]=\"'auth.login.not-registered' | translate:translations:currentLanguage \" >\n    </div>\n  </ng-template>\n</app-auth-form>\n\n\n\n\n\n"
        },
        {
            "name": "MealPickerComponent",
            "id": "component-MealPickerComponent-bee3048cb6c6821eba826cc3978ef15e",
            "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-meal-picker",
            "styleUrls": [
                "./meal-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./meal-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "cookbooks",
                    "defaultValue": "null",
                    "line": 25,
                    "type": "Cookbook[] | null"
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "null",
                    "line": 28,
                    "type": "Language | null"
                },
                {
                    "name": "preSelectedCookbookId",
                    "defaultValue": "undefined",
                    "line": 27,
                    "type": "string | null | undefined"
                },
                {
                    "name": "recipes",
                    "defaultValue": "undefined",
                    "line": 24,
                    "type": "literal type | null | undefined"
                },
                {
                    "name": "translations",
                    "defaultValue": "null",
                    "line": 26,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "changeSelectedCookbook",
                    "defaultValue": "new EventEmitter()",
                    "line": 30,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "selectRecipe",
                    "defaultValue": "new EventEmitter()",
                    "line": 29,
                    "type": "EventEmitter<Recipe>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "filter",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "mealFilterInput",
                    "type": "ElementRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'mealFilter', {static: true}"
                        }
                    ]
                },
                {
                    "name": "selectedCookbookId",
                    "defaultValue": "null",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "getPageState",
                    "args": [
                        {
                            "name": "items",
                            "type": "Recipe[] | null | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Recipe[] | null | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAddRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeCookbook",
                    "args": [
                        {
                            "name": "selectedCookbookId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "jsdoctags": [
                        {
                            "name": "selectedCookbookId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { Cookbook, I18n, Language, Recipe, ShoppingListItem } from '../../../../core/models/model';\nimport { fromEvent } from 'rxjs';\nimport { debounce, debounceTime, map } from 'rxjs/operators';\nimport { INPUT_DEBOUNCE_TIME } from '../../../../core/constants/constants';\n\n@Component({\n  selector: 'app-meal-picker',\n  templateUrl: './meal-picker.component.html',\n  styleUrls: ['./meal-picker.component.scss']\n})\nexport class MealPickerComponent implements OnChanges, AfterViewInit {\n  @Input() recipes: {[key: string]: Recipe[]} | null | undefined = undefined;\n  @Input() cookbooks: Cookbook[] | null = null;\n  @Input() translations: I18n | null = null;\n  @Input() preSelectedCookbookId: string | null | undefined = undefined;\n  @Input() currentLanguage: Language | null  = null;\n  @Output() selectRecipe: EventEmitter<Recipe> = new EventEmitter();\n  @Output() changeSelectedCookbook: EventEmitter<string> = new EventEmitter();\n\n  @ViewChild('mealFilter', { static: true }) mealFilterInput: ElementRef | undefined;\n\n  selectedCookbookId: string | null = null;\n  filter = '';\n\n  get selectedCookBookRecipes(): Recipe[] | null {\n    if (!this.recipes || !this.cookbooks) {\n      return null;\n    }\n\n\n    if (!this.selectedCookbookId) {\n      return null;\n    }\n\n    return this.recipes[this.selectedCookbookId]\n      ?.filter( (recipe: Recipe) => recipe.title.toLowerCase().includes(this.filter.toLowerCase())) || null;\n  }\n\n  constructor() {\n  }\n\n  ngAfterViewInit(): void {\n    fromEvent(this.mealFilterInput?.nativeElement, 'input')\n      .pipe(\n        debounceTime(INPUT_DEBOUNCE_TIME),\n        map((inputEvent) => inputEvent as InputEvent),\n        map((inputEvent) => {\n          return (inputEvent?.target as HTMLInputElement).value;\n        })\n      )\n      .subscribe((filter) => this.filter = filter);\n  }\n\n  ngOnChanges({preSelectedCookbookId}: SimpleChanges): void {\n    if (preSelectedCookbookId?.currentValue) {\n      this.selectedCookbookId = preSelectedCookbookId.currentValue;\n    }\n  }\n\n  onAddRecipe(recipe: Recipe): void {\n    this.selectRecipe.emit(recipe);\n  }\n\n  onChangeCookbook(selectedCookbookId: string): void {\n    this.changeSelectedCookbook.emit(selectedCookbookId);\n    this.selectedCookbookId = selectedCookbookId;\n    this.filter = '';\n  }\n\n  getPageState(items: Recipe[] | null | undefined): string {\n    if (items === null || items === undefined) {\n      return 'loading';\n    }\n\n    if (items.length === 0 && this.filter) {\n      return 'not-found';\n    }\n\n    if (items.length === 0) {\n      return 'empty';\n    }\n\n    return 'default';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/mixins/style\";\n@import \"../../../../../styles/settings/functions\";\n\n.meal-picker {\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n\n  &__heading{\n    margin-bottom: $spacing-small;\n  }\n\n  &__cookbook-select-wrapper {\n    display: flex;\n    flex-direction: column;\n    margin-bottom: $spacing-small;\n  }\n\n  &__cookbook-select-label {\n    font-weight: 500;\n    margin-bottom: $spacing-tiny;\n  }\n\n  &__meal-list {\n    overflow: scroll;\n  }\n\n  &__cookbook-filter {\n    margin-bottom: $spacing-small;\n  }\n\n  &__meal-list-item {\n    list-style: none;\n    padding: $spacing-small $spacing-tiny;\n    cursor: pointer;\n    &:nth-child(odd) {\n      background-color: $blue-grey_20;\n    }\n  }\n}\n\n@include skeleton('.meal-picker__cookbook-select', $blue-grey_30, 3.5s) {\n  background: $blue-grey_40;\n  color: $blue-grey_40;\n  width: rem(200);\n  height: rem(30);\n  outline: none;\n  border: none;\n  cursor: wait;\n  border-radius: $border-radius-default;\n};\n\n@include skeleton('.meal-picker__meal-list-item-skeleton', $blue-grey_30, 3.5s) {\n  background: $blue-grey_40;\n  height: rem(16);\n  margin: $spacing-small 0;\n  border-radius: $border-radius-default;\n  width: 90%;\n\n  &:nth-child(2){\n    width: 75%;\n  }\n\n  &:nth-child(3){\n    width: 85%;\n  }\n\n  &:nth-child(4){\n    width: 80%;\n    margin-bottom: $spacing-large;\n  }\n};\n",
                    "styleUrl": "./meal-picker.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 49
            },
            "implements": [
                "OnChanges",
                "AfterViewInit"
            ],
            "accessors": {
                "selectedCookBookRecipes": {
                    "name": "selectedCookBookRecipes",
                    "getSignature": {
                        "name": "selectedCookBookRecipes",
                        "type": "",
                        "returnType": "[] | null",
                        "line": 37
                    }
                }
            },
            "templateData": "<div class=\"meal-picker\">\n  <h2 mat-dialog-title class=\"meal-picker__heading\">\n    {{'meal-picker.title' | translate:translations:currentLanguage}}\n  </h2>\n\n  <div class=\"meal-picker__cookbook-select-wrapper\">\n    <label for=\"cookbooks\" class=\"meal-picker__cookbook-select-label\">\n      {{ 'meal-picker.cookbook' | translate:translations:currentLanguage }}\n    </label>\n    <select\n      #cookbookSelect\n      name=\"cookbooks\"\n      id=\"cookbooks\"\n      class=\"meal-picker__cookbook-select\"\n      (change)=\"onChangeCookbook(cookbookSelect.value)\">\n        <option\n          *ngFor=\"let cookbook of cookbooks\"\n          [value]=\"cookbook.id\"\n          [selected]=\"cookbook.id === selectedCookbookId\"\n        >{{cookbook.title}}</option>\n    </select>\n  </div>\n\n  <input\n    #mealFilter\n    class=\"meal-picker__cookbook-filter\"\n    [value]=\"filter\"\n    [placeholder]=\"'meal-picker.filter' |  translate:translations:currentLanguage\"\n    [attr.aria-label]=\"'meal-picker.filter' |  translate:translations:currentLanguage\"\n  />\n\n  <div *ngIf=\"selectedCookBookRecipes\" class=\"visually-hidden\" role=\"status\" aria-live=\"polite\">\n    {{selectedCookBookRecipes.length}} {{'meal-picker.araia-list' | translate:translations:currentLanguage}}\n  </div>\n  <section [ngSwitch]=\"getPageState(selectedCookBookRecipes)\" class=\"meal-picker__meal-list\">\n    <ul  *ngSwitchCase=\"'default'\">\n      <li *ngFor=\"let recipe of selectedCookBookRecipes\"\n          tabindex=\"0\"\n          class=\"meal-picker__meal-list-item\"\n          (click)=\"onAddRecipe(recipe)\"\n          (keyup.enter)=\"onAddRecipe(recipe)\"\n          (keyup.space)=\"onAddRecipe(recipe)\"\n      >\n        {{recipe.title}}\n      </li>\n    </ul>\n\n    <div *ngSwitchCase=\"'loading'\">\n      <div class=\"meal-picker__meal-list-item-skeleton\"></div>\n      <div class=\"meal-picker__meal-list-item-skeleton\"></div>\n      <div class=\"meal-picker__meal-list-item-skeleton\"></div>\n      <div class=\"meal-picker__meal-list-item-skeleton\"></div>\n    </div>\n\n    <div *ngSwitchCase=\"'not-found'\">\n      {{ filter + ' ' + ('meal-picker.not-found' | translate:translations:currentLanguage)}} <br />\n    </div>\n\n    <div *ngSwitchCase=\"'empty'\">\n     {{ 'meal-picker.empty-cookbook' | translate:translations:currentLanguage}} <br />\n      <a [href]=\"'/cookbook?selectedCookbookId=' + selectedCookbookId\">\n        {{ 'meal-picker.empty-cookbook-add-recipe' | translate:translations:currentLanguage}}\n      </a>\n    </div>\n  </section>\n</div>\n"
        },
        {
            "name": "MealplanerContainerComponent",
            "id": "component-MealplanerContainerComponent-b632ba947ddbe8b4097e64f0667c6b49",
            "file": "src/app/features/meal-planer/containers/mealplaner-container/mealplaner-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mealplaner-container",
            "styleUrls": [
                "./mealplaner-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mealplaner-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeMealPlaner$",
                    "defaultValue": "this.store.select(activeMealPlaner)",
                    "type": "Observable<ShoppingList | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "activeMealPlanerId$",
                    "defaultValue": "this.store.select(activeMealPlanerId)",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "createDialogTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.select((state: GlobalState) => state.appState.language)",
                    "type": "Observable<Language | null>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "dayPlan$",
                    "defaultValue": "this.store.select(activeDayPlan)",
                    "type": "Observable<DayPlan | undefined | null>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "editDialogTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isOffline$",
                    "defaultValue": "this.store.select(isOffline)",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "mealPlaners$",
                    "defaultValue": "this.store.select(selectMealPlaners)",
                    "type": "Observable<[] | null>",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "selectedDate",
                    "defaultValue": "this.store.select(selectSelectedDate)",
                    "type": "Observable<Date | null>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81
                },
                {
                    "name": "onAddMeal",
                    "args": [
                        {
                            "name": "mealType",
                            "type": "MealType"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "jsdoctags": [
                        {
                            "name": "mealType",
                            "type": "MealType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMealPlanerChange",
                    "args": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMealPlanerCreate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93
                },
                {
                    "name": "onMealPlanerDeleted",
                    "args": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMealPlanerEdit",
                    "args": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemoveMeal",
                    "args": [
                        {
                            "name": "meal",
                            "type": "Meal"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "jsdoctags": [
                        {
                            "name": "meal",
                            "type": "Meal",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onWeekOffsetChanged",
                    "args": [
                        {
                            "name": "selectedDate",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "jsdoctags": [
                        {
                            "name": "selectedDate",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take, withLatestFrom } from 'rxjs/operators';\nimport { v4 as uuid } from 'uuid';\nimport { DELETION_DELAY } from '../../../../core/constants/constants';\nimport {\n  AddMealDialogEvent,\n  CreateListDialogEvent,\n  DayPlan,\n  EditListDialogEvent,\n  I18n,\n  Language,\n  Meal,\n  MealPlaner,\n  MealType,\n  ShoppingList\n} from '../../../../core/models/model';\nimport { DialogService } from '../../../../core/services/dialog.service';\nimport { SnackbarService } from '../../../../core/services/snackbar.service';\nimport {\n  activeDayPlan,\n  activeMealPlaner,\n  activeMealPlanerId,\n  GlobalState,\n  isOffline,\n  selectMealPlaners,\n  selectSelectedDate,\n  selectTranslations\n} from '../../../../core/store';\nimport { EditListDialogComponent } from '../../../../shared/components/edit-list-dialog/edit-list-dialog.component';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport { MealPlanerContainerActions } from '../../store/actions';\nimport { AddMealDialogComponent } from '../add-meal-dialog/add-meal-dialog.component';\n\n\n@Component({\n  selector: 'app-mealplaner-container',\n  templateUrl: './mealplaner-container.component.html',\n  styleUrls: ['./mealplaner-container.component.scss'],\n})\nexport class MealplanerContainerComponent implements OnInit {\n\n  selectedDate: Observable<Date | null> = this.store.select(selectSelectedDate);\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language | null> = this.store.select((state: GlobalState) => state.appState.language);\n  dayPlan$: Observable<DayPlan | undefined | null> = this.store.select(activeDayPlan);\n  mealPlaners$: Observable<MealPlaner[] | null> = this.store.select(selectMealPlaners);\n  activeMealPlaner$: Observable<ShoppingList | undefined> = this.store.select(activeMealPlaner);\n  activeMealPlanerId$: Observable<string | undefined> = this.store.select(activeMealPlanerId);\n  isOffline$: Observable<boolean> = this.store.select(isOffline);\n\n  private createDialogTranslations: {} = {};\n  private editDialogTranslations: {} = {};\n\n  constructor(\n    private store: Store<GlobalState>,\n    private snackBarService: SnackbarService,\n    private dialogService: DialogService,\n    private translatePipe: TranslatePipe\n  ) {\n    this.store.select(selectTranslations).pipe(\n      withLatestFrom(this.store.select((state: GlobalState) => state.appState.language))\n    ).subscribe(([translations, currentLanguage]: [I18n | null, Language]) => {\n      this.createDialogTranslations = {\n        title: this.translatePipe.transform('create-meal-planer.heading', translations, currentLanguage),\n        'save-button-text': this.translatePipe.transform('create-meal-planer.save-button-text', translations, currentLanguage),\n        'cancel-button-text': this.translatePipe.transform('create-meal-planer.cancel-button-text', translations, currentLanguage),\n        placeholder: this.translatePipe.transform('create-meal-planer.placeholder', translations, currentLanguage),\n      };\n\n      this.editDialogTranslations = {\n        title: this.translatePipe.transform('edit-meal-planer.title', translations, currentLanguage),\n        'save-button-text': this.translatePipe.transform('edit-meal-planer.save-button-text', translations, currentLanguage),\n        'cancel-button-text': this.translatePipe.transform('edit-meal-planer.cancel-button-text', translations, currentLanguage),\n        placeholder: this.translatePipe.transform('edit-meal-planer.placeholder', translations, currentLanguage),\n      };\n    });\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(MealPlanerContainerActions.loadMealPlaners());\n  }\n\n  onWeekOffsetChanged(selectedDate: Date): void {\n    this.store.dispatch(MealPlanerContainerActions.selectedDateChanged({selectedDate}));\n  }\n\n  onMealPlanerChange(mealPlaner: MealPlaner): void {\n    this.store.dispatch(MealPlanerContainerActions.changeSelectedMealPlaner({mealPlanerId: mealPlaner.id}));\n  }\n\n  onMealPlanerCreate(): void {\n    const dialogRef = this.dialogService.openDialog(EditListDialogComponent, {\n      data: {},\n      translations: this.createDialogTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: CreateListDialogEvent | undefined) => {\n        if (result?.event === 'create') {\n          this.store.dispatch(MealPlanerContainerActions.createMealPlaner({title: result.title}));\n        }\n      });\n  }\n\n  onMealPlanerDeleted(mealPlaner: MealPlaner): void {\n    this.store.dispatch(MealPlanerContainerActions.deleteMealPlaner({mealPlaner}));\n    this.snackBarService.openSnackBar('message.undo', 'message.action', DELETION_DELAY)\n      .afterDismissed()\n      .pipe(take(1))\n      .subscribe(({dismissedByAction}) => {\n        if (dismissedByAction) {\n          this.store.dispatch(MealPlanerContainerActions.undoDeleteMealPlaner({mealPlaner}));\n        }\n      });\n  }\n\n  onMealPlanerEdit(mealPlaner: MealPlaner): void {\n    const dialogRef = this.dialogService.openDialog(EditListDialogComponent, {\n      data: mealPlaner,\n      translations: this.editDialogTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: EditListDialogEvent | undefined) => {\n        if (result?.event === 'edit') {\n          this.store.dispatch(MealPlanerContainerActions.editMealPlaner({mealPlaner, changes: result.list}));\n        }\n      });\n\n  }\n\n  onAddMeal(mealType: MealType): void {\n    const dialogRef = this.dialogService.openDialog(AddMealDialogComponent, {\n      data: {mealType},\n      translations: this.editDialogTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: AddMealDialogEvent | undefined) => {\n        if (result) {\n          this.store.dispatch(MealPlanerContainerActions.addMeal({\n            optimisticId: uuid(),\n            recipe: result.recipe,\n            mealType: result.mealType,\n            shoppingListItems: result.shoppingListItems\n          }));\n        }\n      });\n  }\n\n  onRemoveMeal(meal: Meal): void {\n    this.store.dispatch(MealPlanerContainerActions.removeMeal({meal}));\n    this.snackBarService.openSnackBar('message.undo', 'message.action', DELETION_DELAY)\n      .afterDismissed()\n      .pipe(take(1))\n      .subscribe(({dismissedByAction}) => {\n        if (dismissedByAction) {\n          this.store.dispatch(MealPlanerContainerActions.undoRemoveMeal({meal}));\n        }\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mealplaner-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <app-mealplaner-page\n    [selectedDate]=\"selectedDate | async\"\n    [translations]=\"translations$ | async\"\n    [currentLanguage]=\"currentLanguage$ | async\"\n    [mealPlaners]=\"mealPlaners$ | async\"\n    [activeMealPlanerId]=\"activeMealPlanerId$ | async\"\n    [activeMealPlaner]=\"activeMealPlaner$ | async\"\n    [dayPlan]=\"dayPlan$ | async\"\n    [isOffline]=\"isOffline$ | async\"\n    (dateChanged)=\"onWeekOffsetChanged($event)\"\n    (changeMealPlaner)=\"onMealPlanerChange($event)\"\n    (createMealPlaner)=\"onMealPlanerCreate()\"\n    (deleteMealPlaner)=\"onMealPlanerDeleted($event)\"\n    (editMealPlaner)=\"onMealPlanerEdit($event)\"\n    (addMeal)=\"onAddMeal($event)\"\n    (removeMeal)=\"onRemoveMeal($event)\">\n  </app-mealplaner-page>\n</div>\n\n"
        },
        {
            "name": "MealplanerPageComponent",
            "id": "component-MealplanerPageComponent-f8bcbd922328f5d774f92842eb32d149",
            "file": "src/app/features/meal-planer/pages/mealplaner-page/mealplaner-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-mealplaner-page",
            "styleUrls": [
                "./mealplaner-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./mealplaner-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeMealPlaner",
                    "defaultValue": "undefined",
                    "line": 14,
                    "type": "MealPlaner | undefined | null"
                },
                {
                    "name": "activeMealPlanerId",
                    "defaultValue": "undefined",
                    "line": 15,
                    "type": "string | undefined | null"
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "null",
                    "line": 12,
                    "type": "Language | null"
                },
                {
                    "name": "dayPlan",
                    "defaultValue": "null",
                    "line": 16,
                    "type": "DayPlan | null | undefined"
                },
                {
                    "name": "isOffline",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean | null"
                },
                {
                    "name": "mealPlaners",
                    "defaultValue": "null",
                    "line": 13,
                    "type": "MealPlaner[] | null"
                },
                {
                    "name": "selectedDate",
                    "line": 10,
                    "type": "Date | null | undefined"
                },
                {
                    "name": "translations",
                    "defaultValue": "null",
                    "line": 11,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "addMeal",
                    "defaultValue": "new EventEmitter()",
                    "line": 23,
                    "type": "EventEmitter<MealType>"
                },
                {
                    "name": "changeMealPlaner",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<MealPlaner>"
                },
                {
                    "name": "createMealPlaner",
                    "defaultValue": "new EventEmitter()",
                    "line": 22,
                    "type": "EventEmitter<MealPlaner>"
                },
                {
                    "name": "dateChanged",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<Date>"
                },
                {
                    "name": "deleteMealPlaner",
                    "defaultValue": "new EventEmitter()",
                    "line": 20,
                    "type": "EventEmitter<MealPlaner>"
                },
                {
                    "name": "editMealPlaner",
                    "defaultValue": "new EventEmitter()",
                    "line": 21,
                    "type": "EventEmitter<MealPlaner>"
                },
                {
                    "name": "removeMeal",
                    "defaultValue": "new EventEmitter()",
                    "line": 24,
                    "type": "EventEmitter<Meal>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "onAddMeal",
                    "args": [
                        {
                            "name": "mealType",
                            "type": "MealType"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "mealType",
                            "type": "MealType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChangeWeekDay",
                    "args": [
                        {
                            "name": "weekDay",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "weekDay",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCreateList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "onDeleteList",
                    "args": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditList",
                    "args": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemoveMeal",
                    "args": [
                        {
                            "name": "meal",
                            "type": "Meal"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "meal",
                            "type": "Meal",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectList",
                    "args": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "mealPlaner",
                            "type": "MealPlaner",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { DayPlan, I18n, Language, Meal, MealPlaner, MealType } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-mealplaner-page',\n  templateUrl: './mealplaner-page.component.html',\n  styleUrls: ['./mealplaner-page.component.scss']\n})\nexport class MealplanerPageComponent implements OnInit {\n  @Input() selectedDate: Date | null | undefined;\n  @Input() translations: I18n | null = null;\n  @Input() currentLanguage: Language | null = null;\n  @Input() mealPlaners: MealPlaner[] | null = null;\n  @Input() activeMealPlaner: MealPlaner | undefined | null = undefined;\n  @Input() activeMealPlanerId: string | undefined | null = undefined;\n  @Input() dayPlan: DayPlan | null | undefined = null;\n  @Input() isOffline: boolean | null = false;\n  @Output() dateChanged: EventEmitter<Date> = new EventEmitter();\n  @Output() changeMealPlaner: EventEmitter<MealPlaner> = new EventEmitter();\n  @Output() deleteMealPlaner: EventEmitter<MealPlaner> = new EventEmitter();\n  @Output() editMealPlaner: EventEmitter<MealPlaner> = new EventEmitter();\n  @Output() createMealPlaner: EventEmitter<MealPlaner> = new EventEmitter();\n  @Output() addMeal: EventEmitter<MealType> = new EventEmitter();\n  @Output() removeMeal: EventEmitter<Meal> = new EventEmitter();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onChangeWeekDay(weekDay: Date): void {\n    this.dateChanged.emit(weekDay);\n  }\n\n  onSelectList(mealPlaner: MealPlaner): void {\n    this.changeMealPlaner.emit(mealPlaner);\n  }\n\n  onEditList(mealPlaner: MealPlaner): void {\n    this.editMealPlaner.emit(mealPlaner);\n  }\n\n  onDeleteList(mealPlaner: MealPlaner): void {\n    this.deleteMealPlaner.emit(mealPlaner);\n\n  }\n\n  onCreateList(): void {\n    this.createMealPlaner.emit();\n  }\n\n  onAddMeal(mealType: MealType): void {\n    this.addMeal.emit(mealType);\n  }\n\n  onRemoveMeal(meal: Meal): void {\n    this.removeMeal.emit(meal);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./mealplaner-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <app-list-header\n    [selectedList]=\"activeMealPlaner\"\n    [lists]=\"mealPlaners\"\n    [defaultTitle]=\"'shopping-list.default-title' | translate:translations:currentLanguage\"\n    [addListLabel]=\"'shopping-list.new-list' | translate:translations:currentLanguage\"\n    [buttonLabel]=\"'shopping-list.label' | translate:translations:currentLanguage\"\n    [ariaDeleteLabel]=\"'shopping-list.delete' | translate:translations:currentLanguage\"\n    [ariaEditLabel]=\"'shopping-list.edit' | translate:translations:currentLanguage\"\n    [isOffline]=\"isOffline\"\n    (selectList)=\"onSelectList($event)\"\n    (editList)=\"onEditList($event)\"\n    (deleteList)=\"onDeleteList($event)\"\n    (createList)=\"onCreateList()\"></app-list-header>\n  <app-schedule\n    [selectedDate]=\"selectedDate\"\n    [translations]=\"translations\"\n    [currentLanguage]=\"currentLanguage\"\n    [dayPlan]=\"dayPlan\"\n    [isOffline]=\"isOffline\"\n    (addMeal)=\"onAddMeal($event)\"\n    (dateChanged)=\"onChangeWeekDay($event)\"\n    (removeMeal)=\"onRemoveMeal($event)\">\n  </app-schedule>\n</div>\n"
        },
        {
            "name": "NavigationComponent",
            "id": "component-NavigationComponent-21e8180ef71e857fa6b1466fe3428bea",
            "file": "src/app/core/components/navigation/navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navigation",
            "styleUrls": [
                "./navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLanguage",
                    "defaultValue": "null",
                    "line": 12,
                    "type": "Language | null"
                },
                {
                    "name": "isLoggedIn",
                    "defaultValue": "null",
                    "line": 13,
                    "type": "boolean | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "null",
                    "line": 11,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "languageChanged",
                    "defaultValue": "new EventEmitter()",
                    "line": 15,
                    "type": "EventEmitter<Language>"
                },
                {
                    "name": "logout",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter<null>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "links",
                    "defaultValue": "[\n    {key: 'app.navigation.shopping-list', path: '/shopping-list', icon: 'shopping-cart'},\n    {key: 'app.navigation.planer', path: '/meal-planer', icon: 'calendar-alt'},\n    {key: 'app.navigation.menus', path: '/cookbook', icon: 'hamburger'},\n    {key: 'app.navigation.account', path: '/account', icon: 'user'},\n  ]",
                    "type": "Link[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "supportedLanguages",
                    "defaultValue": "SUPPORTED_LANGUAGES.values.map((language: Language) => {\n    return {value: language, key: language.toLocaleUpperCase()};\n  })",
                    "type": "SelectOption<Language>[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "language",
                            "type": "Language | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "language",
                            "type": "Language | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { SUPPORTED_LANGUAGES } from '../../constants/constants';\nimport { I18n, Language, Link, SelectOption } from '../../models/model';\n\n@Component({\n  selector: 'app-navigation',\n  templateUrl: './navigation.component.html',\n  styleUrls: ['./navigation.component.scss']\n})\nexport class NavigationComponent {\n  @Input() translations: I18n | null = null;\n  @Input() currentLanguage: Language | null = null;\n  @Input() isLoggedIn: boolean | null = null;\n  @Output() logout: EventEmitter<null> = new EventEmitter();\n  @Output() languageChanged: EventEmitter<Language> = new EventEmitter();\n\n  links: Link[] = [\n    {key: 'app.navigation.shopping-list', path: '/shopping-list', icon: 'shopping-cart'},\n    {key: 'app.navigation.planer', path: '/meal-planer', icon: 'calendar-alt'},\n    {key: 'app.navigation.menus', path: '/cookbook', icon: 'hamburger'},\n    {key: 'app.navigation.account', path: '/account', icon: 'user'},\n  ];\n\n  supportedLanguages: SelectOption<Language>[] = SUPPORTED_LANGUAGES.values.map((language: Language) => {\n    return {value: language, key: language.toLocaleUpperCase()};\n  });\n\n  constructor() {\n  }\n\n  onLogout(): void {\n    this.logout.emit();\n  }\n\n  changeLanguage(language: Language | null): void {\n    if (language) {\n      this.languageChanged.emit(language);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/settings/breakpoints\";\n@import \"../../../../styles/settings/variables\";\n@import \"../../../../styles/settings/functions\";\n\n.main-navigation {\n  position: fixed;\n  top: 0;\n  height: $header-height;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  z-index: $z-index-top;\n  background: $blue_100;\n\n  &__logo {\n    height: rem(32);\n    width: auto;\n    padding-right: $spacing-medium;\n  }\n\n  &__content {\n    display: flex;\n    height: 100%;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  &__actions {\n    height: rem(32);\n    display: flex;\n  }\n\n  &__wrapper {\n    height: 100%;\n    display: flex;\n    align-items: center;\n  }\n\n  &__secondary-action {\n    color: #ffffff;\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    padding-right: $spacing-medium;\n\n    @include medium {\n      padding-right: $spacing-large;\n    }\n  }\n\n  &__primary-action {\n    background: #ffffff;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: $border-radius-small;\n    color: $blue_100;\n    text-decoration: none;\n    padding: 0 $spacing-medium;\n  }\n}\n\n\n.mobile-navigation {\n  position: fixed;\n  background: #ffffff;\n  bottom: 0;\n  height: $mobile-navigation-height;\n  width: 100%;\n  box-shadow: 0 rem(-4) rem(6) 0 $blue-grey_20;\n  border-bottom: rem(5) solid $blue-grey_20;\n  z-index: $z-index-top;\n\n  @include large {\n    display: none;\n  }\n\n  &__link-list {\n    list-style: none;\n    display: flex;\n    margin-top: rem(5);\n  }\n\n  &__link-wrapper {\n    flex: 1 1 0;\n    display: flex;\n    flex-direction: column;\n    text-decoration: none;\n    text-align: center;\n  }\n\n  &__link-icon {\n    color: $blue_80;\n    font-size: rem(28);\n  }\n\n  &__link-text {\n    color: $blue_80;\n    font-size: $font-size-tiny;\n    margin-top: rem(-5);\n    display: block;\n    margin-bottom: rem(5);\n  }\n\n\n  &__link {\n    text-decoration: none;\n  }\n\n  &__link--active {\n    text-decoration: none;\n\n    .mobile-navigation__status {\n      width: rem(88);\n      margin: 0 auto;\n      background-color: $blue_80;\n      height: rem(5);\n      position: relative;\n      bottom: 0;\n    }\n  }\n}\n\n.desktop-navigation {\n  display: none;\n  color: #ffffff;\n  list-style: none;\n  height: 100%;\n\n  @include large {\n    display: flex;\n  }\n\n  &__link-list {\n    color: #ffffff;\n    list-style: none;\n    display: flex;\n    height: 100%;\n  }\n\n  &__link {\n    color: #ffffff;\n    text-decoration: none;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    border-bottom: rem(4) solid transparent;\n  }\n\n  &__link--active {\n    border-bottom: rem(4) solid $blue-grey_10;\n  }\n\n  &__link-list-element {\n    padding-left: $spacing-medium;\n    padding-right: $spacing-medium;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    color: #ffffff;\n  }\n}\n\n\n",
                    "styleUrl": "./navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 26
            },
            "templateData": "<nav class=\"main-navigation\">\n  <div class=\"container main-navigation__content\">\n    <div class=\"main-navigation__wrapper\">\n      <a [routerLink]=\"'/'\">\n        <img class=\"main-navigation__logo\"\n             src=\"../../../../assets/logo.svg\"\n             alt=\"Mealplaner Logo\"\n        >\n        <span class=\"visually-hidden\">\n          {{'navigation.go-home' | translate:translations:currentLanguage}}\n        </span>\n      </a>\n      <div class=\"desktop-navigation\" *ngIf=\"isLoggedIn\">\n        <ul class=\"desktop-navigation__link-list\" data-test=\"desktop-navigation\">\n          <li *ngFor=\"let link of links\" class=\"desktop-navigation__link-list-element\">\n            <a [routerLink]=\"[link.path]\"\n               class=\"desktop-navigation__link\"\n               routerLinkActive=\"desktop-navigation__link--active\">\n              {{link.key | translate:translations:currentLanguage}}\n            </a>\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <div class=\"main-navigation__actions\">\n\n      <app-select\n        class=\"main-navigation__secondary-action\"\n        [border]=\"false\"\n        [name]=\"'language'\"\n        [options]=\"supportedLanguages\"\n        [defaultValue]=\"currentLanguage\"\n        (valueChanged)=\"changeLanguage($event)\"\n        [noBackground]=\"true\"\n        [noPadding]=\"true\"\n        [ariaLabel]=\"'navigation.change-language' | translate:translations:currentLanguage\"\n        [e2eTestName]=\"'select-language'\"\n      >\n      </app-select>\n\n      <app-button *ngIf=\"isLoggedIn; else registerTemplate\"\n                  [buttonText]=\"'app.navigation.logout' | translate:translations:currentLanguage\"\n                  color=\"inverted\" (click)=\"onLogout()\"\n                  class=\"main-navigation__primary-action\"\n                  data-test=\"logout-button\"></app-button>\n\n\n      <ng-template #registerTemplate>\n        <a class=\"main-navigation__secondary-action\"\n           [routerLink]=\"['/auth/login']\"\n           data-test=\"login-link\">\n          {{'app.navigation.login' | translate:translations:currentLanguage}}\n        </a>\n\n        <a [routerLink]=\"['/auth/register']\"\n           class=\"main-navigation__primary-action\"\n           data-test=\"register-link\">\n          {{'app.navigation.register' | translate:translations:currentLanguage }}\n        </a>\n      </ng-template>\n    </div>\n  </div>\n</nav>\n\n\n<nav *ngIf=\"isLoggedIn\" class=\"mobile-navigation\">\n  <ul class=mobile-navigation__link-list data-test=\"mobile-navigation\">\n    <li *ngFor=\"let link of links\" class=\"mobile-navigation__link-wrapper\">\n      <a class=\"mobile-navigation__link\" [routerLink]=\"[link.path]\"\n         routerLinkActive=\"mobile-navigation__link--active\">\n        <fa-icon class=\"shopping-list__ellipsis mobile-navigation__link-icon\"\n                 [icon]=\"['fas', link.icon]\"></fa-icon>\n        <span\n          class=\"mobile-navigation__link-text\">{{link.key | translate:translations:currentLanguage}}</span>\n        <div\n          class=\"mobile-navigation__status\"></div>\n      </a>\n    </li>\n  </ul>\n</nav>\n"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-b1a88fa6fba2daac3112da5692c9c00a",
            "file": "src/app/core/components/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [
                "./not-found.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.scss']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/variables\";\n@import \"../../../../styles/settings/functions\";\n\n.not-found {\n  height: calc(100vh - #{rem(96)} - #{rem(96)});\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n",
                    "styleUrl": "./not-found.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"not-found container\">\n  <img src=\"assets/404.jpg\" />\n</section>\n"
        },
        {
            "name": "ProductPageComponent",
            "id": "component-ProductPageComponent-082249fed260aa6930ccf68fe8192209",
            "file": "src/app/features/product-info/pages/product-page/product-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-page",
            "styleUrls": [
                "./product-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLanguage",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 12,
                    "type": "Language | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 11,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "elements",
                    "defaultValue": "[]",
                    "type": "HTMLElement[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "plateRotationDegree",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "windowHeight",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "animateAppearingElements",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "animatePlate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 33
                },
                {
                    "name": "window:scroll",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 27
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostListener, Input, OnInit } from '@angular/core';\nimport { I18n, Language } from '../../../../core/models/model';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\n\n@Component({\n  selector: 'app-product-page',\n  templateUrl: './product-page.component.html',\n  styleUrls: ['./product-page.component.scss'],\n})\nexport class ProductPageComponent implements OnInit {\n  @Input() translations: I18n | null = {};\n  @Input() currentLanguage: Language | null = DEFAULT_LANGUAGE;\n\n  windowHeight = 0;\n  plateRotationDegree = 0;\n  elements: HTMLElement[] = [];\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.windowHeight = window.innerHeight;\n    this.elements = Array.from(document.querySelectorAll('.product-page__feature-explanation-image-wrapper--hidden'));\n    setTimeout(() => this.animateAppearingElements(), 300);\n  }\n\n  @HostListener('window:scroll', ['$event'])\n  onScroll(): void {\n    this.animatePlate();\n    this.animateAppearingElements();\n  }\n\n  @HostListener('window:resize', ['$event'])\n  onResize(): void {\n    this.animateAppearingElements();\n  }\n\n  animatePlate(): void {\n    this.plateRotationDegree = window.pageYOffset / 8;\n  }\n\n  animateAppearingElements(): void {\n    this.elements\n      .filter((element) => {\n        return element.getBoundingClientRect().top - this.windowHeight <= 0;\n      }).forEach(element => {\n        element.classList.remove('product-page__feature-explanation-image-wrapper--hidden');\n        element.classList.add('product-page__feature-explanation-image-wrapper--visible');\n      });\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/breakpoints\";\n@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/settings/functions\";\n\n\n.product-page {\n  &__header {\n    text-align: center;\n    background: $blue-grey_10;\n    margin-top: rem(-96);\n    padding-top: rem(128);\n    padding-bottom: $spacing-medium;\n  }\n\n  &__heading {\n    color: $blue-grey_80;\n    font-size: $font-size-big;\n  }\n\n  &__lead-text {\n    color: $blue-grey_60;\n    max-width: rem(550);\n    margin: rem(30) auto;\n    font-size: $font-size-normal;\n    line-height: 1.8;\n  }\n\n  &__cta {\n    width: rem(300);\n    margin: rem(40) auto;\n  }\n\n  &__img {\n    max-width: 80%;\n    margin: 0 auto;\n    display: block;\n  }\n\n  &__image-wrapper {\n    background: $blue-grey_100;\n    padding: $spacing-medium 0;\n  }\n\n  &__feature-explanation {\n    display: flex;\n    flex-direction: column;\n    padding-top: rem(80);\n\n    @include medium {\n      flex-direction: row;\n    }\n  }\n\n  &__feature-explanation-title {\n    color: $blue-100;\n    padding-bottom: $spacing-medium;\n  }\n\n  &__feature-explanation:nth-child(even) {\n    @include medium {\n      flex-direction: row-reverse;\n    }\n  }\n\n  &__feature-explanation-text {\n    flex: 1 1 0;\n    align-self: center;\n    line-height: 1.8;\n    color: $blue-grey_80;\n  }\n\n  &__feature-explanation-image-wrapper {\n    flex: 1 1 0;\n    align-self: center;\n\n    img {\n      max-width: 100%;\n    }\n\n    &--hidden {\n      visibility: hidden;\n    }\n\n    &--visible {\n      animation: fade-in 1.6s;\n    }\n  }\n}\n\n\n@keyframes fade-in {\n  from {\n    opacity: 0;\n    transform: scale(.8, .8)\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n",
                    "styleUrl": "./product-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"product-page__header\">\n  <div class=\"container\">\n    <h1 class=\"product-page__heading\">{{'product-page.heading' | translate:translations:currentLanguage }}</h1>\n    <section class=\"product-page__lead-text\" [innerHTML]=\"'product-page.lead-text' | translate:translations:currentLanguage\"></section>\n    <section class=\"product-page__cta\">\n      <app-button-link class=\"product-page__cta\" [linkText]=\"'product-page.cta' | translate:translations:currentLanguage\" [link]=\"'auth/register'\"></app-button-link>\n    </section>\n  </div>\n</div>\n\n<div class=\"product-page__image-wrapper\">\n  <div class=\"container\">\n    <img\n      class=\"product-page__img\" src=\"/assets/plate.png\"\n      [ngStyle]=\"{'transform': 'rotate(' + plateRotationDegree + 'deg)'}\"\n      alt=\"{{'product-page.meal-alt-text' | translate:translations:currentLanguage}}}\"/>\n  </div>\n</div>\n\n<div class=\"container\">\n  <section class=\"product-page__feature-explanation\">\n    <div class=\"product-page__feature-explanation-text\">\n      <h2 class=\"product-page__feature-explanation-title\">{{'product-page.meal-title' | translate:translations:currentLanguage }}</h2>\n      <p>\n        {{'product-page.meal-description' | translate:translations:currentLanguage }}\n      </p>\n    </div>\n    <div class=\"product-page__feature-explanation-image-wrapper product-page__feature-explanation-image-wrapper--hidden\" >\n      <img src=\"/assets/meal.png\" alt=\"{{'product-page.meal-illustration-text' | translate:translations:currentLanguage}}\"/>\n    </div>\n  </section>\n\n  <section class=\"product-page__feature-explanation\">\n    <div class=\"product-page__feature-explanation-text\">\n      <h2 class=\"product-page__feature-explanation-title\">{{'product-page.planer-title' | translate:translations:currentLanguage }}</h2>\n      <p>\n        {{'product-page.planer-description' | translate:translations:currentLanguage }}\n      </p>\n    </div>\n    <div class=\"product-page__feature-explanation-image-wrapper product-page__feature-explanation-image-wrapper--hidden\">\n      <img src=\"/assets/calender.png\" alt=\"{{'product-page.planer-illustration-text' | translate:translations:currentLanguage}}\"/>\n    </div>\n  </section>\n\n  <section class=\"product-page__feature-explanation\">\n    <div class=\"product-page__feature-explanation-text\">\n      <h2 class=\"product-page__feature-explanation-title\">{{'product-page.list-title' | translate:translations:currentLanguage }}</h2>\n      <p>\n        {{'product-page.list-description' | translate:translations:currentLanguage }}\n      </p>\n    </div>\n    <div class=\"product-page__feature-explanation-image-wrapper product-page__feature-explanation-image-wrapper--hidden\">\n      <img src=\"/assets/list.png\" alt=\"{{ 'product-page.list-illustration-alt-text' | translate:translations:currentLanguage }}\"/>\n    </div>\n  </section>\n\n  <section class=\"product-page__cta\">\n    <app-button-link class=\"product-page__cta\" [linkText]=\"'product-page.cta' | translate:translations:currentLanguage\" [link]=\"'auth/register'\"></app-button-link>\n  </section>\n</div>\n\n\n"
        },
        {
            "name": "ProductPageContainerComponent",
            "id": "component-ProductPageContainerComponent-03d7d5b607b9e3bc772d0dc1c8be6d08",
            "file": "src/app/features/product-info/containers/product-page-container/product-page-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-page-container",
            "styleUrls": [
                "./product-page-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-page-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.select(selectCurrentLanguage)",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { GlobalState, selectCurrentLanguage, selectTranslations } from '../../../../core/store';\nimport { Observable } from 'rxjs';\nimport { I18n, Language } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-product-page-container',\n  templateUrl: './product-page-container.component.html',\n  styleUrls: ['./product-page-container.component.scss']\n})\nexport class ProductPageContainerComponent {\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.select(selectCurrentLanguage);\n\n  constructor(\n    private store: Store<GlobalState>,\n  ) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./product-page-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-product-page\n  [translations]=\"translations$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n></app-product-page>\n"
        },
        {
            "name": "RecipeContainerComponent",
            "id": "component-RecipeContainerComponent-aa9a21f8f8b06b15e1f8f667401bf0a3",
            "file": "src/app/features/cookbook/containers/recipe-container/recipe-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-container",
            "styleUrls": [
                "./recipe-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.select((state: GlobalState) => state.appState.language)",
                    "type": "Observable<Language | null>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "recipe$",
                    "type": "Observable<Recipe | undefined> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onRecipeSaved",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { v4 as uuid } from 'uuid';\nimport { STORAGE_SELECTED_COOKBOOK_ID } from '../../../../core/constants/constants';\nimport { I18n, Language, Recipe } from '../../../../core/models/model';\nimport { StorageService } from '../../../../core/services/storage.service';\nimport { GlobalState, selectActiveCookbookId, selectedRecipe, selectTranslations } from '../../../../core/store';\nimport { RecipeContainerActions } from '../../store/actions';\n\n@Component({\n  selector: 'app-recipe-container',\n  templateUrl: './recipe-container.component.html',\n  styleUrls: ['./recipe-container.component.scss']\n})\nexport class RecipeContainerComponent implements OnInit {\n\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language | null> = this.store.select((state: GlobalState) => state.appState.language);\n  id: string | null = '';\n  recipe$: Observable<Recipe | undefined> | undefined;\n\n  constructor(\n    private store: Store<GlobalState>,\n    private router: Router,\n    private route: ActivatedRoute,\n    private storageService: StorageService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    const selectedCookbookId = this.storageService.getItem(STORAGE_SELECTED_COOKBOOK_ID);\n    this.id = this.route.snapshot.paramMap.get('id');\n    if (this.id) {\n      this.store.dispatch(RecipeContainerActions.loadRecipe({id: this.id!}));\n      this.recipe$ = this.store.select(selectedRecipe(selectedCookbookId, this.id));\n    }\n  }\n\n  onRecipeSaved(recipe: Recipe): void {\n    !!this.id ?\n      this.store.dispatch(RecipeContainerActions.editRecipe({recipeToEdit: recipe})) :\n      this.store.select(selectActiveCookbookId).pipe(\n        take(1)\n      ).subscribe((activeCookbookId: string) => this.store.dispatch(RecipeContainerActions.createRecipe({\n          optimisticId: uuid(),\n          recipeToSave: {\n            ...recipe,\n            cookbookId: activeCookbookId\n          }\n        }))\n      );\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./recipe-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-recipe-page\n  [translations]=\"translations$ | async\"\n  [currentLanguage]=\" currentLanguage$ | async\"\n  [recipe$]=\"recipe$\"\n  [isEmptyForm]=\"!id\"\n  (recipeSaved)=\"onRecipeSaved($event)\"\n>\n</app-recipe-page>\n"
        },
        {
            "name": "RecipeListComponent",
            "id": "component-RecipeListComponent-a503ea84de019b7989fa6174c06c1ded",
            "file": "src/app/features/cookbook/components/recipe-list/recipe-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-list",
            "styleUrls": [
                "./recipe-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 15,
                    "type": "Language | null"
                },
                {
                    "name": "isOffline",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean | null"
                },
                {
                    "name": "recipes",
                    "line": 16,
                    "type": "Recipe[] | undefined | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 14,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickRecipe",
                    "defaultValue": "new EventEmitter<Recipe>()",
                    "line": 21,
                    "type": "EventEmitter<Recipe>"
                },
                {
                    "name": "deleteRecipe",
                    "defaultValue": "new EventEmitter<Recipe>()",
                    "line": 20,
                    "type": "EventEmitter<Recipe>"
                },
                {
                    "name": "editRecipe",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 19,
                    "type": "EventEmitter<string>"
                },
                {
                    "name": "inputChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 18,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "searchField",
                    "type": "ElementRef | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'searchField', {static: true, read: ElementRef}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getPageState",
                    "args": [
                        {
                            "name": "items",
                            "type": "Recipe[] | null | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "Recipe[] | null | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeleteRecipe",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditRecipe",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output, ViewChild } from '@angular/core';\nimport { fromEvent, Subject } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, takeUntil } from 'rxjs/operators';\nimport { DEFAULT_LANGUAGE, INPUT_DEBOUNCE_TIME } from '../../../../core/constants/constants';\nimport { I18n, Language, Recipe } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-recipe-list',\n  templateUrl: './recipe-list.component.html',\n  styleUrls: ['./recipe-list.component.scss']\n})\nexport class RecipeListComponent implements OnInit, OnDestroy {\n\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Input() recipes: Recipe[] | undefined | null;\n  @Input() isOffline: boolean | null = false;\n  @Output() inputChanged: EventEmitter<string> = new EventEmitter<string>();\n  @Output() editRecipe: EventEmitter<string> = new EventEmitter<string>();\n  @Output() deleteRecipe: EventEmitter<Recipe> = new EventEmitter<Recipe>();\n  @Output() clickRecipe: EventEmitter<Recipe> = new EventEmitter<Recipe>();\n\n  @ViewChild('searchField', {static: true, read: ElementRef}) searchField: ElementRef | undefined;\n\n  destroy$: Subject<void> = new Subject();\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    fromEvent<InputEvent>(this.searchField?.nativeElement, 'input').pipe(\n      takeUntil(this.destroy$),\n      debounceTime(INPUT_DEBOUNCE_TIME),\n      distinctUntilChanged(),\n      map((event: InputEvent) => (event?.target as HTMLInputElement).value)\n    ).subscribe((value: string) => this.inputChanged.emit(value));\n  }\n\n  onEditRecipe(id: string | undefined): void {\n    if (id) {\n      this.editRecipe.emit(id);\n    }\n  }\n\n  onDeleteRecipe(recipe: Recipe): void {\n      this.deleteRecipe.emit(recipe);\n  }\n\n  onClick(recipe: Recipe): void {\n    this.clickRecipe.emit(recipe);\n  }\n\n  getPageState(items: Recipe[] | null | undefined): string {\n    if (items === null || items === undefined) {\n      return 'loading';\n    }\n\n    if (items.length === 0) {\n      return 'empty';\n    }\n\n    return 'default';\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/breakpoints\";\n@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/mixins/style\";\n\n.recipe-list {\n  width: 100%;\n  display: block;\n  overflow: hidden;\n\n  &__filter-field{\n    display: block;\n    padding-bottom: $spacing-large;\n  }\n\n  &__item {\n    border: $border-primary;\n    color: $text-70;\n    font-size: $font-size-normal;\n    box-sizing: border-box;\n    margin-top: $spacing-small;\n\n    @include large {\n      border: none;\n      border-bottom: solid 1px $blue_70;\n      margin: 0;\n\n      &:last-child {\n        border-bottom: none;\n      }\n    }\n  }\n\n\n\n  &__title-box {\n    display: flex;\n    flex: 1 1 70%;\n    align-items: center;\n    padding: $spacing-small;\n\n    &:hover {\n      background-color: $blue_20;\n      cursor: pointer;\n    }\n\n    &:active {\n      background-color: $blue_30;\n    }\n\n    @include large{\n      padding: 0 $spacing-small;\n    }\n  }\n\n  &__buttons-box {\n    display: flex;\n\n    @include large{\n      border-left: 1px solid;\n      border-image: linear-gradient(\n          to bottom,\n          white,\n          $blue_70,\n          white\n      ) 1 100%;\n    }\n  }\n\n  &__button {\n    width: 100%;\n    padding: $spacing-small\n  }\n\n  &__row {\n    display: flex;\n    justify-content: space-between;\n    flex-direction: column;\n\n    @include large{\n      flex-direction: row;\n      align-items: stretch;\n    }\n  }\n\n  @include skeleton('.recipe-list__skeleton', $blue-grey_30, 3.5s) {\n    background: $blue-grey_40;\n    height: rem(24);\n    margin: $spacing-small auto $spacing-medium $spacing-medium;\n    border-radius: $border-radius-default;\n    width: 90%;\n\n    &:nth-child(2){\n      width: 75%;\n    }\n\n    &:nth-child(3){\n      width: 85%;\n    }\n\n    &:nth-child(4){\n      width: 80%;\n      margin-bottom: $spacing-large;\n    }\n  };\n\n  &--empty {\n    margin: 0 auto;\n    max-width: 80%;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    padding-bottom: $spacing-large;\n    color: $text-40;\n    font-size: $font-size-tiny;\n    text-align: center;\n    font-weight: 500;\n    line-height: 2;\n\n    @include large {\n      font-size: $font-size-normal;\n    }\n  }\n\n  &__image {\n    max-width: 100%;\n  }\n\n}\n",
                    "styleUrl": "./recipe-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<section class=\"recipe-list\" [ngSwitch]=\"getPageState(recipes)\">\n  <app-input\n    class=\"recipe-list__filter-field\"\n    [type]=\"'search'\"\n    [placeholder]=\"'input.search' | translate:translations:currentLang\"\n    #searchField\n  ></app-input>\n  <div *ngSwitchCase=\"'default'\">\n    <div class=\"recipe-list__item\" *ngFor=\"let recipe of recipes\">\n      <div class=\"recipe-list__row\">\n        <div class=\"recipe-list__title-box\" (click)=\"onClick(recipe)\">\n          <span>{{recipe.title}}</span>\n        </div>\n        <div *ngIf=\"!isOffline\" class=\"recipe-list__buttons-box\">\n          <app-button class=\"recipe-list__button\"\n                      [buttonText]=\"'button.edit' | translate:translations:currentLang\"\n                      [iconLeft]=\"'pen-square'\"\n                      [color]=\"'accent'\"\n                      (click)=\"onEditRecipe(recipe.id)\"\n                      [e2eTestName]=\"'RECIPE-ROW-EDIT'\"\n          ></app-button>\n          <app-button class=\"recipe-list__button\"\n                      [buttonText]=\"'button.delete' | translate:translations:currentLang\"\n                      [iconLeft]=\"'times'\"\n                      [color]=\"'warn'\"\n                      (click)=\"onDeleteRecipe(recipe)\"\n                      [e2eTestName]=\"'RECIPE-ROW-DELETE'\"\n          ></app-button>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngSwitchCase=\"'empty'\" class=\"recipe-list--empty\">\n    <img class=\"recipe-list__image\" src=\"../../../../../assets/meal.png\" alt=\"Empty List\"/>\n    <div>{{'cookbook.is-empty' | translate:translations:currentLang }}\n      <br/> {{'cookbook.add-recipe' | translate:translations:currentLang }} </div>\n  </div>\n\n  <div *ngSwitchCase=\"'loading'\">\n    <div class=\"recipe-list__skeleton\"></div>\n    <div class=\"recipe-list__skeleton\"></div>\n    <div class=\"recipe-list__skeleton\"></div>\n    <div class=\"recipe-list__skeleton\"></div>\n  </div>\n</section>\n"
        },
        {
            "name": "RecipePageComponent",
            "id": "component-RecipePageComponent-1a6869a2634ea38861327f5761dcbbb6",
            "file": "src/app/features/cookbook/pages/recipe-page/recipe-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-recipe-page",
            "styleUrls": [
                "./recipe-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./recipe-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLanguage",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 19,
                    "type": "Language | null"
                },
                {
                    "name": "isEmptyForm",
                    "defaultValue": "false",
                    "line": 21
                },
                {
                    "name": "recipe$",
                    "line": 20,
                    "type": "Observable<Recipe | undefined> | undefined"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 18,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "recipeSaved",
                    "defaultValue": "new EventEmitter<Recipe>()",
                    "line": 22,
                    "type": "EventEmitter<Recipe>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "type": "Subject<void>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "ingredients",
                    "type": "FormArray",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "recipeForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "units",
                    "defaultValue": "[]",
                    "type": "SelectOption<string>[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "addEmptyIngredientRow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118
                },
                {
                    "name": "createNewIngredientFormGroup",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "optional": true
                        },
                        {
                            "name": "unit",
                            "type": "Unit",
                            "optional": true
                        },
                        {
                            "name": "isStapleFood",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "FormGroup",
                    "typeParameters": [],
                    "line": 81,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "amount",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "unit",
                            "type": "Unit",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isStapleFood",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUnits",
                    "args": [],
                    "optional": false,
                    "returnType": "SelectOption[]",
                    "typeParameters": [],
                    "line": 135
                },
                {
                    "name": "deleteIngredient",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fillForm",
                    "args": [
                        {
                            "name": "recipe",
                            "type": "Recipe | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "recipe",
                            "type": "Recipe | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getButtonText",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 111
                },
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 127,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIngredientFormControl",
                    "args": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl"
                        },
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 77,
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { LocationStrategy } from '@angular/common';\nimport { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { AbstractControl, FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Observable, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { isFormTouchedOrDirty, translateValidationErrors } from '../../../../core/helpers/helpers';\nimport { I18n, Language, Recipe, RecipeIngredient, SelectOption, Unit } from '../../../../core/models/model';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\n\n@Component({\n  selector: 'app-recipe-page',\n  templateUrl: './recipe-page.component.html',\n  styleUrls: ['./recipe-page.component.scss']\n})\nexport class RecipePageComponent implements OnInit, OnDestroy {\n\n  @Input() translations: I18n | null = {};\n  @Input() currentLanguage: Language | null = DEFAULT_LANGUAGE;\n  @Input() recipe$: Observable<Recipe | undefined> | undefined;\n  @Input() isEmptyForm = false;\n  @Output() recipeSaved: EventEmitter<Recipe> = new EventEmitter<Recipe>();\n\n  recipeForm: FormGroup;\n  ingredients: FormArray;\n  units: SelectOption<string>[] = [];\n  destroy$: Subject<void> = new Subject<void>();\n\n  constructor(\n    private translatePipe: TranslatePipe,\n    private location: LocationStrategy,\n  ) {\n    this.recipeForm = new FormGroup({\n      id: new FormControl(''),\n      cookbookId: new FormControl(''),\n      title: new FormControl('', [Validators.required]),\n      url: new FormControl(''),\n      ingredients: new FormArray([\n        this.createNewIngredientFormGroup()\n      ])\n    });\n    this.ingredients = this.recipeForm?.controls.ingredients as FormArray;\n  }\n\n  ngOnInit(): void {\n    this.units = this.createUnits();\n    this.recipe$?.pipe(takeUntil(this.destroy$)).subscribe((recipe: Recipe | undefined) => this.fillForm(recipe));\n  }\n\n  fillForm(recipe: Recipe | undefined): void {\n    if (!!recipe) {\n      Object.keys(recipe).forEach((key: string) => {\n        if (key === 'ingredients') {\n          (this.recipeForm.controls.ingredients as FormArray).controls = [];\n          recipe?.ingredients.forEach((ingredient: RecipeIngredient, index: number) => {\n            (this.recipeForm.controls.ingredients as FormArray)\n              .push(this.createNewIngredientFormGroup(\n                ingredient.id,\n                ingredient.title,\n                ingredient.amount,\n                ingredient.unit,\n                ingredient.isStapleFood)\n              );\n          });\n        } else {\n          // @ts-ignore\n          this.getFormControl(key).setValue(recipe[key]);\n        }\n      });\n    }\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.recipeForm?.controls[key] as FormControl;\n  }\n\n  getIngredientFormControl(ingredient: AbstractControl, key: string): FormControl {\n    return (ingredient as FormGroup).controls[key] as FormControl;\n  }\n\n  createNewIngredientFormGroup(id?: string, title?: string, amount?: number, unit?: Unit, isStapleFood?: boolean): FormGroup {\n    return new FormGroup({\n      id: new FormControl(id || ''),\n      title: new FormControl(title || '', [Validators.required]),\n      amount: new FormControl(amount || null, [Validators.required, Validators.min(1)]),\n      unit: new FormControl(unit || 'kg', [Validators.required]),\n      isStapleFood: new FormControl(isStapleFood || false, [Validators.required])\n    });\n  }\n\n  onSubmit(): void {\n    this.destroy$.next();\n    if (!isFormTouchedOrDirty(this.recipeForm)) {\n      this.location.back();\n      return;\n    }\n    const recipeToSave: Recipe = this.recipeForm?.value;\n    if (!recipeToSave.id) {\n      delete recipeToSave.id;\n      recipeToSave.title = recipeToSave.title.substring(0, 1).toUpperCase() + recipeToSave.title.substring(1);\n    }\n    recipeToSave.ingredients.map((ingredient: RecipeIngredient) => {\n      if (!ingredient.id) {\n        delete ingredient.id;\n      }\n      ingredient.amount = +ingredient.amount;\n    });\n    this.recipeSaved.emit(recipeToSave);\n  }\n\n  getButtonText(): string {\n    if (isFormTouchedOrDirty(this.recipeForm)) {\n      return this.getFormControl('id').value ? 'button.modify' : 'button.submit';\n    }\n    return 'button.back';\n  }\n\n  addEmptyIngredientRow(): void {\n    this.ingredients.push(this.createNewIngredientFormGroup());\n  }\n\n  deleteIngredient(index: number): void {\n    (this.recipeForm?.controls.ingredients as FormArray).removeAt(index);\n    this.recipeForm.markAllAsTouched();\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLanguage);\n  }\n\n  createUnits(): SelectOption<string>[] {\n    return [\n      {\n        value: 'tableSpoon',\n        key: this.translatePipe.transform('unit.table-spoon', this.translations, this.currentLanguage)\n      },\n      {\n        value: 'coffeeSpoon',\n        key: this.translatePipe.transform('unit.coffee-spoon', this.translations, this.currentLanguage)\n      },\n      {\n        value: 'pinch',\n        key: this.translatePipe.transform('unit.pinch', this.translations, this.currentLanguage)\n      },\n      {\n        value: 'pack',\n        key: this.translatePipe.transform('unit.pack', this.translations, this.currentLanguage)\n      },\n      {\n        value: 'piece',\n        key: this.translatePipe.transform('unit.piece', this.translations, this.currentLanguage)\n      },\n      {value: 'kg', key: 'kg'},\n      {value: 'g', key: 'g'},\n      {value: 'l', key: 'l'},\n      {value: 'dl', key: 'dl'},\n      {value: 'ml', key: 'ml'},\n    ];\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/breakpoints\";\n@import \"../../../../../styles/mixins/forms\";\n@import \"../../../../../styles/mixins/style\";\n@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/settings/functions\";\n\n.recipe-form {\n\n  &__input {\n    display: block;\n    margin-bottom: $spacing-medium;\n  }\n\n  &__button {\n    display: block;\n    margin-top: $spacing-large;\n  }\n\n  &__ingredients_label {\n    @include label;\n  }\n\n  &__ingredients {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    overflow: hidden;\n    border: $border-primary;\n    border-radius: $border-radius-default;\n  }\n\n  &__ingredients-row {\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    overflow: hidden;\n    border-bottom: 1px solid $blue_70;\n    padding: $spacing-medium $spacing-large;\n\n    @include large {\n      flex-direction: row;\n    }\n\n    &:last-of-type {\n      border-bottom: none;\n    }\n  }\n\n  &__ingredient-input {\n    padding-bottom: $spacing-medium;\n    flex: 1 1 auto;\n\n    @include large {\n      padding-bottom: 0;\n      padding-right: $spacing-medium;\n\n      &:last-child {\n        padding-right: 0;\n      }\n    }\n  }\n\n  &__ingredient-amount {\n    @include large {\n      max-width: rem(128);\n    }\n  }\n\n  &__ingredient-unit {\n    @include large {\n      max-width: rem(150);\n    }\n  }\n\n  &__ingredient-toggle {\n    margin-bottom: $spacing-medium;\n    color: $blue_70;\n    @include large {\n      max-width: rem(160);\n      margin: auto 0;\n    }\n  }\n\n  &__ingredients-button {\n    margin: 0 $spacing-large $spacing-medium $spacing-large;\n  }\n\n  &__ingredient-icon-wrapper {\n    background-color: $red_70;\n    border-radius: $border-radius-default;\n    @include button();\n\n    &--disabled {\n      background-color: $blue-grey_50;\n      cursor: not-allowed;\n    }\n\n    @include large {\n      background: none;\n      border: none;\n      width: fit-content;\n      height: unset;\n    }\n  }\n\n  &__ingredient-delete-icon {\n    color: $red_70;\n    cursor: pointer;\n    margin: auto;\n    font-size: $font-size-medium;\n    visibility: hidden;\n\n    @include large() {\n      visibility: visible;\n    }\n\n    &--disabled {\n      color: $blue-grey_10;\n      cursor: not-allowed;\n\n      @include large {\n        color: $blue-grey_50;\n      }\n    }\n  }\n\n  &__ingredient-delete-text {\n    color: $blue-grey_10;\n\n    @include large() {\n      display: none;\n    }\n  }\n}\n\n@include skeleton('.recipe__skeleton', $blue-grey_30, 3.5s) {\n  background: $blue-grey_40;\n  height: rem(24);\n  margin: $spacing-small auto $spacing-medium $spacing-medium;\n  border-radius: $border-radius-default;\n  width: 90%;\n\n  &:nth-child(2){\n    width: 75%;\n  }\n\n  &:nth-child(3){\n    width: 85%;\n  }\n\n  &:nth-child(4){\n    width: 80%;\n    margin-bottom: $spacing-large;\n  }\n};\n\n\n\n",
                    "styleUrl": "./recipe-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    },
                    {
                        "name": "location",
                        "type": "LocationStrategy"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "location",
                        "type": "LocationStrategy",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"container\">\n  <div *ngIf=\"(recipe$ | async) || isEmptyForm; else loading\">\n    <form class=\"recipe-form\" [formGroup]=\"recipeForm\" (ngSubmit)=\"onSubmit()\">\n      <app-input\n        class=\"recipe-form__input recipe-form--input-title\"\n        [name]=\"'title'\"\n        [placeholder]=\"'recipe-form.placeholder.title' | translate:translations:currentLanguage\"\n        [label]=\"'recipe-form.label.title' | translate:translations:currentLanguage\"\n        [errors]=\"getErrorsFor('title')\"\n        [formControl]=\"getFormControl('title')\"\n        [e2eTestName]=\"'recipe-title'\"\n      ></app-input>\n      <app-input\n        class=\"recipe-form__input recipe-form--input-url\"\n        [name]=\"'url'\"\n        [placeholder]=\"'recipe-form.placeholder.url' | translate:translations:currentLanguage\"\n        [label]=\"'recipe-form.label.url' | translate:translations:currentLanguage\"\n        [formControl]=\"getFormControl('url')\"\n        [e2eTestName]=\"'recipe-url'\"\n      ></app-input>\n\n      <label class=\"recipe-form__ingredients_label\">{{'ingredients.label-text' | translate:translations:currentLanguage}}</label>\n      <div class=\"recipe-form__ingredients recipe-form__input\">\n        <div *ngFor=\"let ingredient of ingredients.controls; let last = last; let index = index\"\n             class=\"recipe-form__ingredients-row\"\n             [ngClass]=\"{'ingredients__row--last': last}\">\n          <app-input\n            class=\"recipe-form__ingredient-input recipe-form__ingredient-amount\"\n            [type]=\"'number'\"\n            [minValue]=\"0\"\n            [name]=\"'amount'\"\n            [placeholder]=\"'recipe-form.placeholder.amount' | translate:translations:currentLanguage\"\n            [formControl]=\"getIngredientFormControl(ingredient, 'amount')\"\n            [e2eTestName]=\"'ingredient-amount'\"\n          >\n          </app-input>\n          <app-select\n            class=\"recipe-form__ingredient-input recipe-form__ingredient-unit\"\n            [options]=\"units\"\n            [name]=\"'unit'\"\n            [formControl]=\"getIngredientFormControl(ingredient, 'unit')\"\n            [e2eTestName]=\"'ingredient-unit'\"\n          >\n          </app-select>\n          <app-input\n            class=\"recipe-form__ingredient-input\"\n            [name]=\"'title'\"\n            [placeholder]=\"'recipe-form.placeholder.title' | translate:translations:currentLanguage\"\n            [formControl]=\"getIngredientFormControl(ingredient, 'title')\"\n            [e2eTestName]=\"'ingredient-title'\"\n          >\n          </app-input>\n          <mat-slide-toggle\n            class=\"recipe-form__ingredient-toggle\"\n            [color]=\"'primary'\"\n            [formControl]=\"getIngredientFormControl(ingredient, 'isStapleFood')\">\n            {{'recipe-form.text.toggle' | translate:translations:currentLanguage}}\n          </mat-slide-toggle>\n          <button\n            class=\"recipe-form__ingredient-icon-wrapper\"\n            (click)=\"deleteIngredient(index)\"\n            [disabled]=\"ingredients?.length === 1\"\n            [ngClass]=\"{'recipe-form__ingredient-icon-wrapper--disabled': ingredients?.length === 1}\">\n            <fa-icon\n              class=\"recipe-form__ingredient-delete-icon\"\n              [attr.aria-label]=\"'recipe-form.button.delete' | translate:translations:currentLanguage\"\n              [ngClass]=\"{'recipe-form__ingredient-delete-icon--disabled': ingredients?.length === 1}\"\n              [icon]=\"['fas', 'times']\">\n            </fa-icon>\n            <span class=\"recipe-form__ingredient-delete-text\">{{'recipe-form.button.delete' | translate:translations:currentLanguage}}</span>\n          </button>\n        </div>\n        <app-button\n          class=\"recipe-form__ingredients-button\"\n          [buttonText]=\"'recipe-form.button.new-ingredient' | translate:translations:currentLanguage\"\n          [isDisabled]=\"ingredients.invalid\"\n          [color]=\"'accent'\"\n          (clicked)=\"addEmptyIngredientRow()\"\n          [e2eTestName]=\"'new-ingredient'\"\n        >\n        </app-button>\n      </div>\n\n      <app-button\n        class=\"recipe-form__button\"\n        [buttonType]=\"'submit'\"\n        [buttonText]=\"getButtonText() | translate:translations:currentLanguage\"\n        [isDisabled]=\"recipeForm.invalid\"\n        [e2eTestName]=\"'create-recipe'\"\n      ></app-button>\n    </form>\n  </div>\n\n  <ng-template #loading>\n    <div class=\"recipe__skeleton\"></div>\n    <div class=\"recipe__skeleton\"></div>\n    <div class=\"recipe__skeleton\"></div>\n    <div class=\"recipe__skeleton\"></div>\n  </ng-template>\n\n</div>\n\n\n\n"
        },
        {
            "name": "RegisterContainerComponent",
            "id": "component-RegisterContainerComponent-ec260ce87b87891277d0f01e1da97aa6",
            "file": "src/app/features/auth/containers/register-container/register-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-container",
            "styleUrls": [
                "./register-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backendError",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.pipe(select(state => state.appState.language))",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "RegisterCredentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "RegisterCredentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { I18n, Language, RegisterCredentials } from '../../../../core/models/model';\nimport { GlobalState, selectTranslations } from '../../../../core/store';\nimport { select, Store } from '@ngrx/store';\nimport { AuthApiActions, RegisterContainerActions } from '../../store/actions';\nimport { Actions, ofType } from '@ngrx/effects';\n\n@Component({\n  selector: 'app-register-container',\n  templateUrl: './register-container.component.html',\n  styleUrls: ['./register-container.component.scss']\n})\nexport class RegisterContainerComponent {\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.pipe(select(state => state.appState.language));\n  backendError: string | undefined;\n\n  constructor(private store: Store<GlobalState>, private actions$: Actions) {\n    this.actions$.pipe(ofType(AuthApiActions.registerFailure)).subscribe(({error}: { error: string }) => {\n      this.backendError = error;\n    });\n  }\n\n  register(credentials: RegisterCredentials): void {\n    this.store.dispatch(RegisterContainerActions.register({credentials}));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./register-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-register-page\n  [translations]=\"translations$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n  [backendErrorMessage]=\"backendError\"\n  (credentialsReceived)=\"register($event)\"\n></app-register-page>\n"
        },
        {
            "name": "RegisterPageComponent",
            "id": "component-RegisterPageComponent-63618007e416f1944fa28f1f18a5e589",
            "file": "src/app/features/auth/pages/regsiter-page/register-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-page",
            "styleUrls": [
                "./register-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backendErrorMessage",
                    "line": 19,
                    "type": "string | undefined"
                },
                {
                    "name": "buttonText",
                    "defaultValue": "''",
                    "line": 17
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 20,
                    "type": "Language | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 18,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "credentialsReceived",
                    "defaultValue": "new EventEmitter()",
                    "line": 21,
                    "type": "EventEmitter<RegisterCredentials>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "isPasswordVisible",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "IconProp",
                    "typeParameters": [],
                    "line": 72
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "togglePasswordVisibility",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { translateValidationErrors } from '../../../../core/helpers/helpers';\nimport { I18n, Language, RegisterCredentials } from '../../../../core/models/model';\nimport * as CustomValidators from '../../../../core/validators/custom-validators.validator';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\n\n@Component({\n  selector: 'app-register-page',\n  templateUrl: './register-page.component.html',\n  styleUrls: ['./register-page.component.scss']\n})\nexport class RegisterPageComponent {\n\n  @Input() buttonText = '';\n  @Input() translations: I18n | null = {};\n  @Input() backendErrorMessage: string | undefined;\n  @Input() currentLanguage: Language | null = DEFAULT_LANGUAGE;\n  @Output() credentialsReceived: EventEmitter<RegisterCredentials> = new EventEmitter();\n\n  loginForm: FormGroup;\n  isPasswordVisible = false;\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.loginForm = new FormGroup({\n      name: new FormControl('', [\n        Validators.required,\n      ]),\n      email: new FormControl('', [\n        Validators.required,\n        CustomValidators.email,\n      ]),\n      password: new FormControl('', [\n        Validators.required,\n        Validators.minLength(4),\n      ]),\n\n      invitationCode: new FormControl('', [\n        Validators.required,\n      ])\n    });\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.loginForm?.controls[key] as FormControl;\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.valid) {\n      this.credentialsReceived.emit(this.loginForm?.value);\n      return;\n    }\n\n    this.loginForm.markAllAsTouched();\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLanguage)\n      .filter((error, index) => index === 0);\n  }\n\n  togglePasswordVisibility(): void {\n    this.isPasswordVisible = !this.isPasswordVisible;\n  }\n\n  getIcon(): IconProp {\n    return this.isPasswordVisible ? ['fas', 'eye-slash'] : ['fas', 'eye'];\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/mixins/forms\";\n\n\n.register-form {\n  @include authform;\n}\n",
                    "styleUrl": "./register-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-auth-form\n  [heading]=\"'auth.register.title' | translate:translations:currentLanguage\"\n  [buttonText]=\"'auth.register.cta' | translate:translations:currentLanguage\"\n  [backedErrorMessage]=\"backendErrorMessage && (backendErrorMessage | translate:translations:currentLanguage)\"\n  [authForm]=\"loginForm\"\n  (formSubmit)=\"onSubmit()\"\n>\n  <ng-template #formTemplate let-form=\"form\">\n    <div [formGroup]=\"form\">\n      <div class=\"register-form__field\">\n        <fa-icon class=\"register-form__icon\"\n                 [icon]=\"['fas','user']\"></fa-icon>\n        <app-input\n          class=\"register-form__input\"\n          type=\"text\"\n          [border]=\"false\"\n          [name]=\"'name'\"\n          [placeholder]=\"'auth.register.name' | translate:translations:currentLanguage\"\n          [formControl]=\"getFormControl('name')\"\n          [errors]=\"getErrorsFor('name')\"></app-input>\n\n      </div>\n\n      <div class=\"register-form__field\">\n        <fa-icon class=\"register-form__icon\"\n                 [icon]=\"['fas','envelope']\"></fa-icon>\n        <app-input\n          class=\"register-form__input\"\n          type=\"email\"\n          [border]=\"false\"\n          [name]=\"'email'\"\n          [placeholder]=\"'auth.register.email' | translate:translations:currentLanguage\"\n          [formControl]=\"getFormControl('email')\"\n          [errors]=\"getErrorsFor('email')\"></app-input>\n      </div>\n\n      <div class=\"register-form__field\">\n        <fa-icon class=\"register-form__icon\"\n                 [icon]=\"['fas','unlock-alt']\"></fa-icon>\n        <app-input\n          class=\"register-form__input\"\n          [type]=\"isPasswordVisible ? 'text' : 'password'\"\n          [border]=\"false\"\n          [name]=\"'password'\"\n          [placeholder]=\"'auth.register.password' | translate:translations:currentLanguage\"\n          [formControl]=\"getFormControl('password')\"\n          [errors]=\"getErrorsFor('password')\"></app-input>\n        <fa-icon class=\"register-form__icon register-form__icon--padding-left\"\n                 (click)=\"togglePasswordVisibility()\"\n                 [icon]=\"getIcon()\"></fa-icon>\n      </div>\n\n\n      <div class=\"register-form__field\">\n        <fa-icon class=\"register-form__icon\"\n                 [icon]=\"['fas','handshake']\"></fa-icon>\n        <app-input\n          class=\"register-form__input\"\n          type=\"text\"\n          [border]=\"false\"\n          [name]=\"'invitationCode'\"\n          [placeholder]=\"'auth.register.invitationCode' | translate:translations:currentLanguage\"\n          [formControl]=\"getFormControl('invitationCode')\"\n          [errors]=\"getErrorsFor('invitationCode')\"\n          [ariaDescribedBy]=\"'project-disclaimer'\"></app-input>\n      </div>\n      <div class=\"register-form__helper\" id=\"project-disclaimer\" [innerHTML]=\"'auth.register.disclaimer' | translate:translations:currentLanguage\">\n\n      </div>\n\n    </div>\n  </ng-template>\n\n  <ng-template #formFooter>\n    <div class=\"register-form__hint\" [innerHTML]=\"'auth.register.already-registered'  | translate:translations:currentLanguage \">\n\n    </div>\n  </ng-template>\n</app-auth-form>\n\n\n\n\n\n"
        },
        {
            "name": "ResetPasswordContainerComponent",
            "id": "component-ResetPasswordContainerComponent-d4680ca262b1d3304a428d5312db9495",
            "file": "src/app/features/auth/containers/reset-password-container/reset-password-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password-container",
            "styleUrls": [
                "./reset-password-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backendError",
                    "defaultValue": "undefined",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "codeQueryParam",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.pipe(select(state => state.appState.language))",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { GlobalState, selectTranslations } from '../../../../core/store';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthApiActions, ResetPasswordContainerActions } from '../../store/actions';\nimport { Observable } from 'rxjs';\nimport { I18n, Language } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-reset-password-container',\n  templateUrl: './reset-password-container.component.html',\n  styleUrls: ['./reset-password-container.component.scss']\n})\nexport class ResetPasswordContainerComponent {\n\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.pipe(select(state => state.appState.language));\n  backendError: string | undefined = undefined;\n  codeQueryParam: string;\n\n  constructor(private store: Store<GlobalState>, private actions$: Actions, private activatedRout: ActivatedRoute) {\n    this.actions$.pipe(ofType(AuthApiActions.restPasswordFailure)).subscribe(({error}: { error: string }) => {\n      this.backendError = error;\n    });\n\n    this.codeQueryParam = '' + this.activatedRout.snapshot.queryParams?.code;\n  }\n\n  resetPassword(password: string): void {\n    this.store.dispatch(ResetPasswordContainerActions.resetPassword({password, resetPasswordToken: this.codeQueryParam}));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./reset-password-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "activatedRout",
                        "type": "ActivatedRoute"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRout",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-reset-password-page\n  [translations]=\"translations$ | async\"\n  [currentLang]=\"currentLanguage$ | async\"\n  [backendError]=\"backendError\"\n  (submitResetPasswordForm)=\"resetPassword($event)\"\n>\n</app-reset-password-page>\n"
        },
        {
            "name": "ResetPasswordPageComponent",
            "id": "component-ResetPasswordPageComponent-606105eb02a19df270c132b0e75d0eb0",
            "file": "src/app/features/auth/pages/reset-password-page/reset-password-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password-page",
            "styleUrls": [
                "./reset-password-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backendError",
                    "line": 17,
                    "type": "string | undefined"
                },
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 16,
                    "type": "Language | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 15,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "submitResetPasswordForm",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "resetPasswordResetCodeForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { I18n, Language } from '../../../../core/models/model';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport { translateValidationErrors } from '../../../../core/helpers/helpers';\n\n@Component({\n  selector: 'app-reset-password-page',\n  templateUrl: './reset-password-page.component.html',\n  styleUrls: ['./reset-password-page.component.scss']\n})\nexport class ResetPasswordPageComponent {\n\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Input() backendError: string | undefined;\n  @Output() submitResetPasswordForm: EventEmitter<string> = new EventEmitter();\n\n  resetPasswordResetCodeForm: FormGroup;\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.resetPasswordResetCodeForm = new FormGroup({\n      password: new FormControl('', [\n        Validators.required,\n        Validators.minLength(4),\n      ])\n    });\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.resetPasswordResetCodeForm?.controls[key] as FormControl;\n  }\n\n  onSubmit(): void {\n    if (this.resetPasswordResetCodeForm.valid) {\n      this.submitResetPasswordForm.emit(this.resetPasswordResetCodeForm?.value.password);\n      return;\n    }\n\n    this.resetPasswordResetCodeForm.markAllAsTouched();\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLang)\n      .filter((error, index) => index === 0);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/mixins/forms\";\n\n\n.reset-password-form {\n  @include authform;\n}\n",
                    "styleUrl": "./reset-password-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<app-auth-form\n  class=\"reset-password-form\"\n  [heading]=\"'auth.reset-password.title' | translate:translations:currentLang\"\n  [buttonText]=\"'auth.rest-password.cta' | translate:translations:currentLang\"\n  [backedErrorMessage]=\"backendError && (backendError | translate:translations:currentLang)\"\n  [authForm]=\"resetPasswordResetCodeForm\"\n  (formSubmit)=\"onSubmit()\"\n>\n  <ng-template #formTemplate let-form=\"form\">\n    <div [formGroup]=\"form\">\n      <div class=\"reset-password-form__field\">\n        <fa-icon class=\"reset-password-form__icon\"\n                 [icon]=\"['fas','unlock-alt']\"></fa-icon>\n        <app-input\n          class=\"reset-password-form__input\"\n          type=\"password\"\n          [border]=\"false\"\n          [name]=\"'password'\"\n          [placeholder]=\"'auth.reset-password.password' | translate:translations:currentLang\"\n          [formControl]=\"getFormControl('password')\"\n          [errors]=\"getErrorsFor('password')\"></app-input>\n      </div>\n    </div>\n  </ng-template>\n\n\n\n</app-auth-form>\n\n\n\n\n\n"
        },
        {
            "name": "ScheduleComponent",
            "id": "component-ScheduleComponent-7cccae6b3dbf01a23f7ff5df8ce16d6d",
            "file": "src/app/features/meal-planer/components/schedule/schedule.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schedule",
            "styleUrls": [
                "./schedule.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLanguage",
                    "defaultValue": "null",
                    "line": 14,
                    "type": "Language | null"
                },
                {
                    "name": "dayPlan",
                    "defaultValue": "null",
                    "line": 15,
                    "type": "DayPlan | undefined | null"
                },
                {
                    "name": "isOffline",
                    "defaultValue": "false",
                    "line": 16,
                    "type": "boolean | null"
                },
                {
                    "name": "selectedDate",
                    "line": 12,
                    "type": "Date | null | undefined"
                },
                {
                    "name": "translations",
                    "defaultValue": "null",
                    "line": 13,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "addMeal",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<MealType>"
                },
                {
                    "name": "dateChanged",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter<Date>"
                },
                {
                    "name": "removeMeal",
                    "defaultValue": "new EventEmitter()",
                    "line": 19,
                    "type": "EventEmitter<Meal>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "sections",
                    "defaultValue": "['breakfast', 'lunch', 'dinner']",
                    "type": "MealType[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "selectedDayIndex",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedWeek",
                    "type": "Date | undefined",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "today",
                    "defaultValue": "new Date()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50
                },
                {
                    "name": "onChangeWeekDay",
                    "args": [
                        {
                            "name": "weekDayIndex",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "weekDayIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDateChange",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRemoveMeal",
                    "args": [
                        {
                            "name": "meal",
                            "type": "Meal"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "meal",
                            "type": "Meal",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, OnInit, Output } from '@angular/core';\nimport { differenceInCalendarWeeks, differenceInDays } from 'date-fns';\nimport { getFirstDateOfWeek, getWeekDayIndex } from '../../../../core/helpers/helpers';\nimport { DayPlan, I18n, Language, Meal, MealType } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-schedule',\n  templateUrl: './schedule.component.html',\n  styleUrls: ['./schedule.component.scss']\n})\nexport class ScheduleComponent implements OnInit, OnChanges {\n  @Input() selectedDate: Date | null | undefined;\n  @Input() translations: I18n | null = null;\n  @Input() currentLanguage: Language | null = null;\n  @Input() dayPlan: DayPlan | undefined | null = null;\n  @Input() isOffline: boolean | null = false;\n  @Output() dateChanged: EventEmitter<Date> = new EventEmitter();\n  @Output() addMeal: EventEmitter<MealType> = new EventEmitter();\n  @Output() removeMeal: EventEmitter<Meal> = new EventEmitter();\n\n  sections: MealType[] = ['breakfast', 'lunch', 'dinner'];\n\n  selectedDayIndex: number | undefined;\n  selectedWeek: Date | undefined;\n  today = new Date();\n\n  get currentTodayIndex(): number {\n    const today = this.today.getDay() - 1;\n    return today >= 0 ? today : 6;\n  }\n\n  get displayedDayIsPast(): boolean {\n    return differenceInDays(this.selectedDate || new Date(), this.today) < 0;\n  }\n\n  get displayedWeekIsActiveWeek(): boolean {\n    return differenceInCalendarWeeks(this.selectedDate || new Date(), this.today, {weekStartsOn: 1}) === 0;\n  }\n\n  constructor() {\n  }\n\n  ngOnChanges(): void {\n    if (this.selectedDate) {\n      this.selectedDayIndex = getWeekDayIndex(this.selectedDate);\n      this.selectedWeek = getFirstDateOfWeek(new Date(this.selectedDate));\n    }\n  }\n\n  ngOnInit(): void {\n  }\n\n  onDateChange(date: Date): void {\n    this.dateChanged.emit(date);\n  }\n\n\n  onChangeWeekDay(weekDayIndex: number): void {\n    if (this.selectedWeek) {\n      const selectedDate = new Date(this.selectedWeek);\n      selectedDate.setDate(selectedDate.getDate() + weekDayIndex);\n      this.dateChanged.emit(selectedDate);\n    }\n  }\n\n  onRemoveMeal(meal: Meal): void {\n    this.removeMeal.emit(meal);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/mixins/style\";\n@import \"../../../../../styles/settings/functions\";\n\n\n.schedule {\n  &__controls {\n    display: block;\n    margin-bottom: $spacing-medium;\n  }\n\n  &__content {\n    margin-top: $spacing-large;\n    border-radius: $border-radius-default;\n    box-shadow: 0 0 rem(18) $blue-grey_10;\n  }\n\n  &__heading {\n    background: $blue_70;\n    padding: $spacing-tiny 0;\n    color: #ffffff;\n    font-size: $font-size-normal;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &:first-child {\n      border-top-right-radius: $border-radius-default;\n      border-top-left-radius: $border-radius-default;\n    }\n  }\n\n  &__element {\n    padding: $spacing_medium $spacing-small;\n    font-size: $font-size-small;\n  }\n\n  &__element-wrapper{\n    display: flex;\n    justify-content: space-between;\n  }\n\n  &__element_actions_link {\n    text-decoration: none;\n    color: $blue-80;\n\n    &:hover {\n      color: $blue-100;\n    }\n  }\n\n  &__element_actions_button {\n    background: none;\n    border: none;\n    color: $blue-80;\n    cursor: pointer;\n\n    &:hover {\n      color: $blue-100;\n    }\n  }\n\n  &__add-button {\n    background: none;\n    border: none;\n    color: $blue-100;\n    cursor: pointer;\n  }\n}\n\n@include skeleton('.schedule__element_skeleton', $blue-grey_30, 3.5s) {\n  background: $blue-grey_40;\n  height: rem(24);\n  border-radius: $border-radius-default;\n  width: 90%;\n}\n",
                    "styleUrl": "./schedule.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 38
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "accessors": {
                "currentTodayIndex": {
                    "name": "currentTodayIndex",
                    "getSignature": {
                        "name": "currentTodayIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 27
                    }
                },
                "displayedDayIsPast": {
                    "name": "displayedDayIsPast",
                    "getSignature": {
                        "name": "displayedDayIsPast",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 32
                    }
                },
                "displayedWeekIsActiveWeek": {
                    "name": "displayedWeekIsActiveWeek",
                    "getSignature": {
                        "name": "displayedWeekIsActiveWeek",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 36
                    }
                }
            },
            "templateData": "<div class=\"schedule\">\n  <app-schedule-controlls\n    class=\"schedule__controls\"\n    [selectedDate]=\"selectedDate\"\n    [translations]=\"translations\"\n    [currentLanguage]=\"currentLanguage\"\n    (dateChanged)=\"onDateChange($event)\"></app-schedule-controlls>\n  <app-schedule-days-controlls\n    [selectedDayIndex]=\"selectedDayIndex\"\n    [translations]=\"translations\"\n    [currentLanguage]=\"currentLanguage\"\n    [currentDayIndex]=\"displayedWeekIsActiveWeek && currentTodayIndex\"\n    (changeDayIndex)=\"onChangeWeekDay($event)\"\n  ></app-schedule-days-controlls>\n  <div class=\"schedule__content\">\n    <template *ngFor=\"let section of sections\" style=\"display: block\">\n      <div class=\"schedule__heading\">\n        {{\"meal-planer.\" + section | translate:translations:currentLanguage}}\n      </div>\n      <div class=\"schedule__element\">\n        <div *ngIf=\"!dayPlan\" class=\"schedule__element_skeleton\"></div>\n        <div *ngIf=\"dayPlan && dayPlan[section]\" >\n          <div *ngFor=\"let meal of dayPlan[section]\" class=\"schedule__element-wrapper\">\n            {{ meal.recipe.title }}\n            <div  class=\"schedule__element_actions\">\n              <a *ngIf=\"meal.recipe.url\" [href]=\"meal.recipe.url\" target=\"_blank\" class=\"schedule__element_actions_link\">\n                <fa-icon [icon]=\"['fas', 'link']\" aria-hidden=\"true\"></fa-icon>\n                <span class=\"visually-hidden\">{{\"meal-planer-link.\" + section | translate:translations:currentLanguage}}</span>\n              </a>\n              <button class=\"schedule__element_actions_button\" (click)=\"onRemoveMeal(meal)\">\n                <fa-icon [icon]=\"['fas', 'trash']\" aria-hidden=\"true\"></fa-icon>\n                <span class=\"visually-hidden\">{{\"meal-planer-remove.\" + section | translate:translations:currentLanguage}}</span>\n              </button>\n            </div>\n          </div>\n        </div>\n        <button\n          *ngIf=\"dayPlan && (!dayPlan[section] || dayPlan[section].length === 0) && !displayedDayIsPast && !isOffline\"\n          class=\"schedule__add-button\"\n          (click)=\"addMeal.emit(section)\">\n          <fa-icon *ngIf=\"'chevron-left'\"\n                   [attr.aria-hidden]=\"true\"\n                   [icon]=\"['fas', 'plus-circle']\"></fa-icon>\n          {{\"meal-planer-add.\" + section | translate:translations:currentLanguage}}\n        </button>\n        <div\n          *ngIf=\"dayPlan && (!dayPlan[section] || dayPlan[section].length === 0) && displayedDayIsPast\"\n          class=\"schedule__add-button\">\n          {{\"meal-planer-add.nothing-planed\" | translate:translations:currentLanguage}}\n        </div>\n      </div>\n    </template>\n  </div>\n</div>\n"
        },
        {
            "name": "ScheduleControllsComponent",
            "id": "component-ScheduleControllsComponent-f31bb0248ceacb4800831b9aad56f477",
            "file": "src/app/features/meal-planer/components/schedule-controlls/schedule-controlls.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schedule-controlls",
            "styleUrls": [
                "./schedule-controlls.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule-controlls.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLanguage",
                    "defaultValue": "null",
                    "line": 13,
                    "type": "Language | null"
                },
                {
                    "name": "selectedDate",
                    "line": 11,
                    "type": "Date | undefined | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "null",
                    "line": 12,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "dateChanged",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter<Date>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_weekOffset",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { getFirstDateOfWeek } from '../../../../core/helpers/helpers';\nimport { I18n, Language } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-schedule-controlls',\n  templateUrl: './schedule-controlls.component.html',\n  styleUrls: ['./schedule-controlls.component.scss']\n})\nexport class ScheduleControllsComponent implements OnInit {\n  @Input() selectedDate: Date | undefined | null;\n  @Input() translations: I18n | null = null;\n  @Input() currentLanguage: Language | null = null;\n  @Output() dateChanged: EventEmitter<Date> = new EventEmitter();\n\n  // tslint:disable-next-line:variable-name\n  private _weekOffset = 0;\n\n  get weekOffset(): number {\n    return this._weekOffset;\n  }\n\n  set weekOffset(offset: number) {\n    this._weekOffset = offset;\n    const startOfWeek = getFirstDateOfWeek(new Date());\n    const startDate = (\n      new Date(startOfWeek.getFullYear(), startOfWeek.getMonth(), startOfWeek.getDate())\n    );\n    startDate.setDate(startDate.getDate() + (this._weekOffset * 7));\n    this.dateChanged.emit(startDate);\n  }\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/functions\";\n@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/settings/colors\";\n\n\n.schedule-controls {\n  display: flex;\n  flex-direction: row;\n  height: rem(40);\n  font-size: $font-size-normal;\n\n  &__date {\n    flex: 1 1 auto;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    color: $blue-grey_100;\n  }\n\n  &__toggle {\n    background-color: transparent;\n    border: none;\n    color: $blue_100;\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./schedule-controlls.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 31
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "weekOffset": {
                    "name": "weekOffset",
                    "setSignature": {
                        "name": "weekOffset",
                        "type": "void",
                        "args": [
                            {
                                "name": "offset",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "offset",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "weekOffset",
                        "type": "number",
                        "returnType": "number",
                        "line": 19
                    }
                }
            },
            "templateData": "<div class=\"schedule-controls\">\n\n  <button\n    type=\"button\"\n    class=\"schedule-controls__toggle\"\n    [attr.aria-hidden]=\"true\"\n    (click)=\"weekOffset = weekOffset - 1\">\n    <fa-icon [icon]=\"['fas', 'chevron-left']\"\n    ></fa-icon>\n    <span class=\"visually-hidden\">{{'meal-planer-controls.previous-week' |  translate:translations:currentLanguage }}</span>\n  </button>\n  <p  class=\"schedule-controls__date\">{{selectedDate | date:'MMMM dd, y' }}</p>\n  <button\n    type=\"button\"\n    class=\"schedule-controls__toggle\"\n    [attr.aria-hidden]=\"true\"\n    (click)=\"weekOffset = weekOffset + 1\">\n    <fa-icon [icon]=\"['fas', 'chevron-right']\"></fa-icon>\n    <span class=\"visually-hidden\">{{'meal-planer-controls.next-week' |  translate:translations:currentLanguage }}</span>\n  </button>\n</div>\n\n"
        },
        {
            "name": "ScheduleDaysControllsComponent",
            "id": "component-ScheduleDaysControllsComponent-1eb9a2e50814f545bd15d698fc0160bd",
            "file": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controlls.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-schedule-days-controlls",
            "styleUrls": [
                "./schedule-days-controlls.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./schedule-days-controlls.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentDayIndex",
                    "defaultValue": "false",
                    "line": 14,
                    "type": "boolean | number"
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "null",
                    "line": 13,
                    "type": "Language | null"
                },
                {
                    "name": "selectedDayIndex",
                    "line": 11,
                    "type": "number | undefined"
                },
                {
                    "name": "translations",
                    "defaultValue": "null",
                    "line": 12,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "changeDayIndex",
                    "defaultValue": "new EventEmitter()",
                    "line": 15,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "days",
                    "defaultValue": "['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "selectDay",
                    "args": [
                        {
                            "name": "selectedDayIndex",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "jsdoctags": [
                        {
                            "name": "selectedDayIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { I18n, Language } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-schedule-days-controlls',\n  templateUrl: './schedule-days-controlls.component.html',\n  styleUrls: ['./schedule-days-controlls.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ScheduleDaysControllsComponent implements OnInit {\n  @Input() selectedDayIndex: number | undefined;\n  @Input() translations: I18n | null = null;\n  @Input() currentLanguage: Language | null = null;\n  @Input() currentDayIndex: boolean | number = false;\n  @Output() changeDayIndex: EventEmitter<number> = new EventEmitter();\n\n  days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  selectDay(selectedDayIndex: number): void {\n    this.changeDayIndex.emit(selectedDayIndex);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/functions\";\n@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/settings/colors\";\n\n.days-controls {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  max-width: rem(600);\n  margin: 0 auto;\n\n  &__button {\n    border: none;\n    background: none;\n    border-radius: $border-radius-default;\n    color: $text-100;\n    height: rem(30);\n    width: rem(30);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n\n\n    &:hover:not(.days-controls__button--active) {\n      background: $blue_70;\n      color: #ffffff;\n    }\n\n    &--active {\n      background: $blue_100;\n      color: #ffffff;\n    }\n\n    &--current {\n      border: 2px solid $blue_100;\n    }\n  }\n}\n",
                    "styleUrl": "./schedule-days-controlls.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"days-controls\">\n  <button\n    type=\"button\"\n    class=\"days-controls__button\"\n    *ngFor=\"let day of days; index as i\"\n    [class.days-controls__button--active]=\"i === selectedDayIndex\"\n    [class.days-controls__button--current]=\"i === currentDayIndex\"\n    (click)=\"selectDay(i)\">\n    {{'weekday-short.' + day | translate:translations:currentLanguage}}\n  </button>\n</div>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-80d71a307c3b33cda2b031943b39e1f8",
            "file": "src/app/shared/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "undefined",
                    "line": 28,
                    "type": "string | undefined"
                },
                {
                    "name": "border",
                    "defaultValue": "true",
                    "line": 24
                },
                {
                    "name": "control",
                    "line": 20,
                    "type": "FormControl | undefined"
                },
                {
                    "name": "defaultValue",
                    "line": 26,
                    "type": "T | undefined"
                },
                {
                    "name": "e2eTestName",
                    "defaultValue": "''",
                    "line": 29
                },
                {
                    "name": "errors",
                    "defaultValue": "[]",
                    "line": 25,
                    "type": "string[]"
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "line": 27
                },
                {
                    "name": "label",
                    "line": 23,
                    "type": "string | undefined"
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "line": 21
                },
                {
                    "name": "noBackground",
                    "defaultValue": "false",
                    "line": 31
                },
                {
                    "name": "noPadding",
                    "defaultValue": "false",
                    "line": 30
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "line": 22,
                    "type": "SelectOption<T>[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChanged",
                    "defaultValue": "new EventEmitter()",
                    "line": 32,
                    "type": "EventEmitter<T>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "inputId",
                    "defaultValue": "uuid()",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "propagateChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "selectedValue",
                    "defaultValue": "null",
                    "type": "T | string | null",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "getOptionKey",
                    "args": [
                        {
                            "name": "option",
                            "type": "SelectOption<T>"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "SelectOption<T>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "option",
                            "type": "T | string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "T | string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T | string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T | string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, OnInit, Output } from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { v4 as uuid } from 'uuid';\nimport { SelectOption } from '../../../core/models/model';\n\n\n@Component({\n  selector: 'app-select',\n  templateUrl: './select.component.html',\n  styleUrls: ['./select.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SelectComponent),\n      multi: true\n    }\n  ]\n})\nexport class SelectComponent<T> implements OnInit, ControlValueAccessor {\n  @Input() control: FormControl | undefined;\n  @Input() name = '';\n  @Input() options: SelectOption<T>[] = [];\n  @Input() label: string | undefined;\n  @Input() border = true;\n  @Input() errors: string[] = [];\n  @Input() defaultValue: T | undefined;\n  @Input() isDisabled = false;\n  @Input() ariaLabel: string | undefined = undefined;\n  @Input() e2eTestName = '';\n  @Input() noPadding = false;\n  @Input() noBackground = false;\n  @Output() valueChanged: EventEmitter<T> = new EventEmitter();\n\n  selectedValue: T | string | null = null;\n  inputId: string = uuid();\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.selectedValue = this.options[0].value;\n    this.propagateChange(this.options[0].value);\n\n    if (this.defaultValue) {\n      this.selectedValue = this.defaultValue;\n    }\n  }\n\n  onChange(option: T | string): void {\n    this.propagateChange(option);\n    this.valueChanged.emit(option as T);\n  }\n\n  getOptionKey(option: SelectOption<T>): string {\n    return option?.key ?? ((typeof option.value === 'string') ? option.value : JSON.stringify(option.value));\n  }\n\n  propagateChange = (value: T | string) => {};\n\n  registerOnChange(fn: () => {}): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: () => {}): void {\n  }\n\n  writeValue(value: T | string): void {\n    if (value !== undefined) {\n      this.selectedValue = value;\n    }\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/mixins/forms\";\n\n.select {\n\n  &__field {\n    @include form-field;\n\n    &--no-border {\n      padding-left: 0;\n    }\n\n    &--no-padding {\n      padding: 0;\n    }\n\n    &--no-background{\n      background-color: transparent;\n      color: $blue-grey_10;\n      border: none;\n    }\n\n  }\n\n  &__label {\n    @include label;\n  }\n\n  &__error {\n    @include form-errors;\n  }\n}\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 35
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<label *ngIf=\"label\" class=\"select__label\" for=\"{{inputId}}\">{{label}}</label>\n\n<select\n  ngDefaultControl\n  class=\"select__field\"\n  name=\"{{name}}\"\n  id=\"{{inputId}}\"\n  [(ngModel)]=\"selectedValue\"\n  [ngClass]=\"{\n    'select__field--error': errors && errors.length > 0,\n    'select__field--no-background': noBackground,\n    'select__field--no-border': !border,\n    'select__field--no-padding': noPadding\n  }\"\n  [attr.disabled]=\"isDisabled ? '' : null\"\n  [attr.data-test]=\"e2eTestName\"\n  [attr.aria-label]=\"ariaLabel\"\n  (ngModelChange)=\"onChange($event)\"\n>\n  <option\n    *ngFor=\"let option of options\"\n    [ngValue]=\"option.value\">\n    {{getOptionKey(option)}}\n  </option>\n</select>\n\n<div class=\"select__error-wrapper\">\n  <div class=\"select__error\" *ngFor=\"let error of errors\">{{error}}</div>\n</div>\n\n"
        },
        {
            "name": "ShoppingListComponent",
            "id": "component-ShoppingListComponent-fc623ad9b17bd33ebbdd4391766bdc51",
            "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list",
            "styleUrls": [
                "./shopping-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 13,
                    "type": "Language | null"
                },
                {
                    "name": "items",
                    "defaultValue": "undefined",
                    "line": 11,
                    "type": "ShoppingListItem[] | null | undefined"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 12,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "shoppingListItemDeleted",
                    "defaultValue": "new EventEmitter()",
                    "line": 14,
                    "type": "EventEmitter<ShoppingListItem>"
                },
                {
                    "name": "shoppingListItemMoved",
                    "defaultValue": "new EventEmitter()",
                    "line": 15,
                    "type": "EventEmitter<ArrayItemMovedEvent>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "deleteBuffer",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "deletionDelayInMilliseconds",
                    "defaultValue": "300",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getPageState",
                    "args": [
                        {
                            "name": "items",
                            "type": "ShoppingListItem[] | null | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "items",
                            "type": "ShoppingListItem[] | null | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "itemChecked",
                    "args": [
                        {
                            "name": "item",
                            "type": "ShoppingListItem"
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isChecked",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveItem",
                    "args": [
                        {
                            "type": "ArrayItemMovedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "type": "ArrayItemMovedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { ArrayItemMovedEvent, I18n, Language, ShoppingListItem } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-shopping-list',\n  templateUrl: './shopping-list.component.html',\n  styleUrls: ['./shopping-list.component.scss']\n})\nexport class ShoppingListComponent {\n  @Input() items: ShoppingListItem[] | null | undefined = undefined;\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Output() shoppingListItemDeleted: EventEmitter<ShoppingListItem> = new EventEmitter();\n  @Output() shoppingListItemMoved: EventEmitter<ArrayItemMovedEvent> = new EventEmitter();\n\n  deleteBuffer: { [key: string]: number } = {};\n  deletionDelayInMilliseconds = 300;\n\n  itemChecked(item: ShoppingListItem, isChecked: boolean): void {\n    if (isChecked) {\n      // Delay Deletion to make the checkmark visible\n      this.deleteBuffer[item.id] = window.setTimeout(() => this.shoppingListItemDeleted.emit(item), this.deletionDelayInMilliseconds);\n    } else {\n      clearTimeout(this.deleteBuffer[item.id]);\n    }\n  }\n\n  moveItem({previousIndex, currentIndex}: ArrayItemMovedEvent): void {\n    if (currentIndex !== previousIndex) {\n      this.shoppingListItemMoved.emit({currentIndex, previousIndex});\n    }\n  }\n\n  getPageState(items: ShoppingListItem[] | null | undefined): string {\n    if (items === null || items === undefined) {\n      return 'loading';\n    }\n\n    if (items.length === 0) {\n      return 'empty';\n    }\n\n    return 'default';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/breakpoints\";\n@import \"../../../../../styles/mixins/style\";\n@import \"../../../../../styles/settings/variables\";\n@import \"../../../../../styles/settings/functions\";\n\n.shopping-list {\n  width: 100%;\n  display: block;\n  overflow: hidden;\n\n  &__item {\n    border-top: solid 1px $blue-grey_30;\n    color: $text-70;\n    font-size: $font-size-small;\n    box-sizing: border-box;\n    background: #ffffff;\n  }\n\n  &__item-row-wrapper {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  &__item-text {\n    padding: $spacing-medium $spacing-small;\n    display: block;\n  }\n\n  &__drag-icon {\n    color: $blue-grey_50;\n    padding: 0 $spacing-small;\n    cursor: move;\n  }\n\n  @include skeleton('.shopping-list__item-skeleton', $blue-grey_30, 3.5s) {\n    background: $blue-grey_40;\n    height: rem(24);\n    margin: $spacing-medium auto $spacing-medium $spacing-medium;\n    border-radius: $border-radius-default;\n    width: 90%;\n\n    &:nth-child(2){\n      width: 75%;\n    }\n\n    &:nth-child(3){\n      width: 85%;\n    }\n\n    &:nth-child(4){\n      width: 80%;\n      margin-bottom: rem(24);\n    }\n  };\n\n  &--empty {\n    margin: 0 auto;\n    max-width: 80%;\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    padding-bottom: $spacing-large;\n    color: $text-40;\n    font-size: $font-size-small;\n    text-align: center;\n    font-weight: 500;\n    line-height: 2;\n\n    @include large {\n      font-size: $font-size-normal;\n    }\n\n\n  }\n\n\n  &__image {\n    max-width: 100%;\n  }\n}\n\n.cdk-drag-preview {\n  box-sizing: border-box;\n  border-radius: $border-radius-default;\n  box-shadow: 0 rem(5) rem(5) rem(-3) $blue-grey_30,\n  0 rem(8) rem(10) 1px $blue-grey_20,\n  0 rem(3) rem(14) rem(2) $blue-grey_10;\n}\n\n.cdk-drag-placeholder {\n  opacity: 0;\n}\n\n.cdk-drag-animating {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n.shopping-list-item.cdk-drop-list-dragging .shopping-list-item:not(.cdk-drag-placeholder) {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n\n",
                    "styleUrl": "./shopping-list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<section [ngSwitch]=\"getPageState(items)\" class=\"shopping-list\">\n  <div *ngSwitchCase=\"'default'\" cdkDropList (cdkDropListDropped)=\"moveItem($event)\">\n    <div class=\"shopping-list__item\" *ngFor=\"let item of items\" cdkDrag>\n      <div class=\"shopping-list__item-row-wrapper\">\n        <mat-checkbox\n          class=\"shopping-list__item-text\"\n          [color]=\"'primary'\"\n          [disableRipple]=\"true\"\n          (change)=\"itemChecked(item, $event.checked)\">\n          <span\n            class=\"shopping-list__label\">{{item.amount}} {{'unit.' + item.unit | translate:translations:currentLang }} {{item.title}}</span>\n        </mat-checkbox>\n        <fa-icon\n          cdkDragHandle\n          class=\"shopping-list__drag-icon\"\n          [icon]=\"['fas','ellipsis-v']\"\n        ></fa-icon>\n      </div>\n    </div>\n  </div>\n\n  <div *ngSwitchCase=\"'empty'\" class=\"shopping-list--empty\">\n    <img class=\"shopping-list__image\" src=\"../../../../../assets/empty-shopping-list.png\" alt=\"Empty List\" />\n    <div>{{'shopping-list.is-empty' | translate:translations:currentLang }} <br/> {{'shopping-list.add-product' | translate:translations:currentLang }} </div>\n  </div>\n\n  <div *ngSwitchCase=\"'loading'\">\n    <div class=\"shopping-list__item-skeleton\"></div>\n    <div class=\"shopping-list__item-skeleton\"></div>\n    <div class=\"shopping-list__item-skeleton\"></div>\n    <div class=\"shopping-list__item-skeleton\"></div>\n  </div>\n\n</section>\n\n"
        },
        {
            "name": "ShoppingListContainerComponent",
            "id": "component-ShoppingListContainerComponent-9add4cd95e2cb76e3d3f34be34e20848",
            "file": "src/app/features/shopping-list/containers/shopping-list-container/shopping-list-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list-container",
            "styleUrls": [
                "./shopping-list-container.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list-container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeShoppingList$",
                    "defaultValue": "this.store.select(activeShoppingList)",
                    "type": "Observable<ShoppingList | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "activeShoppingListId$",
                    "defaultValue": "this.store.select(activeShoppingListId)",
                    "type": "Observable<string | undefined>",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "createDialogTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentLanguage$",
                    "defaultValue": "this.store.select(selectCurrentLanguage)",
                    "type": "Observable<Language>",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "editDialogTranslations",
                    "defaultValue": "{}",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "isOffline$",
                    "defaultValue": "this.store.select(isOffline)",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "shoppingLists$",
                    "defaultValue": "this.store.select(selectShoppingLists)",
                    "type": "Observable<[] | null>",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "shoppingListsItems$",
                    "defaultValue": "this.store.select(selectCurrentShoppingListItems)",
                    "type": "Observable<[] | undefined | null>",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "translations$",
                    "defaultValue": "this.store.select(selectTranslations)",
                    "type": "Observable<I18n | null>",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "onCreateShoppingList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105
                },
                {
                    "name": "onEditShoppingList",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListChange",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListDelete",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemAdded",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemDeleted",
                    "args": [
                        {
                            "type": "DeleteShoppingListItemEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "type": "DeleteShoppingListItemEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemMoved",
                    "args": [
                        {
                            "type": "ShoppingListItemMovedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "type": "ShoppingListItemMovedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { take, withLatestFrom } from 'rxjs/operators';\nimport { v4 as uuid } from 'uuid';\nimport { DELETION_DELAY } from '../../../../core/constants/constants';\nimport {\n  BasicShoppingListItem,\n  CreateListDialogEvent,\n  DeleteShoppingListItemEvent,\n  EditListDialogEvent,\n  I18n,\n  Language,\n  ShoppingList,\n  ShoppingListItem,\n  ShoppingListItemMovedEvent\n} from '../../../../core/models/model';\nimport { DialogService } from '../../../../core/services/dialog.service';\nimport { SnackbarService } from '../../../../core/services/snackbar.service';\nimport {\n  activeShoppingList,\n  activeShoppingListId,\n  GlobalState,\n  isOffline,\n  selectCurrentLanguage,\n  selectCurrentShoppingListItems,\n  selectShoppingLists,\n  selectTranslations\n} from '../../../../core/store';\nimport { EditListDialogComponent } from '../../../../shared/components/edit-list-dialog/edit-list-dialog.component';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport { ShoppingListContainerActions } from '../../store/actions';\n\n@Component({\n  selector: 'app-shopping-list-container',\n  templateUrl: './shopping-list-container.component.html',\n  styleUrls: ['./shopping-list-container.component.scss'],\n})\nexport class ShoppingListContainerComponent implements OnInit {\n  translations$: Observable<I18n | null> = this.store.select(selectTranslations);\n  currentLanguage$: Observable<Language> = this.store.select(selectCurrentLanguage);\n  shoppingListsItems$: Observable<ShoppingListItem[] | undefined | null> = this.store.select(selectCurrentShoppingListItems);\n  shoppingLists$: Observable<ShoppingList[] | null> = this.store.select(selectShoppingLists);\n  activeShoppingList$: Observable<ShoppingList | undefined> = this.store.select(activeShoppingList);\n  activeShoppingListId$: Observable<string | undefined> = this.store.select(activeShoppingListId);\n  isOffline$: Observable<boolean> = this.store.select(isOffline);\n\n  private createDialogTranslations: {} = {};\n  private editDialogTranslations: {} = {};\n\n  constructor(\n    private store: Store<GlobalState>,\n    private snackBarService: SnackbarService,\n    private dialogService: DialogService,\n    private translatePipe: TranslatePipe\n  ) {\n    this.store.select(selectTranslations).pipe(\n      withLatestFrom(this.store.select((state: GlobalState) => state.appState.language))\n    ).subscribe(([translations, currentLanguage]: [I18n | null, Language]) => {\n      this.createDialogTranslations = {\n        title: this.translatePipe.transform('create-shopping-list.heading', translations, currentLanguage),\n        'save-button-text': this.translatePipe.transform('create-shopping-list.save-button-text', translations, currentLanguage),\n        'cancel-button-text': this.translatePipe.transform('create-shopping-list.cancel-button-text', translations, currentLanguage),\n        placeholder: this.translatePipe.transform('create-shopping-list.placeholder', translations, currentLanguage),\n      };\n\n      this.editDialogTranslations = {\n        title: this.translatePipe.transform('edit-shopping-list.title', translations, currentLanguage),\n        'save-button-text': this.translatePipe.transform('edit-shopping-list.save-button-text', translations, currentLanguage),\n        'cancel-button-text': this.translatePipe.transform('edit-shopping-list.cancel-button-text', translations, currentLanguage),\n        placeholder: this.translatePipe.transform('edit-shopping-list.placeholder', translations, currentLanguage),\n      };\n    });\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(ShoppingListContainerActions.loadShoppingLists());\n  }\n\n  onShoppingListChange(shoppingList: ShoppingList): void {\n    this.store.dispatch(ShoppingListContainerActions.changeShoppingList({shoppingListId: shoppingList.id}));\n  }\n\n  onShoppingListItemAdded(shoppingListItem: BasicShoppingListItem): void {\n    this.store.dispatch(ShoppingListContainerActions.addShoppingListItem({optimisticId: uuid(), shoppingListItem}));\n  }\n\n  onShoppingListItemDeleted({shoppingListItem}: DeleteShoppingListItemEvent): void {\n    this.store.dispatch(ShoppingListContainerActions.deleteShoppingListItem({shoppingListItem}));\n\n    this.snackBarService.openSnackBar('message.undo', 'message.action', DELETION_DELAY)\n      .afterDismissed()\n      .pipe(take(1))\n      .subscribe(({dismissedByAction}) => {\n        if (dismissedByAction) {\n          this.store.dispatch(ShoppingListContainerActions.undoDeleteShoppingListItem({shoppingListItem}));\n        }\n      });\n  }\n\n  onShoppingListItemMoved({shoppingListId, previousIndex, currentIndex}: ShoppingListItemMovedEvent): void {\n    this.store.dispatch(ShoppingListContainerActions.moveShoppingListItem({shoppingListId, previousIndex, currentIndex}));\n  }\n\n  onCreateShoppingList(): void {\n    const dialogRef = this.dialogService.openDialog(EditListDialogComponent, {\n      data: {},\n      translations: this.createDialogTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: CreateListDialogEvent | undefined) => {\n        if (result?.event === 'create') {\n          this.store.dispatch(ShoppingListContainerActions.createShoppingList({title: result.title}));\n        }\n      });\n  }\n\n  onEditShoppingList(shoppingList: ShoppingList): void {\n    const dialogRef = this.dialogService.openDialog(EditListDialogComponent, {\n      data: shoppingList,\n      translations: this.editDialogTranslations,\n    });\n    dialogRef.afterClosed()\n      .pipe(take(1))\n      .subscribe((result: EditListDialogEvent | undefined) => {\n        if (result?.event === 'edit') {\n          this.store.dispatch(\n            ShoppingListContainerActions.editShoppingList({shoppingList, changes: result.list})\n          );\n        }\n      });\n  }\n\n  onShoppingListDelete(shoppingList: ShoppingList): void {\n    this.store.dispatch(ShoppingListContainerActions.deleteShoppingList({shoppingList}));\n    this.snackBarService.openSnackBar('message.undo', 'message.action', DELETION_DELAY)\n      .afterDismissed()\n      .pipe(take(1))\n      .subscribe(({dismissedByAction}) => {\n        if (dismissedByAction) {\n          this.store.dispatch(ShoppingListContainerActions.undoDeleteShoppingList({shoppingList}));\n        }\n      });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./shopping-list-container.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>"
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService"
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService"
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<GlobalState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBarService",
                        "type": "SnackbarService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-shopping-list-page\n  [shoppingLists]=\"shoppingLists$ | async\"\n  [activeShoppingListId]=\"activeShoppingListId$ | async\"\n  [shoppingListItems]=\"shoppingListsItems$ | async\"\n  [translations]=\"translations$ | async\"\n  [activeShoppingList]=\"activeShoppingList$ | async\"\n  [currentLanguage]=\"currentLanguage$ | async\"\n  [isOffline] = \"isOffline$ | async\"\n  (changeShoppingList)=\"onShoppingListChange($event)\"\n  (addShoppingListItem)=\"onShoppingListItemAdded($event)\"\n  (deleteShoppingListItem)=\"onShoppingListItemDeleted($event)\"\n  (moveShoppingListItem)=\"onShoppingListItemMoved($event)\"\n  (createShoppingList)=\"onCreateShoppingList()\"\n  (editShoppingList)=\"onEditShoppingList($event)\"\n  (deleteShoppingList)=\"onShoppingListDelete($event)\">\n</app-shopping-list-page>\n"
        },
        {
            "name": "ShoppingListFormComponent",
            "id": "component-ShoppingListFormComponent-ea04cbded8b27d0477a44147714fdb73",
            "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list-form",
            "styleUrls": [
                "./shopping-list-form.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list-form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLang",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 16,
                    "type": "Language | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 15,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "itemAdded",
                    "defaultValue": "new EventEmitter()",
                    "line": 17,
                    "type": "EventEmitter<BasicShoppingListItem>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "addItemForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "units",
                    "defaultValue": "[]",
                    "type": "SelectOption<Unit>[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorsFor",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TranslatePipe } from '../../../../shared/pipes/translate.pipe';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport { translateValidationErrors } from '../../../../core/helpers/helpers';\nimport { BasicShoppingListItem, I18n, Language, SelectOption, Unit } from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-shopping-list-form',\n  templateUrl: './shopping-list-form.component.html',\n  styleUrls: ['./shopping-list-form.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShoppingListFormComponent implements OnInit {\n  @Input() translations: I18n | null = {};\n  @Input() currentLang: Language | null = DEFAULT_LANGUAGE;\n  @Output() itemAdded: EventEmitter<BasicShoppingListItem> = new EventEmitter();\n\n  addItemForm: FormGroup;\n\n  units: SelectOption<Unit>[] = [];\n\n  constructor(private translatePipe: TranslatePipe) {\n    this.addItemForm = new FormGroup({\n      amount:  new FormControl('', [\n        Validators.required,\n      ]),\n      unit:  new FormControl('pack', [\n        Validators.required,\n      ]),\n      title:  new FormControl('', [\n        Validators.required,\n      ]),\n    });\n  }\n\n  ngOnInit(): void {\n    this.units = [\n      {value: 'pack', key: this.translatePipe.transform('shoppingList.addForm.pack', this.translations, this.currentLang)},\n      {value: 'piece', key: this.translatePipe.transform('shoppingList.addForm.piece', this.translations, this.currentLang)},\n      {value: 'kg', key: 'kg'},\n      {value: 'g', key: 'g'},\n      {value: 'l', key: 'l'},\n      {value: 'dl', key: 'dl'},\n    ];\n  }\n\n  getFormControl(key: string): FormControl {\n    return this.addItemForm?.controls[key] as FormControl;\n  }\n\n  onSubmit(): void {\n    this.itemAdded.emit(this.addItemForm?.value);\n    this.addItemForm.reset({unit: 'pack'});\n  }\n\n  getErrorsFor(key: string): string[] {\n    return translateValidationErrors(\n      this.getFormControl(key),\n      this.translatePipe,\n      this.translations,\n      this.currentLang);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/breakpoints\";\n@import \"../../../../../styles/settings/variables\";\n\n.shopping-list-form {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: $spacing-small;\n  padding: $spacing-medium;\n\n  @include large {\n    flex-direction:  row;\n  }\n\n  &--input-amount {\n    @include large {\n      max-width: rem(128);\n    }\n  }\n\n  &--input {\n    padding-top: $spacing-small 0;\n    flex: 1 1 auto;\n\n    &:not(:nth-child(3)) {\n      border-bottom: 1px solid $blue-grey_90;\n    };\n\n    @include large {\n      padding-bottom: 0;\n      padding-right: $spacing-medium;\n\n      &:not(:nth-child(3)) {\n        border-bottom: none;\n      };\n\n    }\n  }\n\n  &--input-unit {\n    @include large {\n      max-width: rem(136);\n    }\n  }\n\n  &--submit {\n    height: rem(40);\n\n    @include large {\n      height: auto;\n    }\n  }\n}\n",
                    "styleUrl": "./shopping-list-form.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "translatePipe",
                        "type": "TranslatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"form-wrapper\">\n  <form class=\"shopping-list-form\" [formGroup]=\"addItemForm\" (ngSubmit)=\"onSubmit()\">\n    <app-input\n      class=\"shopping-list-form--input shopping-list-form--input-amount\"\n      type=\"number\"\n      [minValue]=\"0\"\n      [border]=\"false\"\n      [name]=\"'amount'\"\n      [placeholder]=\"'shoppingList.addForm.amount' | translate:translations:currentLang\"\n      [formControl]=\"getFormControl('amount')\"\n      [e2eTestName]=\"'shopping-list-item-amount'\"\n    ></app-input\n    >\n\n    <app-select\n      class=\"shopping-list-form--input shopping-list-form--input-unit\"\n      [options]=\"units\"\n      [name]=\"'unit'\"\n      [border]=\"false\"\n      [formControl]=\"getFormControl('unit')\"\n      [e2eTestName]=\"'shopping-list-item-unit'\"\n    >\n    </app-select>\n\n    <app-input\n      class=\"shopping-list-form--input shopping-list-form--input-title\"\n      [placeholder]=\"'shoppingList.addForm.product' | translate:translations:currentLang\"\n      [border]=\"false\"\n      [formControl]=\"getFormControl('title')\"\n      [e2eTestName]=\"'shopping-list-item-name'\"\n    >\n    </app-input>\n\n    <app-button\n      class=\"shopping-list-form--submit\"\n      [buttonType]=\"'submit'\"\n      [buttonText]=\"'shoppingList.addForm.addLabel' | translate:translations:currentLang\"\n      [isDisabled]=\"addItemForm.invalid\"\n      [e2eTestName]=\"'add-shopping-list-item'\"\n    ></app-button>\n  </form>\n</div>\n\n"
        },
        {
            "name": "ShoppingListPageComponent",
            "id": "component-ShoppingListPageComponent-60489aecb0bc125e77f1a9bdf9679bbe",
            "file": "src/app/features/shopping-list/pages/shopping-list-page/shopping-list-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-shopping-list-page",
            "styleUrls": [
                "./shopping-list-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./shopping-list-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeShoppingList",
                    "defaultValue": "undefined",
                    "line": 23,
                    "type": "ShoppingList | undefined | null"
                },
                {
                    "name": "activeShoppingListId",
                    "defaultValue": "undefined",
                    "line": 24,
                    "type": "string | undefined | null"
                },
                {
                    "name": "currentLanguage",
                    "defaultValue": "DEFAULT_LANGUAGE",
                    "line": 26,
                    "type": "Language | null"
                },
                {
                    "name": "isOffline",
                    "defaultValue": "false",
                    "line": 27,
                    "type": "boolean | null"
                },
                {
                    "name": "shoppingListItems",
                    "defaultValue": "null",
                    "line": 22,
                    "type": "ShoppingListItem[] | undefined | null"
                },
                {
                    "name": "shoppingLists",
                    "defaultValue": "null",
                    "line": 21,
                    "type": "ShoppingList[] | null"
                },
                {
                    "name": "translations",
                    "defaultValue": "{}",
                    "line": 25,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "addShoppingListItem",
                    "defaultValue": "new EventEmitter()",
                    "line": 30,
                    "type": "EventEmitter<BasicShoppingListItem>"
                },
                {
                    "name": "changeShoppingList",
                    "defaultValue": "new EventEmitter()",
                    "line": 29,
                    "type": "EventEmitter<ShoppingList>"
                },
                {
                    "name": "createShoppingList",
                    "defaultValue": "new EventEmitter()",
                    "line": 35,
                    "type": "EventEmitter<ShoppingList>"
                },
                {
                    "name": "deleteShoppingList",
                    "defaultValue": "new EventEmitter()",
                    "line": 33,
                    "type": "EventEmitter<ShoppingList>"
                },
                {
                    "name": "deleteShoppingListItem",
                    "defaultValue": "new EventEmitter()",
                    "line": 31,
                    "type": "EventEmitter<DeleteShoppingListItemEvent>"
                },
                {
                    "name": "editShoppingList",
                    "defaultValue": "new EventEmitter()",
                    "line": 34,
                    "type": "EventEmitter<ShoppingList>"
                },
                {
                    "name": "moveShoppingListItem",
                    "defaultValue": "new EventEmitter()",
                    "line": 32,
                    "type": "EventEmitter<ShoppingListItemMovedEvent>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onCreateList",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74
                },
                {
                    "name": "onDeleteList",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEditList",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onItemAdded",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "BasicShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelectList",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListChange",
                    "args": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "jsdoctags": [
                        {
                            "name": "shoppingList",
                            "type": "ShoppingList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemDeleted",
                    "args": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "jsdoctags": [
                        {
                            "name": "shoppingListItem",
                            "type": "ShoppingListItem",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onShoppingListItemMoved",
                    "args": [
                        {
                            "name": "arrayItemMovedEvent",
                            "type": "ArrayItemMovedEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "arrayItemMovedEvent",
                            "type": "ArrayItemMovedEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DEFAULT_LANGUAGE } from '../../../../core/constants/constants';\nimport {\n  ArrayItemMovedEvent,\n  BasicShoppingListItem,\n  DeleteShoppingListItemEvent,\n  I18n,\n  Language,\n  ShoppingList,\n  ShoppingListItem,\n  ShoppingListItemMovedEvent\n} from '../../../../core/models/model';\n\n@Component({\n  selector: 'app-shopping-list-page',\n  templateUrl: './shopping-list-page.component.html',\n  styleUrls: ['./shopping-list-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShoppingListPageComponent {\n  @Input() shoppingLists: ShoppingList[] | null = null;\n  @Input() shoppingListItems: ShoppingListItem[] | undefined | null = null;\n  @Input() activeShoppingList: ShoppingList | undefined | null = undefined;\n  @Input() activeShoppingListId: string | undefined | null = undefined;\n  @Input() translations: I18n | null = {};\n  @Input() currentLanguage: Language | null = DEFAULT_LANGUAGE;\n  @Input() isOffline: boolean | null = false;\n\n  @Output() changeShoppingList: EventEmitter<ShoppingList> = new EventEmitter();\n  @Output() addShoppingListItem: EventEmitter<BasicShoppingListItem> = new EventEmitter();\n  @Output() deleteShoppingListItem: EventEmitter<DeleteShoppingListItemEvent> = new EventEmitter();\n  @Output() moveShoppingListItem: EventEmitter<ShoppingListItemMovedEvent> = new EventEmitter();\n  @Output() deleteShoppingList: EventEmitter<ShoppingList> = new EventEmitter();\n  @Output() editShoppingList: EventEmitter<ShoppingList> = new EventEmitter();\n  @Output() createShoppingList: EventEmitter<ShoppingList> = new EventEmitter();\n\n  constructor() {\n  }\n\n  onShoppingListChange(shoppingList: ShoppingList): void {\n    this.changeShoppingList.emit(shoppingList);\n  }\n\n  onItemAdded(shoppingListItem: BasicShoppingListItem): void {\n    if (this.activeShoppingListId) {\n      this.addShoppingListItem.emit({...shoppingListItem, shoppingList: this.activeShoppingListId});\n    }\n  }\n\n  onShoppingListItemDeleted(shoppingListItem: ShoppingListItem): void {\n    if (this.activeShoppingListId) {\n      this.deleteShoppingListItem.emit({shoppingListItem, shoppingListId: this.activeShoppingListId});\n    }\n  }\n\n  onShoppingListItemMoved(arrayItemMovedEvent: ArrayItemMovedEvent): void {\n    if (this.activeShoppingListId) {\n      this.moveShoppingListItem.emit({shoppingListId: this.activeShoppingListId, ...arrayItemMovedEvent});\n    }\n  }\n\n  onSelectList(shoppingList: ShoppingList): void {\n    this.changeShoppingList.emit(shoppingList);\n  }\n\n  onEditList(shoppingList: ShoppingList): void {\n    this.editShoppingList.emit(shoppingList);\n  }\n\n  onDeleteList(shoppingList: ShoppingList): void {\n    this.deleteShoppingList.emit(shoppingList);\n  }\n\n  onCreateList(): void {\n    this.createShoppingList.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../../styles/settings/colors\";\n@import \"../../../../../styles/settings/variables\";\n\n.shopping-list-wrapper {\n  border-radius: $border-radius-default;\n  box-shadow: 0 0 rem(18) $blue-grey_10;\n}\n",
                    "styleUrl": "./shopping-list-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 35
            },
            "templateData": "\n<div class=\"container\">\n  <app-list-header\n    [isOffline] = \"isOffline\"\n    [selectedList]=\"activeShoppingList\"\n    [lists]=\"shoppingLists\"\n    [defaultTitle]=\"'shopping-list.default-title' | translate:translations:currentLanguage\"\n    [addListLabel]=\"'shopping-list.new-list' | translate:translations:currentLanguage\"\n    [buttonLabel]=\"'shopping-list.label' | translate:translations:currentLanguage\"\n    [ariaDeleteLabel]=\"'shopping-list.delete' | translate:translations:currentLanguage\"\n    [ariaEditLabel]=\"'shopping-list.edit' | translate:translations:currentLanguage\"\n    (selectList)=\"onSelectList($event)\"\n    (editList)=\"onEditList($event)\"\n    (deleteList)=\"onDeleteList($event)\"\n    (createList)=\"onCreateList()\"></app-list-header>\n  <div class=\"shopping-list-wrapper\">\n    <app-shopping-list-form\n      [translations]=\"translations\"\n      [currentLang]=\"currentLanguage\"\n      (itemAdded)=\"onItemAdded($event)\"></app-shopping-list-form>\n    <app-shopping-list\n      [items]=\"activeShoppingList?.isInitialized ? shoppingListItems : null\"\n      [translations]=\"translations\"\n      [currentLang]=\"currentLanguage\"\n      (shoppingListItemMoved)=\"onShoppingListItemMoved($event)\"\n      (shoppingListItemDeleted)=\"onShoppingListItemDeleted($event)\"></app-shopping-list>\n  </div>\n</div>\n\n"
        },
        {
            "name": "TeaserComponent",
            "id": "component-TeaserComponent-280959d9623dbde7c9b84cb44df2dfd0",
            "file": "src/app/core/components/teaser/teaser.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teaser",
            "styleUrls": [
                "./teaser.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teaser.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentLanguage",
                    "defaultValue": "null",
                    "line": 11,
                    "type": "Language | null"
                },
                {
                    "name": "textKey",
                    "defaultValue": "''",
                    "line": 12
                },
                {
                    "name": "translations",
                    "defaultValue": "null",
                    "line": 10,
                    "type": "I18n | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { I18n, Language } from '../../models/model';\n\n@Component({\n  selector: 'app-teaser',\n  templateUrl: './teaser.component.html',\n  styleUrls: ['./teaser.component.scss']\n})\nexport class TeaserComponent {\n  @Input() translations: I18n | null = null;\n  @Input() currentLanguage: Language | null = null;\n  @Input() textKey = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../styles/settings/colors\";\n@import \"../../../../styles/settings/variables\";\n@import \"../../../../styles/settings/functions\";\n\n\n.teaser {\n  margin-top: $header-height;\n  padding: $spacing-small;\n  color: $text-00;\n  text-align: center;\n  background: $blue_90;\n\n  &__emoji {\n    padding-right: $spacing-medium;\n  }\n}\n\n\n",
                    "styleUrl": "./teaser.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"teaser\">\n  <span *ngIf=\"textKey === 'beta.teaser'\" class=\"teaser__emoji\">👶</span> {{textKey | translate: (translations): currentLanguage }}\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ErrorInterceptor"
                        },
                        {
                            "name": "JwtInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "NavigationComponent"
                        },
                        {
                            "name": "NotFoundComponent"
                        },
                        {
                            "name": "TeaserComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AccountContainerComponent"
                        },
                        {
                            "name": "AccountPageComponent"
                        },
                        {
                            "name": "AuthFormComponent"
                        },
                        {
                            "name": "DeleteAccountConfirmationDialogPageComponent"
                        },
                        {
                            "name": "ForgotPasswordContainerComponent"
                        },
                        {
                            "name": "ForgotPasswordPageComponent"
                        },
                        {
                            "name": "LoginContainerComponent"
                        },
                        {
                            "name": "LoginPageComponent"
                        },
                        {
                            "name": "RegisterContainerComponent"
                        },
                        {
                            "name": "RegisterPageComponent"
                        },
                        {
                            "name": "ResetPasswordContainerComponent"
                        },
                        {
                            "name": "ResetPasswordPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CookbookModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CookbookService"
                        },
                        {
                            "name": "RecipeService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddRecipeDialogComponent"
                        },
                        {
                            "name": "CookbookContainerComponent"
                        },
                        {
                            "name": "CookbookPageComponent"
                        },
                        {
                            "name": "RecipeContainerComponent"
                        },
                        {
                            "name": "RecipeListComponent"
                        },
                        {
                            "name": "RecipePageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CookbookRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CookbookRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MealPlanerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddMealDialogComponent"
                        },
                        {
                            "name": "AddMealDialogPageComponent"
                        },
                        {
                            "name": "IngredientsPickerComponent"
                        },
                        {
                            "name": "MealPickerComponent"
                        },
                        {
                            "name": "MealplanerContainerComponent"
                        },
                        {
                            "name": "MealplanerPageComponent"
                        },
                        {
                            "name": "ScheduleComponent"
                        },
                        {
                            "name": "ScheduleControllsComponent"
                        },
                        {
                            "name": "ScheduleDaysControllsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MealPlanerRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MealPlanerRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductInfoModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProductPageComponent"
                        },
                        {
                            "name": "ProductPageContainerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ProductInfoRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductInfoRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "EditListDialogComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "ListHeaderComponent"
                        },
                        {
                            "name": "ListPickerDialogComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "TranslatePipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "EditListDialogComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "ListHeaderComponent"
                        },
                        {
                            "name": "ListPickerDialogComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "TranslatePipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingListModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ShoppingListComponent"
                        },
                        {
                            "name": "ShoppingListContainerComponent"
                        },
                        {
                            "name": "ShoppingListFormComponent"
                        },
                        {
                            "name": "ShoppingListPageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "ShoppingListRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ShoppingListRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Accent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Accent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "object",
                "defaultValue": "{\n  logout: action('clicked'),\n  languageChanged: action('languageChanged')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "object",
                "defaultValue": "{\n  clicked: action('clicked')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "object",
                "defaultValue": "{\n  clicked: action('clicked')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "object",
                "defaultValue": "{\n  valueChanged: action('valueChanged'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "object",
                "defaultValue": "{\n  inputChanged: action('inputChanged'),\n  editRecipe: action('editRecipe'),\n  deleteRecipe: action('deleteRecipe')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  credentialsReceived: action('credentialsReceived')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                "type": "object",
                "defaultValue": "{\n  selectRecipe: action('selectRecipe'),\n  changeSelectedCookbook: action('changeSelectedCookbook'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                "type": "object",
                "defaultValue": "{\n  dateChanged: action('dateChanged'),\n  addMeal: action('addMeal'),\n  removeMeal: action('removeMeal')\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts",
                "type": "object",
                "defaultValue": "{\n  choseIngredients: action('choseIngredients'),\n  changeSelectedCookbook: action('back'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts",
                "type": "object",
                "defaultValue": "{\n  dateChanged: action('dateChanged'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                "type": "object",
                "defaultValue": "{\n  changeDayIndex: action('changeDayIndex'),\n}"
            },
            {
                "name": "actionsData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "object",
                "defaultValue": "{\n  itemDeleted: action('itemDeleted'),\n  listItemMoved: action('listItemMoved'),\n}"
            },
            {
                "name": "activeDayPlan",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => {\n    const currentMealPlaner = mealPlanerState.activeMealPlaner;\n    if (!currentMealPlaner) {\n      return null;\n    }\n    const currentMeals = mealPlanerState.meals[currentMealPlaner] as { [key: string]: DayPlan };\n    if (!currentMeals) {\n      return null;\n    }\n    const currentDayPlan = currentMeals[format(mealPlanerState.selectedDate, 'yyyy-MM-dd')];\n    if (!currentDayPlan) {\n      return null;\n    }\n    return currentDayPlan;\n  }\n)"
            },
            {
                "name": "activeMealPlaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.mealPlaners.entities[mealPlanerState.activeMealPlaner || '']\n)"
            },
            {
                "name": "activeMealPlanerId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.activeMealPlaner\n)"
            },
            {
                "name": "activeShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists.entities[shoppingListState.activeShoppingList || '']\n)"
            },
            {
                "name": "activeShoppingListId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n)"
            },
            {
                "name": "addMeal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Container] Add Meal',\n  props<{ optimisticId: string, recipe: Recipe, mealType: MealType, shoppingListItems: BasicShoppingListItem[] }>()\n)"
            },
            {
                "name": "addMealsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Add Meal Failure',\n  props<{ mealType: MealType, recipe: Recipe, optimisticId: string }>()\n)"
            },
            {
                "name": "addMealsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Add Meal Success',\n  props<{ mealApi: Meal, optimisticId: string }>()\n)"
            },
            {
                "name": "addShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Add Shopping List Items',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>()\n)"
            },
            {
                "name": "addShoppingListItemFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Item Failure',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>()\n)"
            },
            {
                "name": "addShoppingListItemsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Items Failure',\n)"
            },
            {
                "name": "addShoppingListItemsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Items Success',\n  props<{ shoppingListItems: ShoppingListItem[] }>()\n)"
            },
            {
                "name": "addShoppingListItemSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Item Success',\n  props<{ optimisticId: string, shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "appStateReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/reducers/app-state.reducers.ts",
                "type": "",
                "defaultValue": "createReducer<AppState, Action>(\n  initialAppState,\n  on(\n    I18nApiActions.getI18nSuccess,\n    (state, {i18n}: { i18n: I18n }) => {\n      return {\n        ...state,\n        i18n: {\n          ...state.i18n,\n          ...i18n\n        }\n      };\n    }),\n  on(\n    AuthApiActions.refreshTokenSuccess,\n    (state, {user}: { user: User }) => {\n      return {\n        ...state,\n        user: {\n          ...user\n        }\n      };\n    }),\n  on(\n    AuthApiActions.refreshTokenFailed,\n    ErrorInterceptorActions.logout,\n    AuthApiActions.deleteAccountSuccess,\n    NavigationActions.logout,\n    (state) => {\n      return {\n        ...state,\n        user: null\n      };\n    }),\n  on(\n    AuthApiActions.loginSuccess,\n    AuthApiActions.registerSuccess,\n    AuthApiActions.restPasswordSuccess,\n    (state, {user}: { user: User }) => {\n      return {\n        ...state,\n        user: {\n          ...user\n        },\n      };\n    }),\n  on(\n    AuthenticatedGuardActions.setRequestedUrlBeforeLoginWasRequired,\n    (state, {url}: { url: string }) => {\n      return {\n        ...state,\n        requestedUrlBeforeLoginWasRequired: url\n      };\n    }),\n  on(\n    AppInitializationActions.setLanguage,\n    NavigationActions.changeLanguage,\n    (state: AppState, {language}: { language: Language }) => {\n      return {\n        ...state,\n        language,\n      };\n    }),\n  on(\n    SyncServiceActions.setOfflineMode,\n    (state: AppState, {isOffline}: { isOffline: boolean }) => {\n      return {\n        ...state,\n        isOffline\n      };\n    })\n)"
            },
            {
                "name": "betaTeaserData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/teaser/teaser.stories.ts",
                "type": "object",
                "defaultValue": "{\n  currentLang: 'de',\n  translations: {\n    de: {\n      'beta.teaser': 'Beta Teaser',\n    }\n  }\n}"
            },
            {
                "name": "bulkUpdateShoppingListItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Effect] Bulk Update ShoppingList',\n  props<{ shoppingListId: string, shoppingListItems: ShoppingListItem[] }>()\n)"
            },
            {
                "name": "buttonData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "object",
                "defaultValue": "{\n  buttonText: 'Button',\n  isDisabled: false,\n  hasErrors: false,\n  color: 'primary',\n  e2eTestName: 'buttonTest',\n  iconLeft: '',\n  iconRight: '',\n}"
            },
            {
                "name": "buttonLinkData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "object",
                "defaultValue": "{\n  linkText: 'Primary',\n  buttonType: 'button',\n  isDisabled: false,\n  hasErrors: false,\n  color: 'primary',\n  e2eTestName: 'buttonTest',\n  iconLeft: '',\n  iconRight: '',\n}"
            },
            {
                "name": "changeLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/navigation.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Navigation Actions] Change Language', props<{ language: Language }>())"
            },
            {
                "name": "changeSelectedMealPlaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Container] Change Selected Meal Planer',\n  props<{ mealPlanerId: string }>()\n)"
            },
            {
                "name": "changeShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Shopping List Container] Change Shopping List', props<{ shoppingListId: string }>())"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "cookbookStateReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/reducers/cookbook-state.reducers.ts",
                "type": "",
                "defaultValue": "createReducer<CookbookState, Action>(\n  initialCookbookState,\n  on(CookbookApiActions.loadCookbookSuccess,\n    (state: CookbookState, {cookbooks}: { cookbooks: Cookbook[] }) => ({\n      ...state,\n      cookbooks\n    })\n  ),\n  on(\n    CookbookApiActions.loadRecipesSuccess,\n    CookbookApiActions.loadSpecificRecipesSuccess,\n    (state: CookbookState, {cookbookId, recipes}: LoadRecipesSuccessAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state?.recipes,\n        [cookbookId]: recipes\n      }\n    };\n  }),\n  on(RecipeContainerActions.createRecipe, (state: CookbookState, {optimisticId, recipeToSave}: CreateRecipeAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipeToSave.cookbookId]: [...copyOrCreateArray(state.recipes, recipeToSave.cookbookId), {...recipeToSave, id: optimisticId}]\n      }\n    };\n  }),\n  on(RecipeApiActions.createRecipeSuccess, (state: CookbookState, {optimisticId, recipe}: CreateRecipeSuccessAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: state.recipes[recipe.cookbookId]?.map((item: Recipe) => {\n          return item.id === optimisticId ? recipe : item;\n        })\n      }\n    };\n  }),\n  on(RecipeApiActions.createRecipeFailure, (state: CookbookState, {optimisticId, cookbookId}: CreateRecipeSuccessFailureAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [cookbookId]: state.recipes[cookbookId].filter((recipe: Recipe) => recipe.id !== optimisticId)\n      }\n    };\n  }),\n  on(RecipeApiActions.editRecipeSuccess, (state: CookbookState, {recipe}: EditRecipeSuccessAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: state.recipes[recipe.cookbookId].map((item: Recipe) => {\n          return item.id === recipe.id ? recipe : item;\n        })\n      }\n    };\n  }),\n  on(CookbookContainerActions.deleteRecipeFromState, (state: CookbookState, {recipeToDelete}: DeleteRecipeFromStateAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipeToDelete.cookbookId]: state.recipes[recipeToDelete.cookbookId].filter((recipe: Recipe) => recipe.id !== recipeToDelete.id)\n      }\n    };\n  }),\n  on(CookbookApiActions.undoDeleteRecipeFromState, (state: CookbookState, {recipe}: UndoDeleteRecipeFromStateAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: addItemAlphabetically(recipe, state.recipes[recipe.cookbookId])\n      }\n    };\n  }),\n  on(CookbookContainerActions.selectCookbook, (state: CookbookState, {selectedCookbookId}: CookbookSelectedAction) => {\n    return {\n      ...state,\n      activeCookbookId: selectedCookbookId\n    };\n  }),\n  on(CookbookContainerActions.createCookbook, (state: CookbookState, {optimisticId, title}: CookbookCreatedAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks, {id: optimisticId, title}\n      ]\n    };\n  }),\n  on(CookbookApiActions.createCookbookSuccess, (state: CookbookState, {optimisticId, cookbook}: CookbookCreatedSuccessAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.map((item: Cookbook) => item.id === optimisticId ? cookbook : item)\n      ]\n    };\n  }),\n  on(CookbookApiActions.createCookbookFailure, (state: CookbookState, {optimisticId}: CookbookCreatedFailureAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.filter((item: Cookbook) => item.id !== optimisticId)\n      ]\n    };\n  }),\n  on(CookbookApiActions.editCookbookSuccess, (state: CookbookState, {cookbook}: CookbookEditedSuccessAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.map((item: Cookbook) => item.id === cookbook.id ? cookbook : item)\n      ]\n    };\n  }),\n  on(CookbookContainerActions.deleteCookbookFromState, (state: CookbookState, {cookbook}: CookbookDeletedFromStateAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.filter((item: Cookbook) => item.id !== cookbook.id)\n      ]\n    };\n  }),\n  on(CookbookApiActions.undoDeleteCookbookFromState, (state: CookbookState, {cookbook}: UndoCookbookDeletedFromStateAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...addItemAlphabetically(cookbook, state.cookbooks)\n      ]\n    };\n  }),\n  on(RecipeApiActions.loadRecipeSuccess, (state: CookbookState, {recipe}: LoadRecipeSuccessAction) => {\n    return {\n      ...state,\n      activeCookbookId: recipe.cookbookId,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: addItemAlphabetically(recipe, state.recipes[recipe.cookbookId])\n      }\n    };\n  }),\n  on(CookbookApiActions.setActiveCookbookIdAsQueryParam, (state: CookbookState, {selectedCookbookId}: {selectedCookbookId: string}) => {\n    return {\n      ...state,\n      activeCookbookId: selectedCookbookId\n    };\n  }),\n)"
            },
            {
                "name": "copyIngredientsToShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[CookbookContainer]',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>())"
            },
            {
                "name": "copyRecipeToMealplaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[CookbookContainer]',\n  props<{ recipe: Recipe }>())"
            },
            {
                "name": "createCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Create Cookbooks',\n  props<{ optimisticId: string, title: string }>()\n)"
            },
            {
                "name": "createCookbookFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[createCookbook Effect] Create Cookbooks Failure',\n  props<{ optimisticId: string }>()\n)"
            },
            {
                "name": "createCookbookSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[createCookbook Effect] Create Cookbooks Success',\n  props<{ optimisticId: string, cookbook: Cookbook }>()\n)"
            },
            {
                "name": "createMealPlaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Container] Add Meal Planer',\n  props<{ title: string }>()\n)"
            },
            {
                "name": "createMealPlanerFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Create Meal Planer Failure',\n  props<{ title: string }>()\n)"
            },
            {
                "name": "createMealPlanerSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Create Meal Planer Success',\n  props<{ mealPlaner: MealPlaner }>()\n)"
            },
            {
                "name": "createRecipe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/recipe-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Create Recipe',\n  props<{ optimisticId: string, recipeToSave: Recipe }>()\n)"
            },
            {
                "name": "createRecipeFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[CreateRecipe Effect] Create Recipe Failure',\n  props<{ optimisticId: string, cookbookId: string }>())"
            },
            {
                "name": "createRecipeSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[CreateRecipe Effect] Create Recipe Success',\n  props<{ optimisticId: string, recipe: Recipe }>()\n)"
            },
            {
                "name": "createShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Create new ShoppingList',\n  props<{ title: string }>()\n)"
            },
            {
                "name": "createShoppingListFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Create Shopping List  Failure',\n  props<{ title: string }>()\n)"
            },
            {
                "name": "createShoppingListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Create Shopping List Success',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "daysData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      'weekday-short.monday': 'Mo',\n      'weekday-short.tuesday': 'Di',\n      'weekday-short.wednesday': 'Mi',\n      'weekday-short.thursday': 'Do',\n      'weekday-short.friday': 'Fr',\n      'weekday-short.saturday': 'Sa',\n      'weekday-short.sunday': 'So',\n    }\n  },\n  currentLanguage: 'de',\n  selectedDayIndex: 0,\n  currentDayIndex: 0,\n}"
            },
            {
                "name": "declarations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/shared.module.ts",
                "type": "[]",
                "defaultValue": "[\n  ButtonComponent,\n  InputComponent,\n  SelectComponent,\n  ListHeaderComponent,\n  ListPickerDialogComponent,\n  EditListDialogComponent,\n  TranslatePipe,\n  ButtonLinkComponent,\n]"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/edit-list-dialog/edit-list-dialog.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-picker-dialog/list-picker-dialog.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: AddRecipeDialogComponent,\n  props: {}\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DEFAULT_LANGUAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "Language",
                "defaultValue": "'de'"
            },
            {
                "name": "DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "string",
                "defaultValue": "'shopping-list'"
            },
            {
                "name": "DefaultTitle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {\n    selectedList: {id: 'test', title: ''},\n    lists: [{id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}],\n    defaultTitle: 'Dafault Title',\n    addListLabel: 'Liste Hinufügen',\n    buttonLabel: 'Meine Listen'\n  }\n})"
            },
            {
                "name": "deleteAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/account-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Account Container] Delete Account',\n  props<{ user: User }>())"
            },
            {
                "name": "deleteAccountFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Delete Account Failure', props<{ user: User }>())"
            },
            {
                "name": "deleteAccountSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Delete Account Success', props<{}>())"
            },
            {
                "name": "deleteCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Delete Cookbooks',\n  props<{ cookbook: Cookbook }>()\n)"
            },
            {
                "name": "deleteCookbookFromState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Delete Cookbooks From State',\n  props<{ cookbook: Cookbook }>()\n)"
            },
            {
                "name": "deleteCookbookSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[deleteCookbook Effect] Delete Cookbooks Success',\n  props<{ cookbook: Cookbook }>()\n)"
            },
            {
                "name": "deleteMealPlaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Container] Delete Meal Planer',\n  props<{ mealPlaner: MealPlaner }>()\n)"
            },
            {
                "name": "deleteMealPlanerFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Delete Meal Planer Failure',\n  props<{ mealPlaner: MealPlaner }>()\n)"
            },
            {
                "name": "deleteMealPlanerSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Delete Meal Planer Success',\n  props<{ mealPlaner: MealPlaner }>()\n)"
            },
            {
                "name": "deleteRecipe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Delete Recipe',\n  props<{ recipe: Recipe }>()\n)"
            },
            {
                "name": "deleteRecipeFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[DeleteRecipe Effect] Delete Recipe Failure')"
            },
            {
                "name": "deleteRecipeFromState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Cookbook Container] Delete Recipe from State', props<{ recipeToDelete: Recipe }>())"
            },
            {
                "name": "deleteRecipeSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[DeleteRecipe Effect] Delete Recipe Success',\n  props<{ deletedRecipe: Recipe }>()\n)"
            },
            {
                "name": "deleteShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Delete shopping list',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "deleteShoppingListFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List  Failure',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "deleteShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Delete Shopping List Items',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "deleteShoppingListItemFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Failure',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "deleteShoppingListItemSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Success',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "deleteShoppingListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Success',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "DELETION_DELAY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "number",
                "defaultValue": "1500"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "editCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Edit Cookbooks',\n  props<{ cookbook: Cookbook }>()\n)"
            },
            {
                "name": "editCookbookFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[editCookbook Effect] Edit Cookbooks Failure')"
            },
            {
                "name": "editCookbookSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[editCookbook Effect] Edit Cookbooks Success',\n  props<{ cookbook: Cookbook }>()\n)"
            },
            {
                "name": "editMealPlaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Container] Edit Meal Planer',\n  props<{ mealPlaner: MealPlaner, changes: MealPlaner }>()\n)"
            },
            {
                "name": "editMealPlanerFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Edit Meal Planer Failure',\n  props<{ changes: MealPlaner, mealPlaner: MealPlaner }>()\n)"
            },
            {
                "name": "editMealPlanerSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Edit Meal Planer Success',\n  props<{ mealPlaner: MealPlaner }>()\n)"
            },
            {
                "name": "editRecipe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/recipe-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Edit Recipe',\n  props<{ recipeToEdit: Recipe }>()\n)"
            },
            {
                "name": "editRecipeFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[EditRecipe Effect] Edit Recipe Failure')"
            },
            {
                "name": "editRecipeSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[EditRecipe Effect] Edit Recipe Success',\n  props<{ recipe: Recipe }>()\n)"
            },
            {
                "name": "editShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Edit ShoppingList',\n  props<{ shoppingList: ShoppingList, changes: ShoppingList }>()\n)"
            },
            {
                "name": "editShoppingListFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Edit Shopping List  Failure',\n  props<{ shoppingList: ShoppingList, changes: ShoppingList }>()\n)"
            },
            {
                "name": "editShoppingListSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Edit Shopping List Success',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "EMAIL_PATTERN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "",
                "defaultValue": "/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/"
            },
            {
                "name": "EmptyList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  showBetaTeaser: false,\n  apiUrl: 'https://mealplaner.app/api',\n  authUrl: 'https://mealplaner.app/api',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.qa.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  showBetaTeaser: true,\n  apiUrl: 'https://beta.mealplaner.app/api',\n  authUrl: 'https://beta.mealplaner.app/api',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  showBetaTeaser: false,\n  apiUrl: 'http://localhost:4200/api',\n  authUrl: 'http://localhost:4200',\n}"
            },
            {
                "name": "forgotPasswordFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Forgot Password Failure')"
            },
            {
                "name": "forgotPasswordSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Forgot Password Success')"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      'input.search': 'Suchen',\n      'button.edit': 'Bearbeiten',\n      'button.delete': 'Löschen'\n    }\n  },\n  recipes: [\n    {\n      id: '1',\n      title: 'Chocolate chip cookie'\n    },\n    {\n      id: '2',\n      title: 'Cheesecake'\n    },\n    {\n      id: '3',\n      title: 'Muffin'\n    }\n  ]\n}"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      email: 'Email Adresse',\n      password: 'Passwort',\n      login: 'Anmelden',\n      register: 'Registrieren',\n      'errors.validation.email.required': 'Bitte geben Sie Ihre Email Adresse ein',\n      'errors.validation.email.pattern': 'Valid Email Format braucht @ ein . dann mindestens 2 Zeichen',\n      'errors.validation.password.required': 'Bitte geben Sie Ihre Passwort ein',\n      'errors.validation.password.minlength': 'Passwort muss mindestens 4 character lang sein',\n      'errors.validation.password.pattern': 'Passwort braucht klein und gross Buchstaben und ein Zahl'\n      }\n    }\n}"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      'meal-picker.title': 'Rezepet auswählen',\n      'meal-picker.cookbook': 'Kochbuch',\n      'meal-picker.filter': 'Suche',\n      'meal-picker.empty-cookbook': 'Das Kochbuch ist leer',\n      'meal-picker.empty-cookbook-add-recipe': 'Rezept hinzufügen'\n    }\n  },\n  cookbooks: [{id: '1', title: 'Kochbuch 1'}, {id: '2', title: 'Kochbuch 2'}],\n  preSelectedCookbookId: '2',\n  recipes: {\n    1: [\n      {\n        title: 'Menu 1',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      },\n      {\n        title: 'Menu 2',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      },\n      {\n        title: 'Menu 3',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      }\n    ],\n    2: [\n      {\n        title: 'Menu 1',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      },\n      {\n        title: 'Menu 2',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      },\n      {\n        title: 'Menu 3',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      }\n    ]\n  }\n}"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      'weekday-short.monday': 'Mo',\n      'weekday-short.tuesday': 'Di',\n      'weekday-short.wednesday': 'Mi',\n      'weekday-short.thursday': 'Do',\n      'weekday-short.friday': 'Fr',\n      'weekday-short.saturday': 'Sa',\n      'weekday-short.sunday': 'So',\n      'meal-planer.breakfast': 'Frühstück',\n      'meal-planer.lunch': 'Mittagessen',\n      'meal-planer.dinner': 'Abendessen',\n      'meal-planer-add.lunch': 'Mittagessen hinzufügen',\n      'meal-planer-add.dinner': 'Abendessen hinzufügen',\n    }\n  },\n  selectedDate: new Date(),\n  dayPlan: {\n    breakfast: [{\n      id: 'id',\n      type: 'breakfast',\n      date: '',\n      recipe: {\n        title: 'Menu',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      },\n    }]\n  }\n}"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      'unit.kg': 'kg',\n      'unit.tableSpoon': 'EL',\n      'ingredients-picker.back': 'zurück',\n      'ingredients-picker.shopping-list': 'Einkaufsliste',\n      'ingredients-picker.button': 'Hinzufügen'\n    }\n  },\n  currentLanguage: 'de',\n  shoppingLists: [{id: '1', title: 'Shoppinglist 1'}, {id: '2', title: 'Shoppinglist 1'}],\n  preSelectedShoppingListId: '1',\n  ingredientsList: [{\n      title: 'Zutat 1',\n      amount: 2,\n      unit: 'kg',\n      isStableFood: false,\n  },\n    {\n      title: 'Grudzutat',\n      amount: 2,\n      unit: 'tableSpoon',\n      isStableFood: true,\n    }]\n}"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n    }\n  },\n  selectedDate: new Date(),\n}"
            },
            {
                "name": "formData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "object",
                "defaultValue": "{\n  translations: {\n    de: {\n      'shoppingList.addForm.amount': 'Menge',\n      'shoppingList.addForm.product': 'Zucker',\n      'shoppingList.addForm.piece': 'Stück',\n      'shoppingList.addForm.pack': 'Packung',\n      'shoppingList.addForm.addLabel': 'Hinzufügen',\n    }\n  },\n  currentLang: 'de',\n  itemAdded: action('itemAdded'),\n}"
            },
            {
                "name": "getI18n",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/i18n-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Initialize App] Get i18n')"
            },
            {
                "name": "getI18nFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/i18n-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Initialize App] Get i18n Failure')"
            },
            {
                "name": "getI18nSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/i18n-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Initialize App] Get i18n Success', props<{ i18n: I18n }>())"
            },
            {
                "name": "IconLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IconLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "initialAppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/state/app-state.ts",
                "type": "AppState",
                "defaultValue": "{\n  language: DEFAULT_LANGUAGE,\n  i18n: null,\n  user: null,\n  requestedUrlBeforeLoginWasRequired: null,\n  isOffline: false,\n}"
            },
            {
                "name": "initialCookbookState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/state/cookbook-state.ts",
                "type": "CookbookState",
                "defaultValue": "{\n  activeCookbookId: '',\n  cookbooks: [],\n  recipes: {}\n}"
            },
            {
                "name": "initialized",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/app-initialization.actions.ts",
                "type": "",
                "defaultValue": "createAction('[App Initialization] App Initialized')"
            },
            {
                "name": "initialMealPlanerState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/state/meal-planer-state.ts",
                "type": "MealPlanerState",
                "defaultValue": "{\n  selectedDate: new Date(),\n  mealPlaners: mealPlanerAdapter.getInitialState(),\n  meals: {},\n  activeMealPlaner: undefined,\n}"
            },
            {
                "name": "initialShoppingListState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "ShoppingListState",
                "defaultValue": "{\n  shoppingLists: shoppingListAdapter.getInitialState(),\n  shoppingListItems: {},\n  activeShoppingList: undefined,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "GlobalState",
                "defaultValue": "{\n  appState: initialAppState,\n  cookbookState: initialCookbookState,\n  shoppingListState: initialShoppingListState,\n  mealPlanerState: initialMealPlanerState,\n}"
            },
            {
                "name": "INPUT_DEBOUNCE_TIME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "number",
                "defaultValue": "300"
            },
            {
                "name": "inputData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "object",
                "defaultValue": "{\n  isDisabled: false,\n  e2eTestName: 'test',\n  label: 'Label',\n  errors: [],\n  placeholder: 'Placeholder',\n}"
            },
            {
                "name": "inputData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "object",
                "defaultValue": "{\n  options: [\n    {key: 'Tesla', value: 'Tesla'},\n    {key: 'Audi', value: 'Audi'},\n    {key: 'Skoda', value: 'Skoda'},\n    {key: 'BMW', value: 'BMW'},\n  ],\n  label: '',\n  isDisabled: false,\n}"
            },
            {
                "name": "isActiveMealPlanerLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.activeMealPlaner\n)"
            },
            {
                "name": "isActiveShoppingListLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n)"
            },
            {
                "name": "isLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => !!appState.user && !isJwtTokenExpired(appState.user.jwt)\n)"
            },
            {
                "name": "isOffline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.isOffline\n)"
            },
            {
                "name": "listData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/edit-list-dialog/edit-list-dialog.stories.ts",
                "type": "object",
                "defaultValue": "{\n  linkText: 'Primary',\n  buttonType: 'button',\n  isDisabled: false,\n  hasErrors: false,\n  color: 'primary',\n  e2eTestName: 'buttonTest',\n  iconLeft: '',\n  iconRight: '',\n  clicked: action('clicked')\n}"
            },
            {
                "name": "listData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-picker-dialog/list-picker-dialog.stories.ts",
                "type": "object",
                "defaultValue": "{\n  linkText: 'Primary',\n  buttonType: 'button',\n  isDisabled: false,\n  hasErrors: false,\n  color: 'primary',\n  e2eTestName: 'buttonTest',\n  iconLeft: '',\n  iconRight: '',\n  clicked: action('clicked')\n}"
            },
            {
                "name": "loadCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Cookbook Container] Load Cookbooks')"
            },
            {
                "name": "loadCookbookFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[loadCookbook Effect] Load Cookbooks Failure')"
            },
            {
                "name": "loadCookbooks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/add-meal-dialog.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Add Meal Dialog] Load Cookbooks')"
            },
            {
                "name": "loadCookBooks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Container] Load Cookbooks'\n)"
            },
            {
                "name": "loadCookbookSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[loadCookbook Effect] Load Cookbooks Success',\n  props<{ cookbooks: Cookbook[] }>()\n)"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {}\n})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loadMealPlaners",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Container] Load Meal Planers'\n)"
            },
            {
                "name": "loadMealPlanersFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Meal Planer API] Load Meal Planers Failure')"
            },
            {
                "name": "loadMealPlanersSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Load Meal Planers Success',\n  props<{ mealPlaners: MealPlaner[] }>()\n)"
            },
            {
                "name": "loadMealsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Load Meals Failure'\n)"
            },
            {
                "name": "loadMealsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Load Meals Success',\n  props<{ mealPlanerId: string, date: Date, dayPlan: DayPlan }>()\n)"
            },
            {
                "name": "loadRecipe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/recipe-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Recipe Container] Get Recipe', props<{ id: string }>())"
            },
            {
                "name": "loadRecipeFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Recipe Api] Load Recipe Failure')"
            },
            {
                "name": "loadRecipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Cookbook Container] Get Recipes')"
            },
            {
                "name": "loadRecipesFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[LoadRecipe Effect] Get Recipes Failure')"
            },
            {
                "name": "loadRecipesForSelectedCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/add-meal-dialog.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Add Meal Dialog] Load Recipes for Selected Cookbook', props<{ id: string }>())"
            },
            {
                "name": "loadRecipesSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[LoadRecipe Effect] Get Recipes Success',\n  props<{ cookbookId: string, recipes: Recipe[] }>()\n)"
            },
            {
                "name": "loadRecipeSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Recipe Api] Load Recipe Success', props<{recipe: Recipe}>())"
            },
            {
                "name": "loadShoppingListItemsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Shopping List API] Load Shopping List Items Failure')"
            },
            {
                "name": "loadShoppingListItemsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Load Shopping List Items Success',\n  props<{ shoppingListId: string, shoppingListItems: ShoppingListItem[] }>()\n)"
            },
            {
                "name": "loadShoppingLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Cookbook Container] Load ShoppingLists from Cookbook Container')"
            },
            {
                "name": "loadShoppingLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/add-meal-dialog.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Add Meal Dialog] Load ShoppingLists')"
            },
            {
                "name": "loadShoppingLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Shopping List Container] Load Shopping Lists')"
            },
            {
                "name": "loadShoppingListsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Shopping List API] Load Shopping Lists Failure')"
            },
            {
                "name": "loadShoppingListsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Load Shopping Lists Success',\n  props<{ shoppingLists: ShoppingList[] }>()\n)"
            },
            {
                "name": "loadSpecificRecipesFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[LoadRecipe Effect] Get Specific Recipes Failure')"
            },
            {
                "name": "loadSpecificRecipesSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[LoadRecipe Effect] Get Specific Recipes Success',\n  props<{ cookbookId: string, recipes: Recipe[] }>()\n)"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/login-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Login Page] Login',\n  props<{ credentials: LoginCredentials }>())"
            },
            {
                "name": "Login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: AuthFormComponent,\n  props: {\n    credentialsReceived: actionsData.credentialsReceived,\n    translations: formData.translations\n  }\n})"
            },
            {
                "name": "loginFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth] Login Failure',  props<{ error: string }>())"
            },
            {
                "name": "loginSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Login Success', props<{ user: User }>())"
            },
            {
                "name": "logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/error-interceptor.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Error Interceptor] Logout')"
            },
            {
                "name": "logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/navigation.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Navigation Action] Logout')"
            },
            {
                "name": "logoutFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Logout Failure')"
            },
            {
                "name": "logoutSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Logout Success')"
            },
            {
                "name": "mealPlanerAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/state/meal-planer-state.ts",
                "type": "",
                "defaultValue": "createEntityAdapter<MealPlaner>({\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n})"
            },
            {
                "name": "mealPlanerStateReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/reducers/meal-paner-state.reducers.ts",
                "type": "",
                "defaultValue": "createReducer<MealPlanerState, Action>(\n  initialMealPlanerState,\n  on(MealPlanerContainerActions.selectedDateChanged, (state: MealPlanerState, {selectedDate}: { selectedDate: Date }) => {\n    return {\n      ...state,\n      selectedDate\n    };\n  }),\n  on(\n    MealPlanerApiActions.loadMealPlanersSuccess,\n    (state: MealPlanerState, {mealPlaners}) => {\n      return {\n        ...state,\n        mealPlaners: mealPlanerAdapter.addMany(mealPlaners, state.mealPlaners),\n      };\n    }),\n  on(\n    MealPlanerEffectActions.setActiveMealPlaner,\n    MealPlanerContainerActions.changeSelectedMealPlaner,\n    (state: MealPlanerState, {mealPlanerId}) => {\n      return {\n        ...state,\n        activeMealPlaner: mealPlanerId || undefined,\n      };\n    }),\n  on(\n    MealPlanerApiActions.createMealPlanerSuccess,\n    (state: MealPlanerState, {mealPlaner}) => {\n      return {\n        ...state,\n        mealPlaners: mealPlanerAdapter.addOne(mealPlaner, state.mealPlaners),\n        meals: {\n          ...state.meals,\n          [mealPlaner.id]: {},\n        },\n        activeMealPlaner: mealPlaner.id,\n      };\n    }\n  ),\n  on(\n    MealPlanerContainerActions.editMealPlaner,\n    (state: MealPlanerState, {changes}) => {\n      return {\n        ...state,\n        mealPlaners: mealPlanerAdapter.updateOne({id: changes.id, changes}, state.mealPlaners),\n      };\n    }\n  ),\n  on(\n    MealPlanerEffectActions.undoOptimisticEditMealPlaner,\n    (state: MealPlanerState, {mealPlaner}) => {\n      return {\n        ...state,\n        mealPlaners: mealPlanerAdapter.updateOne({id: mealPlaner.id, changes: mealPlaner}, state.mealPlaners),\n      };\n    }\n  ),\n  on(\n    MealPlanerContainerActions.deleteMealPlaner,\n    (state: MealPlanerState, {mealPlaner}) => {\n      return {\n        ...state,\n        mealPlaners: mealPlanerAdapter.removeOne(mealPlaner.id, state.mealPlaners),\n      };\n    }\n  ),\n  on(\n    MealPlanerContainerActions.undoDeleteMealPlaner,\n    MealPlanerEffectActions.undoOptimisticDeleteMealPlaner,\n    (state: MealPlanerState, {mealPlaner}) => {\n      return {\n        ...state,\n        mealPlaners: mealPlanerAdapter.addOne(mealPlaner, state.mealPlaners),\n      };\n    }\n  ),\n  on(\n    MealPlanerApiActions.deleteMealPlanerSuccess,\n    (state: MealPlanerState, {mealPlaner}) => {\n      const copyMeals = {...state.meals};\n\n      if (copyMeals.hasOwnProperty(mealPlaner.id)) {\n        delete copyMeals[mealPlaner.id];\n      }\n\n      return {\n        ...state,\n        meals: copyMeals,\n      };\n    }\n  ),\n  on(MealPlanerApiActions.loadMealsSuccess,\n    (state: MealPlanerState, {date, dayPlan, mealPlanerId}) => {\n      return {\n        ...state,\n        meals: {\n          ...state.meals,\n          [mealPlanerId]: {\n            ...state.meals[mealPlanerId],\n            [format(date, 'yyyy-MM-dd')]: dayPlan\n          }\n        }\n      };\n    }\n  ),\n  on(MealPlanerContainerActions.addMeal,\n    (state: MealPlanerState, {optimisticId, mealType, recipe}) => {\n      if (!state.activeMealPlaner) {\n        return state;\n      }\n\n      const date = format(state.selectedDate, 'yyyy-MM-dd');\n\n      return {\n        ...state,\n        meals: {\n          ...state.meals,\n          [state.activeMealPlaner]: {\n            ...state.meals[state.activeMealPlaner],\n            [date]: {\n              ...state.meals[state.activeMealPlaner][date],\n              [mealType]: [{id: optimisticId, type: mealType, recipe, date}]\n            }\n          }\n        }\n      };\n    }\n  ),\n  on(MealPlanerContainerActions.removeMeal,\n    (state: MealPlanerState, {meal}) => {\n      if (!state.activeMealPlaner) {\n        return state;\n      }\n\n      const date = format(state.selectedDate, 'yyyy-MM-dd');\n      const copyDayPlan = {...state.meals[state.activeMealPlaner][date]};\n\n\n      if (copyDayPlan.hasOwnProperty(meal.type)) {\n        delete copyDayPlan[meal.type];\n      }\n\n      return {\n        ...state,\n        meals: {\n          ...state.meals,\n          [state.activeMealPlaner]: {\n            ...state.meals[state.activeMealPlaner],\n            [date]: copyDayPlan\n          }\n        }\n      };\n    }\n  ),\n  on(MealPlanerApiActions.addMealsSuccess,\n    (state: MealPlanerState, {optimisticId, mealApi}) => {\n      if (!state.activeMealPlaner) {\n        return state;\n      }\n\n      const date = format(state.selectedDate, 'yyyy-MM-dd');\n\n      return {\n        ...state,\n        meals: {\n          ...state.meals,\n          [state.activeMealPlaner]: {\n            ...state.meals[state.activeMealPlaner],\n            [date]: {\n              ...state.meals[state.activeMealPlaner][date],\n              [mealApi.type]: state.meals[state.activeMealPlaner][date][mealApi.type].map(meal => {\n                return meal.id === optimisticId ? {...meal, id: mealApi.id} : meal;\n              })\n            }\n          }\n        }\n      };\n    }\n  ),\n  on(MealPlanerEffectActions.undoOptimisticAddMeal,\n    (state: MealPlanerState, {optimisticId, mealType}) => {\n      if (!state.activeMealPlaner) {\n        return state;\n      }\n\n      const date = format(state.selectedDate, 'yyyy-MM-dd');\n\n      return {\n        ...state,\n        meals: {\n          ...state.meals,\n          [state.activeMealPlaner]: {\n            ...state.meals[state.activeMealPlaner],\n            [date]: {\n              ...state.meals[state.activeMealPlaner][date],\n              [mealType]: state.meals[state.activeMealPlaner][date][mealType].filter(meal => {\n                return meal.id !== optimisticId;\n              })\n            }\n          }\n        }\n      };\n    }\n  ),\n  on(MealPlanerContainerActions.undoRemoveMeal,\n    MealPlanerEffectActions.undoOptimisticRemoveMeal,\n    (state: MealPlanerState, {meal}) => {\n      if (!state.activeMealPlaner) {\n        return state;\n      }\n\n      const date = format(state.selectedDate, 'yyyy-MM-dd');\n\n      return {\n        ...state,\n        meals: {\n          ...state.meals,\n          [state.activeMealPlaner]: {\n            ...state.meals[state.activeMealPlaner],\n            [date]: {\n              ...state.meals[state.activeMealPlaner][date],\n              [meal.type]: [...(state.meals[state.activeMealPlaner][date][meal.type] || []), meal]\n            }\n          }\n        }\n      };\n    }\n  )\n)"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "MetaReducer[]",
                "defaultValue": "[]"
            },
            {
                "name": "moveShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Move Shopping List Items',\n  props<{ shoppingListId: string, currentIndex: number, previousIndex: number }>()\n)"
            },
            {
                "name": "MultipleList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {\n    selectedList: {id: 'test', title: 'My ShoppingList'},\n    lists: [{id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}],\n    defaultTitle: 'Dafault Title',\n    addListLabel: 'Liste Hinufügen',\n    buttonLabel: 'Meine Listen'\n  }\n})"
            },
            {
                "name": "navigationData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "object",
                "defaultValue": "{\n  isLoggedIn: false,\n  currentLang: 'de',\n  translations: {\n    de: {\n      'app.navigation.login': 'Login',\n      'app.navigation.logout': 'Abmelden',\n      'app.navigation.register': 'Registrieren',\n      'app.navigation.planer': 'Menuplaner',\n      'app.navigation.menus': 'Menüs',\n      'app.navigation.shopping-list': 'Einkaufsliste',\n      'app.navigation.account': 'Konto',\n    }\n  }\n}"
            },
            {
                "name": "NotCurrentDaySelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OneList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {\n    selectedList: {id: 'test', title: 'My ShoppingList'},\n    lists: [{id: 'test', title: 'My ShoppingList'}],\n    defaultTitle: 'Dafault Title',\n    addListLabel: 'Liste Hinufügen',\n    buttonLabel: 'Meine Listen'\n  }\n})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/teaser/teaser.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/not-found/not-found.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "REDIRECT_URL_WHEN_LOGOUT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "string",
                "defaultValue": "'/'"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "ActionReducerMap<GlobalState>",
                "defaultValue": "{\n  appState: appStateReducer,\n  shoppingListState: shoppingListReducers,\n  cookbookState: cookbookStateReducer,\n  mealPlanerState: mealPlanerStateReducers,\n}"
            },
            {
                "name": "refreshToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/app-initialization.actions.ts",
                "type": "",
                "defaultValue": "createAction('[App Initialization] Refresh JWT Token')"
            },
            {
                "name": "refreshToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/login-service.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth Service] Refresh Jwt Token')"
            },
            {
                "name": "refreshTokenFailed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth App] Refresh Token Failed')"
            },
            {
                "name": "refreshTokenSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Refresh Token Success', props<{ user: User }>())"
            },
            {
                "name": "register",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/register-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Register Container] Register',\n  props<{ credentials: RegisterCredentials }>())"
            },
            {
                "name": "Register",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: AuthFormComponent,\n  props: {\n    credentialsReceived: actionsData.credentialsReceived,\n    translations: formData.translations,\n    buttonText: 'register'\n  }\n})"
            },
            {
                "name": "registerFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Register Failure', props<{ error: string }>())"
            },
            {
                "name": "registerShoppingListItemDeleteForSync",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Effect] Offline Mode: DELETE Shopping List Item',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "registerShoppingListItemDeleteForSyncSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Effect] Offline Mode: DELETE Shopping List Item Registered For Sync Successfully'\n)"
            },
            {
                "name": "registerShoppingListItemPostForSync",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Effect] Offline Mode: POST Shopping List Item',\n  props<{ basicShoppingListItem: BasicShoppingListItem, optimisticId: string}>()\n)"
            },
            {
                "name": "registerShoppingListItemPostForSyncSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Effect] Offline Mode: POST Shopping List Item Registered For Sync Successfully'\n)"
            },
            {
                "name": "registerShoppingListItemUpdatesForSync",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Effect] Offline Mode: UPDATE Shopping List Item',\n  props<{ shoppingListItems: ShoppingListItem[] }>()\n)"
            },
            {
                "name": "registerShoppingListItemUpdatesForSyncSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Effect] Offline Mode: UPDATE Shopping List Item Registered For Sync Successfully'\n)"
            },
            {
                "name": "registerSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Register Success', props<{ user: User }>())"
            },
            {
                "name": "removeMeal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Container] Remove Meal',\n  props<{ meal: Meal }>()\n)"
            },
            {
                "name": "removeMealsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Remove Meal Failure',\n  props<{ meal: Meal }>()\n)"
            },
            {
                "name": "removeMealsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer API] Remove Meal Success',\n)"
            },
            {
                "name": "requestEmail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/forgot-password-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Forgot Password Container] Request Reset Email',\n  props<{ email: string }>())"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "resetPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/reset-password-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Reset Password Container] Reset Password',\n  props<{ password: string, resetPasswordToken: string }>())"
            },
            {
                "name": "restPasswordFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Rest Password Failure', props<{ error: string }>())"
            },
            {
                "name": "restPasswordSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth API] Rest Password Success', props<{ user: User }>())"
            },
            {
                "name": "retryAddMeal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Effects] Retry Add Meal',\n  props<{ mealType: MealType, recipe: Recipe, optimisticId: string }>()\n)"
            },
            {
                "name": "retryAddShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Retry add Shopping List Items',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>()\n)"
            },
            {
                "name": "retryCreateMealPlaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Effects] Retry Create Meal Planer',\n  props<{ title: string }>()\n)"
            },
            {
                "name": "retryCreateShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Retry create Shopping list ',\n  props<{ title: string }>()\n)"
            },
            {
                "name": "retryDeleteAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/actions/auth-effects.actions.ts",
                "type": "",
                "defaultValue": "createAction('[Auth Effects] Retry Delete Account', props<{ user: User }>())"
            },
            {
                "name": "retryDeleteMealPlaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Effects] Retry Delete Meal Planer',\n  props<{ mealPlaner: MealPlaner }>()\n)"
            },
            {
                "name": "retryDeleteShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Retry delete Shopping List',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "retryDeleteShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Retry delete Shopping List Items',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "retryEditMealPlaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Effects] Retry Edit Meal Planer',\n  props<{ mealPlaner: MealPlaner, changes: MealPlaner }>()\n)"
            },
            {
                "name": "retryEditShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Retry edit Shopping List',\n  props<{ shoppingList: ShoppingList, changes: ShoppingList }>()\n)"
            },
            {
                "name": "retryRemoveMeal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Effects] Retry Delete Meal',\n  props<{ meal: Meal }>()\n)"
            },
            {
                "name": "retryUpdateShoppingListItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Retry update Shopping List Items',\n  props<{ shoppingListItems: ShoppingListItem[] }>()\n)"
            },
            {
                "name": "selectActiveCookbookId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.activeCookbookId)"
            },
            {
                "name": "selectActiveCookbookRecipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  (state: GlobalState) => state.cookbookState,\n  (cookbookState: CookbookState) => {\n    if (!cookbookState.activeCookbookId) {\n      return undefined;\n    }\n\n    return cookbookState.recipes[cookbookState.activeCookbookId];\n  })"
            },
            {
                "name": "selectAppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<GlobalState, AppState>('appState')"
            },
            {
                "name": "selectCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Container] Select Cookbook',\n  props<{ selectedCookbookId: string }>()\n)"
            },
            {
                "name": "selectCookbooks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.cookbooks)"
            },
            {
                "name": "selectCookbookState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<GlobalState, CookbookState>('cookbookState')"
            },
            {
                "name": "selectCurrentLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.language\n)"
            },
            {
                "name": "selectCurrentShoppingListEntity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => {\n    if (!shoppingListState.activeShoppingList) {\n      return shoppingListItemAdapter.getInitialState();\n    }\n\n    const items = shoppingListState.shoppingListItems[shoppingListState.activeShoppingList];\n\n    if (!items) {\n      return shoppingListItemAdapter.getInitialState();\n    }\n\n    return items;\n  },\n)"
            },
            {
                "name": "selectCurrentShoppingListItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "shoppingListItemAdapter.getSelectors(selectCurrentShoppingListEntity).selectAll"
            },
            {
                "name": "selectedCookbook",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => {\n    if (cookbookState.activeCookbookId) {\n      return cookbookState.cookbooks.find((cookbook: Cookbook) => cookbook.id === cookbookState.activeCookbookId);\n    } else {\n      return cookbookState.cookbooks[0];\n    }\n  })"
            },
            {
                "name": "selectedDateChanged",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Container] Selected Date change',\n  props<{ selectedDate: Date }>()\n)"
            },
            {
                "name": "selectedRecipe",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "(selectedCookbookId: string, recipeId: string) => createSelector(\n  (state: GlobalState) => state.cookbookState,\n  (cookbookState: CookbookState) => {\n    const recipesOfCookbook = cookbookState.recipes[selectedCookbookId];\n    if (recipesOfCookbook) {\n      return recipesOfCookbook.find((recipe: Recipe) => recipe.id === recipeId);\n    }\n    return undefined;\n  })"
            },
            {
                "name": "selectMealPlanerEntity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.mealPlaners\n)"
            },
            {
                "name": "selectMealPlaners",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "mealPlanerAdapter.getSelectors(selectMealPlanerEntity).selectAll"
            },
            {
                "name": "selectMealPlanerState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<GlobalState, MealPlanerState>('mealPlanerState')"
            },
            {
                "name": "selectRecipes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.recipes\n)"
            },
            {
                "name": "selectRequestedUrlBeforeLoginWasRequired",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.requestedUrlBeforeLoginWasRequired\n)"
            },
            {
                "name": "selectSelectedDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.selectedDate)"
            },
            {
                "name": "selectShoppingLists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "shoppingListAdapter.getSelectors(selectShoppingListsEntity).selectAll"
            },
            {
                "name": "selectShoppingListsEntity",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists\n)"
            },
            {
                "name": "selectShoppingListState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<GlobalState, ShoppingListState>('shoppingListState')"
            },
            {
                "name": "selectTranslations",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.i18n || {}\n)"
            },
            {
                "name": "selectUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user\n)"
            },
            {
                "name": "selectUserID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/index.ts",
                "type": "",
                "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user?.id,\n)"
            },
            {
                "name": "setActiveCookbookIdAsQueryParam",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[ChooseActiveCookbookId Effect] Set Active CookbookId As QueryParam',\n  props<{ selectedCookbookId: string }>()\n)"
            },
            {
                "name": "setActiveMealPlaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Effects] Set Active Meal Planer',\n  props<{ mealPlanerId: string }>()\n)"
            },
            {
                "name": "setActiveShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Effect] Set Active ShoppingList',\n  props<{ shoppingListId: string }>()\n)"
            },
            {
                "name": "setLanguage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/app-initialization.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[App Initialization] Set Application Startup Language',\n  props<{ language: Language }>())"
            },
            {
                "name": "setOfflineMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/sync-service.actions.ts",
                "type": "",
                "defaultValue": "createAction('[SyncService] Set Offline Mode', props<{isOffline: boolean}>())"
            },
            {
                "name": "setRequestedUrlBeforeLoginWasRequired",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/store/actions/auth-guard.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth Guard] Set Requested Url Before Login Was Required',\n  props<{ url: string }>())"
            },
            {
                "name": "shoppingListAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "",
                "defaultValue": "createEntityAdapter<ShoppingList>({\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n})"
            },
            {
                "name": "shoppingListItemAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "",
                "defaultValue": "createEntityAdapter<ShoppingListItem>({\n  sortComparer: ((a, b) => (b.order || Number.MAX_VALUE) - (a.order || Number.MAX_VALUE)),\n})"
            },
            {
                "name": "shoppingListReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/reducers/shopping-list.reducers.ts",
                "type": "",
                "defaultValue": "createReducer<ShoppingListState, Action>(\n  initialShoppingListState,\n  on(\n    ShoppingListApiActions.loadShoppingListsSuccess,\n    (state: ShoppingListState, {shoppingLists}: LoadShoppingListsSuccessAction) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.addMany(shoppingLists, state.shoppingLists),\n      };\n    }),\n  on(\n    ShoppingListEffectActions.setActiveShoppingList,\n    ShoppingListContainerActions.changeShoppingList,\n    (state: ShoppingListState, {shoppingListId}: ChangeShoppingListAction | SetActiveShoppingListAction) => {\n      return {\n        ...state,\n        activeShoppingList: shoppingListId || undefined,\n      };\n    }),\n  on(\n    ShoppingListApiActions.loadShoppingListItemsSuccess,\n    (state: ShoppingListState, {shoppingListId, shoppingListItems}: LoadShoppingListItemsSuccessAction) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.updateOne({id: shoppingListId, changes: {isInitialized: true}}, state.shoppingLists),\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListId]: shoppingListItemAdapter.addMany(shoppingListItems, shoppingListItemAdapter.getInitialState()),\n        }\n      };\n    }),\n  on(\n    ShoppingListContainerActions.addShoppingListItem,\n    (state: ShoppingListState, {optimisticId, shoppingListItem}: AddShoppingListItemAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.addOne(\n            {id: optimisticId, ...shoppingListItem},\n            state.shoppingListItems[shoppingListItem.shoppingList])\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.addShoppingListItemsSuccess,\n    (state: ShoppingListState, {shoppingListItems}) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItems[0].shoppingList]: shoppingListItemAdapter.addMany(\n            shoppingListItems,\n            state.shoppingListItems[shoppingListItems[0].shoppingList])\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.addShoppingListItemSuccess,\n    (state: ShoppingListState, action: AddShoppingListItemSuccessAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [action.shoppingListItem.shoppingList]: shoppingListItemAdapter.updateOne(\n            {id: action.optimisticId, changes: action.shoppingListItem},\n            state.shoppingListItems[action.shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListEffectActions.undoOptimisticAddShoppingListItem,\n    (state: ShoppingListState, {optimisticId, shoppingListItem}) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.removeOne(\n            optimisticId,\n            state.shoppingListItems[shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.deleteShoppingListItem,\n    (state: ShoppingListState, {shoppingListItem}: DeleteShoppingListItemAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.removeOne(\n            shoppingListItem.id,\n            state.shoppingListItems[shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.undoDeleteShoppingListItem,\n    ShoppingListEffectActions.undoOptimisticDeleteShoppingListItem,\n    (state: ShoppingListState, {shoppingListItem}) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.addOne(\n            shoppingListItem,\n            state.shoppingListItems[shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListEffectActions.bulkUpdateShoppingListItems,\n    (state: ShoppingListState, {shoppingListItems, shoppingListId}) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListId]: shoppingListItemAdapter.updateMany(\n            shoppingListItems.map(shoppingListItem => ({id: shoppingListItem.id, changes: shoppingListItem})),\n            state.shoppingListItems[shoppingListId]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.createShoppingListSuccess,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.addOne(shoppingList, state.shoppingLists),\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingList.id]: shoppingListItemAdapter.getInitialState(),\n        },\n        activeShoppingList: shoppingList.id,\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.editShoppingList,\n    (state: ShoppingListState, {changes}) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.updateOne({id: changes.id, changes}, state.shoppingLists),\n      };\n    }\n  ),\n  on(\n    ShoppingListEffectActions.undoOptimisticEditShoppingList,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.updateOne({id: shoppingList.id, changes: shoppingList}, state.shoppingLists),\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.deleteShoppingList,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.removeOne(shoppingList.id, state.shoppingLists),\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.undoDeleteShoppingList,\n    ShoppingListEffectActions.undoOptimisticDeleteShoppingList,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.addOne(shoppingList, state.shoppingLists),\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.deleteShoppingListSuccess,\n    (state: ShoppingListState, {shoppingList}) => {\n      const copyShoppingListsItems = {...state.shoppingListItems};\n\n      if (copyShoppingListsItems.hasOwnProperty(shoppingList.id)) {\n        delete copyShoppingListsItems[shoppingList.id];\n      }\n\n      return {\n        ...state,\n        shoppingListItems: copyShoppingListsItems,\n      };\n    }\n  )\n)"
            },
            {
                "name": "STORAGE_SELECTED_COOKBOOK_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "string",
                "defaultValue": "'selectedCookbookId'"
            },
            {
                "name": "STORAGE_SELECTED_SHOPPING_LIST_ID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "string",
                "defaultValue": "'selectedShoppingListId'"
            },
            {
                "name": "StringUnion",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/models/model.ts",
                "type": "",
                "defaultValue": "<UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n}"
            },
            {
                "name": "SUPPORTED_LANGUAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/constants/constants.ts",
                "type": "",
                "defaultValue": "StringUnion('de', 'en')"
            },
            {
                "name": "taskData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "literal type",
                "defaultValue": "{\n  items: [\n    {id: '1', title: 'Mehl', amount: 1, unit: 'kg', shoppingList: '42'},\n    {id: '2', title: 'Zucker', amount: 50, unit: 'g', shoppingList: '42'},\n    {id: '3', title: 'Eier', amount: 1, unit: 'piece', shoppingList: '42'},\n    {id: '4', title: 'Slaz', amount: 5, unit: 'coffeeSpoon', shoppingList: '42'},\n  ],\n  translations: {\n    de: {\n      piece: '',\n      tableSpoon: 'Esslöffel',\n      coffeeSpoon: 'Kaffelöffel',\n      pinch: 'Prise',\n    }\n  }\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "any",
                "defaultValue": "(args: NavigationComponent) => ({\n  component: NavigationComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/teaser/teaser.stories.ts",
                "type": "any",
                "defaultValue": "(args: TeaserComponent) => ({\n  component: TeaserComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/components/not-found/not-found.stories.ts",
                "type": "any",
                "defaultValue": "(args: NotFoundComponent) => ({\n  component: NotFoundComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "any",
                "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/edit-list-dialog/edit-list-dialog.stories.ts",
                "type": "any",
                "defaultValue": "(args: EditListDialogComponent) => ({\n  component: EditListDialogComponent,\n  props: args,\n  template: `<app-edit-list-dialog>Test</app-edit-list-dialog>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "any",
                "defaultValue": "(args: InputComponent) => ({\n  component: InputComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "any",
                "defaultValue": "(args: ButtonLinkComponent) => ({\n  component: ButtonLinkComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-picker-dialog/list-picker-dialog.stories.ts",
                "type": "any",
                "defaultValue": "(args: ListPickerDialogComponent) => ({\n  component: ListPickerDialogComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "any",
                "defaultValue": "(args: SelectComponent<string>) => ({\n  component: SelectComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "any",
                "defaultValue": "(args: ListHeaderComponent) => ({\n  component: ListHeaderComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "any",
                "defaultValue": "(args: RecipeListComponent) => ({\n  component: RecipeListComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                "type": "any",
                "defaultValue": "(args: MealPickerComponent) => ({\n  component: MealPickerComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                "type": "any",
                "defaultValue": "(args: ScheduleComponent) => ({\n  component: ScheduleComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts",
                "type": "any",
                "defaultValue": "(args: IngredientsPickerComponent) => ({\n  component: IngredientsPickerComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts",
                "type": "any",
                "defaultValue": "(args: ScheduleControllsComponent) => ({\n  component: ScheduleControllsComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                "type": "any",
                "defaultValue": "(args: ScheduleDaysControllsComponent) => ({\n  component: ScheduleDaysControllsComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "any",
                "defaultValue": "(args: ShoppingListComponent) => ({\n  component: ShoppingListComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "any",
                "defaultValue": "(args: ShoppingListFormComponent) => ({\n  component: ShoppingListFormComponent,\n  props: args,\n})"
            },
            {
                "name": "undoDeleteCookbookFromState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Cookbook Effect] Undo Delete Cookbooks From State',\n  props<{ cookbook: Cookbook }>()\n)"
            },
            {
                "name": "undoDeleteMealPlaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Container] Undo Delete Meal Planer',\n  props<{ mealPlaner: MealPlaner }>()\n)"
            },
            {
                "name": "undoDeleteRecipeFromState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "",
                "defaultValue": "createAction('[DeleteRecipe Effect] Undo delete Recipe from State',\n  props<{ recipe: Recipe }>())"
            },
            {
                "name": "undoDeleteShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] Undo Delete shopping',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "undoDeleteShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List Container] unToggle Shopping List Items',\n  props<{ shoppingListItem: ShoppingListItem}>()\n)"
            },
            {
                "name": "undoOptimisticAddMeal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Effects] Undo Optimistic Add Meal',\n  props<{ mealType: MealType, optimisticId: string }>()\n)"
            },
            {
                "name": "undoOptimisticAddShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Undo Optimistic add Shopping List Items',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>()\n)"
            },
            {
                "name": "undoOptimisticDeleteMealPlaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Effects] Undo Optimistic Delete Meal Planer',\n  props<{ mealPlaner: MealPlaner }>()\n)"
            },
            {
                "name": "undoOptimisticDeleteShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Undo Optimistic delete Shopping',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "undoOptimisticDeleteShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Undo Optimistic delete Shopping List Items Success',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
            },
            {
                "name": "undoOptimisticEditMealPlaner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Effects] Undo Optimistic Edit Meal Planer',\n  props<{ mealPlaner: MealPlaner }>()\n)"
            },
            {
                "name": "undoOptimisticEditShoppingList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Undo Optimistic edit Shopping',\n  props<{ shoppingList: ShoppingList }>()\n)"
            },
            {
                "name": "undoOptimisticRemoveMeal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Effects] Undo Optimistic Remove Meal',\n  props<{ meal: Meal }>()\n)"
            },
            {
                "name": "undoRemoveMeal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Meal Planer Container] Undo Delete Meal',\n  props<{ meal: Meal }>()\n)"
            },
            {
                "name": "updateShoppingListItemFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Update Shopping List Items Failure',\n  props<{ shoppingListItems: ShoppingListItem[] }>()\n)"
            },
            {
                "name": "updateShoppingListItemSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Shopping List API] Update Shopping List Items Success'\n)"
            },
            {
                "name": "Warn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Warn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithErrors",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithErros",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithObjectValues",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/select/select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithoutLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/components/input/input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [
            {
                "name": "addItemAlphabetically",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "newItem"
                    },
                    {
                        "name": "items"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "newItem",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "items",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "appInitializer",
                "file": "src/app/app.initializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "authService"
                    },
                    {
                        "name": "i18nService"
                    },
                    {
                        "name": "store"
                    },
                    {
                        "name": "actions$"
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "authService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "i18nService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions$",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "copyOrCreateArray",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "arrayMap"
                    },
                    {
                        "name": "arrayId"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "arrayMap",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "arrayId",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "decodeJwtToken",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "token"
                    }
                ],
                "returnType": "JwtPayload",
                "jsdoctags": [
                    {
                        "name": "token",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "email",
                "file": "src/app/core/validators/custom-validators.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "control"
                    }
                ],
                "returnType": "literal type | null",
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getBrowserLanguage",
                "file": "src/app/app.initializer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "string"
            },
            {
                "name": "getFirstDateOfWeek",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "date"
                    }
                ],
                "returnType": "Date",
                "jsdoctags": [
                    {
                        "name": "date",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getWeekDayIndex",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "date"
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "date",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isFormTouchedOrDirty",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "formGroup"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "formGroup",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isJwtTokenExpired",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "token"
                    },
                    {
                        "name": "now"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "token",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "now",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapI18nApiToI18nClient",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "i18nApi"
                    }
                ],
                "returnType": "I18nClient",
                "jsdoctags": [
                    {
                        "name": "i18nApi",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapSelectedIngredientToBasicShoppingListItem",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "ingredient"
                    },
                    {
                        "name": "shoppingListId"
                    }
                ],
                "returnType": "BasicShoppingListItem",
                "jsdoctags": [
                    {
                        "name": "ingredient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "shoppingListId",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "mapUserApiToUserClient",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "userApi"
                    }
                ],
                "returnType": "User",
                "jsdoctags": [
                    {
                        "name": "userApi",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "moveItemInArray",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "array"
                    },
                    {
                        "name": "previousIndex"
                    },
                    {
                        "name": "currentIndex"
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "array",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "previousIndex",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "currentIndex",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "stringBetweenChars",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "str"
                    },
                    {
                        "name": "charStart"
                    },
                    {
                        "name": "charEnd"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "str",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "charStart",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "charEnd",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "translateValidationErrors",
                "file": "src/app/core/helpers/helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "formControl"
                    },
                    {
                        "name": "translatePipe"
                    },
                    {
                        "name": "translations"
                    },
                    {
                        "name": "language"
                    }
                ],
                "returnType": "string[]",
                "jsdoctags": [
                    {
                        "name": "formControl",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translations",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "language",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "BasicShoppingListItem",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Omit<ShoppingListItem | \"id\" | \"order\">",
                "file": "src/app/core/models/model.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "DayPlan",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/models/model.ts",
                "description": "",
                "kind": 176
            },
            {
                "name": "I18n",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/models/model-api.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "I18n",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/core/models/model.ts",
                "description": "",
                "kind": 165
            },
            {
                "name": "Language",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/app/core/models/model.ts",
                "description": "",
                "kind": 164
            },
            {
                "name": "MealType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"breakfast\" | \"lunch\" | \"dinner\"",
                "file": "src/app/core/models/model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "SyncMethod",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"POST\" | \"PUT\" | \"DELETE\"",
                "file": "src/app/core/models/model.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "Unit",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"kg\" | \"g\" | \"tableSpoon\" | \"coffeeSpoon\" | \"l\" | \"dl\" | \"ml\" | \"pinch\" | \"piece\" | \"pack\"",
                "file": "src/app/core/models/model.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/shared/components/button/button.stories.ts": [
                {
                    "name": "Accent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  clicked: action('clicked')\n}"
                },
                {
                    "name": "buttonData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  buttonText: 'Button',\n  isDisabled: false,\n  hasErrors: false,\n  color: 'primary',\n  e2eTestName: 'buttonTest',\n  iconLeft: '',\n  iconRight: '',\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IconLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n})"
                },
                {
                    "name": "Warn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/shared/components/button-link/butto-link.stories.ts": [
                {
                    "name": "Accent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  clicked: action('clicked')\n}"
                },
                {
                    "name": "buttonLinkData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  linkText: 'Primary',\n  buttonType: 'button',\n  isDisabled: false,\n  hasErrors: false,\n  color: 'primary',\n  e2eTestName: 'buttonTest',\n  iconLeft: '',\n  iconRight: '',\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IconLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: ButtonLinkComponent) => ({\n  component: ButtonLinkComponent,\n  props: args,\n})"
                },
                {
                    "name": "Warn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/button-link/butto-link.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/core/components/navigation/navigation.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/navigation/navigation.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  logout: action('clicked'),\n  languageChanged: action('languageChanged')\n}"
                },
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/navigation/navigation.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/navigation/navigation.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "navigationData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/navigation/navigation.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  isLoggedIn: false,\n  currentLang: 'de',\n  translations: {\n    de: {\n      'app.navigation.login': 'Login',\n      'app.navigation.logout': 'Abmelden',\n      'app.navigation.register': 'Registrieren',\n      'app.navigation.planer': 'Menuplaner',\n      'app.navigation.menus': 'Menüs',\n      'app.navigation.shopping-list': 'Einkaufsliste',\n      'app.navigation.account': 'Konto',\n    }\n  }\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/navigation/navigation.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/navigation/navigation.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: NavigationComponent) => ({\n  component: NavigationComponent,\n  props: args,\n})"
                }
            ],
            "src/app/shared/components/select/select.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  valueChanged: action('valueChanged'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "inputData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  options: [\n    {key: 'Tesla', value: 'Tesla'},\n    {key: 'Audi', value: 'Audi'},\n    {key: 'Skoda', value: 'Skoda'},\n    {key: 'BMW', value: 'BMW'},\n  ],\n  label: '',\n  isDisabled: false,\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: SelectComponent<string>) => ({\n  component: SelectComponent,\n  props: args,\n})"
                },
                {
                    "name": "WithErrors",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithObjectValues",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/select/select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  inputChanged: action('inputChanged'),\n  editRecipe: action('editRecipe'),\n  deleteRecipe: action('deleteRecipe')\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      'input.search': 'Suchen',\n      'button.edit': 'Bearbeiten',\n      'button.delete': 'Löschen'\n    }\n  },\n  recipes: [\n    {\n      id: '1',\n      title: 'Chocolate chip cookie'\n    },\n    {\n      id: '2',\n      title: 'Cheesecake'\n    },\n    {\n      id: '3',\n      title: 'Muffin'\n    }\n  ]\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: RecipeListComponent) => ({\n  component: RecipeListComponent,\n  props: args,\n})"
                }
            ],
            "src/app/features/auth/components/auth-form/auth-form.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  credentialsReceived: action('credentialsReceived')\n}"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      email: 'Email Adresse',\n      password: 'Passwort',\n      login: 'Anmelden',\n      register: 'Registrieren',\n      'errors.validation.email.required': 'Bitte geben Sie Ihre Email Adresse ein',\n      'errors.validation.email.pattern': 'Valid Email Format braucht @ ein . dann mindestens 2 Zeichen',\n      'errors.validation.password.required': 'Bitte geben Sie Ihre Passwort ein',\n      'errors.validation.password.minlength': 'Passwort muss mindestens 4 character lang sein',\n      'errors.validation.password.pattern': 'Passwort braucht klein und gross Buchstaben und ein Zahl'\n      }\n    }\n}"
                },
                {
                    "name": "Login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: AuthFormComponent,\n  props: {\n    credentialsReceived: actionsData.credentialsReceived,\n    translations: formData.translations\n  }\n})"
                },
                {
                    "name": "Register",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: AuthFormComponent,\n  props: {\n    credentialsReceived: actionsData.credentialsReceived,\n    translations: formData.translations,\n    buttonText: 'register'\n  }\n})"
                }
            ],
            "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  selectRecipe: action('selectRecipe'),\n  changeSelectedCookbook: action('changeSelectedCookbook'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "EmptyList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      'meal-picker.title': 'Rezepet auswählen',\n      'meal-picker.cookbook': 'Kochbuch',\n      'meal-picker.filter': 'Suche',\n      'meal-picker.empty-cookbook': 'Das Kochbuch ist leer',\n      'meal-picker.empty-cookbook-add-recipe': 'Rezept hinzufügen'\n    }\n  },\n  cookbooks: [{id: '1', title: 'Kochbuch 1'}, {id: '2', title: 'Kochbuch 2'}],\n  preSelectedCookbookId: '2',\n  recipes: {\n    1: [\n      {\n        title: 'Menu 1',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      },\n      {\n        title: 'Menu 2',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      },\n      {\n        title: 'Menu 3',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      }\n    ],\n    2: [\n      {\n        title: 'Menu 1',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      },\n      {\n        title: 'Menu 2',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      },\n      {\n        title: 'Menu 3',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      }\n    ]\n  }\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: MealPickerComponent) => ({\n  component: MealPickerComponent,\n  props: args,\n})"
                }
            ],
            "src/app/features/meal-planer/components/schedule/schedule.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  dateChanged: action('dateChanged'),\n  addMeal: action('addMeal'),\n  removeMeal: action('removeMeal')\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      'weekday-short.monday': 'Mo',\n      'weekday-short.tuesday': 'Di',\n      'weekday-short.wednesday': 'Mi',\n      'weekday-short.thursday': 'Do',\n      'weekday-short.friday': 'Fr',\n      'weekday-short.saturday': 'Sa',\n      'weekday-short.sunday': 'So',\n      'meal-planer.breakfast': 'Frühstück',\n      'meal-planer.lunch': 'Mittagessen',\n      'meal-planer.dinner': 'Abendessen',\n      'meal-planer-add.lunch': 'Mittagessen hinzufügen',\n      'meal-planer-add.dinner': 'Abendessen hinzufügen',\n    }\n  },\n  selectedDate: new Date(),\n  dayPlan: {\n    breakfast: [{\n      id: 'id',\n      type: 'breakfast',\n      date: '',\n      recipe: {\n        title: 'Menu',\n        cookbookId: 'cookbook',\n        ingredients: [],\n        url: 'https://google.com',\n      },\n    }]\n  }\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: ScheduleComponent) => ({\n  component: ScheduleComponent,\n  props: args,\n})"
                }
            ],
            "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  choseIngredients: action('choseIngredients'),\n  changeSelectedCookbook: action('back'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      'unit.kg': 'kg',\n      'unit.tableSpoon': 'EL',\n      'ingredients-picker.back': 'zurück',\n      'ingredients-picker.shopping-list': 'Einkaufsliste',\n      'ingredients-picker.button': 'Hinzufügen'\n    }\n  },\n  currentLanguage: 'de',\n  shoppingLists: [{id: '1', title: 'Shoppinglist 1'}, {id: '2', title: 'Shoppinglist 1'}],\n  preSelectedShoppingListId: '1',\n  ingredientsList: [{\n      title: 'Zutat 1',\n      amount: 2,\n      unit: 'kg',\n      isStableFood: false,\n  },\n    {\n      title: 'Grudzutat',\n      amount: 2,\n      unit: 'tableSpoon',\n      isStableFood: true,\n    }]\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: IngredientsPickerComponent) => ({\n  component: IngredientsPickerComponent,\n  props: args,\n})"
                }
            ],
            "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  dateChanged: action('dateChanged'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n    }\n  },\n  selectedDate: new Date(),\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: ScheduleControllsComponent) => ({\n  component: ScheduleControllsComponent,\n  props: args,\n})"
                }
            ],
            "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  changeDayIndex: action('changeDayIndex'),\n}"
                },
                {
                    "name": "daysData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      'weekday-short.monday': 'Mo',\n      'weekday-short.tuesday': 'Di',\n      'weekday-short.wednesday': 'Mi',\n      'weekday-short.thursday': 'Do',\n      'weekday-short.friday': 'Fr',\n      'weekday-short.saturday': 'Sa',\n      'weekday-short.sunday': 'So',\n    }\n  },\n  currentLanguage: 'de',\n  selectedDayIndex: 0,\n  currentDayIndex: 0,\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "NotCurrentDaySelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: ScheduleDaysControllsComponent) => ({\n  component: ScheduleDaysControllsComponent,\n  props: args,\n})"
                }
            ],
            "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts": [
                {
                    "name": "actionsData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  itemDeleted: action('itemDeleted'),\n  listItemMoved: action('listItemMoved'),\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "taskData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                    "type": "literal type",
                    "defaultValue": "{\n  items: [\n    {id: '1', title: 'Mehl', amount: 1, unit: 'kg', shoppingList: '42'},\n    {id: '2', title: 'Zucker', amount: 50, unit: 'g', shoppingList: '42'},\n    {id: '3', title: 'Eier', amount: 1, unit: 'piece', shoppingList: '42'},\n    {id: '4', title: 'Slaz', amount: 5, unit: 'coffeeSpoon', shoppingList: '42'},\n  ],\n  translations: {\n    de: {\n      piece: '',\n      tableSpoon: 'Esslöffel',\n      coffeeSpoon: 'Kaffelöffel',\n      pinch: 'Prise',\n    }\n  }\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: ShoppingListComponent) => ({\n  component: ShoppingListComponent,\n  props: args,\n})"
                }
            ],
            "src/app/core/store/index.ts": [
                {
                    "name": "activeDayPlan",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => {\n    const currentMealPlaner = mealPlanerState.activeMealPlaner;\n    if (!currentMealPlaner) {\n      return null;\n    }\n    const currentMeals = mealPlanerState.meals[currentMealPlaner] as { [key: string]: DayPlan };\n    if (!currentMeals) {\n      return null;\n    }\n    const currentDayPlan = currentMeals[format(mealPlanerState.selectedDate, 'yyyy-MM-dd')];\n    if (!currentDayPlan) {\n      return null;\n    }\n    return currentDayPlan;\n  }\n)"
                },
                {
                    "name": "activeMealPlaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.mealPlaners.entities[mealPlanerState.activeMealPlaner || '']\n)"
                },
                {
                    "name": "activeMealPlanerId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.activeMealPlaner\n)"
                },
                {
                    "name": "activeShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists.entities[shoppingListState.activeShoppingList || '']\n)"
                },
                {
                    "name": "activeShoppingListId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "GlobalState",
                    "defaultValue": "{\n  appState: initialAppState,\n  cookbookState: initialCookbookState,\n  shoppingListState: initialShoppingListState,\n  mealPlanerState: initialMealPlanerState,\n}"
                },
                {
                    "name": "isActiveMealPlanerLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.activeMealPlaner\n)"
                },
                {
                    "name": "isActiveShoppingListLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.activeShoppingList\n)"
                },
                {
                    "name": "isLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => !!appState.user && !isJwtTokenExpired(appState.user.jwt)\n)"
                },
                {
                    "name": "isOffline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.isOffline\n)"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "MetaReducer[]",
                    "defaultValue": "[]"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "ActionReducerMap<GlobalState>",
                    "defaultValue": "{\n  appState: appStateReducer,\n  shoppingListState: shoppingListReducers,\n  cookbookState: cookbookStateReducer,\n  mealPlanerState: mealPlanerStateReducers,\n}"
                },
                {
                    "name": "selectActiveCookbookId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.activeCookbookId)"
                },
                {
                    "name": "selectActiveCookbookRecipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  (state: GlobalState) => state.cookbookState,\n  (cookbookState: CookbookState) => {\n    if (!cookbookState.activeCookbookId) {\n      return undefined;\n    }\n\n    return cookbookState.recipes[cookbookState.activeCookbookId];\n  })"
                },
                {
                    "name": "selectAppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<GlobalState, AppState>('appState')"
                },
                {
                    "name": "selectCookbooks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.cookbooks)"
                },
                {
                    "name": "selectCookbookState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<GlobalState, CookbookState>('cookbookState')"
                },
                {
                    "name": "selectCurrentLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.language\n)"
                },
                {
                    "name": "selectCurrentShoppingListEntity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => {\n    if (!shoppingListState.activeShoppingList) {\n      return shoppingListItemAdapter.getInitialState();\n    }\n\n    const items = shoppingListState.shoppingListItems[shoppingListState.activeShoppingList];\n\n    if (!items) {\n      return shoppingListItemAdapter.getInitialState();\n    }\n\n    return items;\n  },\n)"
                },
                {
                    "name": "selectCurrentShoppingListItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "shoppingListItemAdapter.getSelectors(selectCurrentShoppingListEntity).selectAll"
                },
                {
                    "name": "selectedCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => {\n    if (cookbookState.activeCookbookId) {\n      return cookbookState.cookbooks.find((cookbook: Cookbook) => cookbook.id === cookbookState.activeCookbookId);\n    } else {\n      return cookbookState.cookbooks[0];\n    }\n  })"
                },
                {
                    "name": "selectedRecipe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "(selectedCookbookId: string, recipeId: string) => createSelector(\n  (state: GlobalState) => state.cookbookState,\n  (cookbookState: CookbookState) => {\n    const recipesOfCookbook = cookbookState.recipes[selectedCookbookId];\n    if (recipesOfCookbook) {\n      return recipesOfCookbook.find((recipe: Recipe) => recipe.id === recipeId);\n    }\n    return undefined;\n  })"
                },
                {
                    "name": "selectMealPlanerEntity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.mealPlaners\n)"
                },
                {
                    "name": "selectMealPlaners",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "mealPlanerAdapter.getSelectors(selectMealPlanerEntity).selectAll"
                },
                {
                    "name": "selectMealPlanerState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<GlobalState, MealPlanerState>('mealPlanerState')"
                },
                {
                    "name": "selectRecipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectCookbookState,\n  (cookbookState: CookbookState) => cookbookState.recipes\n)"
                },
                {
                    "name": "selectRequestedUrlBeforeLoginWasRequired",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.requestedUrlBeforeLoginWasRequired\n)"
                },
                {
                    "name": "selectSelectedDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectMealPlanerState,\n  (mealPlanerState: MealPlanerState) => mealPlanerState.selectedDate)"
                },
                {
                    "name": "selectShoppingLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "shoppingListAdapter.getSelectors(selectShoppingListsEntity).selectAll"
                },
                {
                    "name": "selectShoppingListsEntity",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectShoppingListState,\n  (shoppingListState: ShoppingListState) => shoppingListState.shoppingLists\n)"
                },
                {
                    "name": "selectShoppingListState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<GlobalState, ShoppingListState>('shoppingListState')"
                },
                {
                    "name": "selectTranslations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.i18n || {}\n)"
                },
                {
                    "name": "selectUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user\n)"
                },
                {
                    "name": "selectUserID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/index.ts",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAppState,\n  (appState: AppState) => appState.user?.id,\n)"
                }
            ],
            "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts": [
                {
                    "name": "addMeal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Container] Add Meal',\n  props<{ optimisticId: string, recipe: Recipe, mealType: MealType, shoppingListItems: BasicShoppingListItem[] }>()\n)"
                },
                {
                    "name": "changeSelectedMealPlaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Container] Change Selected Meal Planer',\n  props<{ mealPlanerId: string }>()\n)"
                },
                {
                    "name": "createMealPlaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Container] Add Meal Planer',\n  props<{ title: string }>()\n)"
                },
                {
                    "name": "deleteMealPlaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Container] Delete Meal Planer',\n  props<{ mealPlaner: MealPlaner }>()\n)"
                },
                {
                    "name": "editMealPlaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Container] Edit Meal Planer',\n  props<{ mealPlaner: MealPlaner, changes: MealPlaner }>()\n)"
                },
                {
                    "name": "loadCookBooks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Container] Load Cookbooks'\n)"
                },
                {
                    "name": "loadMealPlaners",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Container] Load Meal Planers'\n)"
                },
                {
                    "name": "removeMeal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Container] Remove Meal',\n  props<{ meal: Meal }>()\n)"
                },
                {
                    "name": "selectedDateChanged",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Container] Selected Date change',\n  props<{ selectedDate: Date }>()\n)"
                },
                {
                    "name": "undoDeleteMealPlaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Container] Undo Delete Meal Planer',\n  props<{ mealPlaner: MealPlaner }>()\n)"
                },
                {
                    "name": "undoRemoveMeal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Container] Undo Delete Meal',\n  props<{ meal: Meal }>()\n)"
                }
            ],
            "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts": [
                {
                    "name": "addMealsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Add Meal Failure',\n  props<{ mealType: MealType, recipe: Recipe, optimisticId: string }>()\n)"
                },
                {
                    "name": "addMealsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Add Meal Success',\n  props<{ mealApi: Meal, optimisticId: string }>()\n)"
                },
                {
                    "name": "createMealPlanerFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Create Meal Planer Failure',\n  props<{ title: string }>()\n)"
                },
                {
                    "name": "createMealPlanerSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Create Meal Planer Success',\n  props<{ mealPlaner: MealPlaner }>()\n)"
                },
                {
                    "name": "deleteMealPlanerFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Delete Meal Planer Failure',\n  props<{ mealPlaner: MealPlaner }>()\n)"
                },
                {
                    "name": "deleteMealPlanerSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Delete Meal Planer Success',\n  props<{ mealPlaner: MealPlaner }>()\n)"
                },
                {
                    "name": "editMealPlanerFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Edit Meal Planer Failure',\n  props<{ changes: MealPlaner, mealPlaner: MealPlaner }>()\n)"
                },
                {
                    "name": "editMealPlanerSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Edit Meal Planer Success',\n  props<{ mealPlaner: MealPlaner }>()\n)"
                },
                {
                    "name": "loadMealPlanersFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Meal Planer API] Load Meal Planers Failure')"
                },
                {
                    "name": "loadMealPlanersSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Load Meal Planers Success',\n  props<{ mealPlaners: MealPlaner[] }>()\n)"
                },
                {
                    "name": "loadMealsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Load Meals Failure'\n)"
                },
                {
                    "name": "loadMealsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Load Meals Success',\n  props<{ mealPlanerId: string, date: Date, dayPlan: DayPlan }>()\n)"
                },
                {
                    "name": "removeMealsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Remove Meal Failure',\n  props<{ meal: Meal }>()\n)"
                },
                {
                    "name": "removeMealsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer API] Remove Meal Success',\n)"
                }
            ],
            "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts": [
                {
                    "name": "addShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Add Shopping List Items',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>()\n)"
                },
                {
                    "name": "changeShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Shopping List Container] Change Shopping List', props<{ shoppingListId: string }>())"
                },
                {
                    "name": "createShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Create new ShoppingList',\n  props<{ title: string }>()\n)"
                },
                {
                    "name": "deleteShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Delete shopping list',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "deleteShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Delete Shopping List Items',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "editShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Edit ShoppingList',\n  props<{ shoppingList: ShoppingList, changes: ShoppingList }>()\n)"
                },
                {
                    "name": "loadShoppingLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Shopping List Container] Load Shopping Lists')"
                },
                {
                    "name": "moveShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Move Shopping List Items',\n  props<{ shoppingListId: string, currentIndex: number, previousIndex: number }>()\n)"
                },
                {
                    "name": "undoDeleteShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] Undo Delete shopping',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "undoDeleteShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Container] unToggle Shopping List Items',\n  props<{ shoppingListItem: ShoppingListItem}>()\n)"
                }
            ],
            "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts": [
                {
                    "name": "addShoppingListItemFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Item Failure',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>()\n)"
                },
                {
                    "name": "addShoppingListItemsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Items Failure',\n)"
                },
                {
                    "name": "addShoppingListItemsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Items Success',\n  props<{ shoppingListItems: ShoppingListItem[] }>()\n)"
                },
                {
                    "name": "addShoppingListItemSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Add Shopping List Item Success',\n  props<{ optimisticId: string, shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "createShoppingListFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Create Shopping List  Failure',\n  props<{ title: string }>()\n)"
                },
                {
                    "name": "createShoppingListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Create Shopping List Success',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "deleteShoppingListFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List  Failure',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "deleteShoppingListItemFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Failure',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "deleteShoppingListItemSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Items Success',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "deleteShoppingListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Delete Shopping List Success',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "editShoppingListFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Edit Shopping List  Failure',\n  props<{ shoppingList: ShoppingList, changes: ShoppingList }>()\n)"
                },
                {
                    "name": "editShoppingListSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Edit Shopping List Success',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "loadShoppingListItemsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Shopping List API] Load Shopping List Items Failure')"
                },
                {
                    "name": "loadShoppingListItemsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Load Shopping List Items Success',\n  props<{ shoppingListId: string, shoppingListItems: ShoppingListItem[] }>()\n)"
                },
                {
                    "name": "loadShoppingListsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Shopping List API] Load Shopping Lists Failure')"
                },
                {
                    "name": "loadShoppingListsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Load Shopping Lists Success',\n  props<{ shoppingLists: ShoppingList[] }>()\n)"
                },
                {
                    "name": "updateShoppingListItemFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Update Shopping List Items Failure',\n  props<{ shoppingListItems: ShoppingListItem[] }>()\n)"
                },
                {
                    "name": "updateShoppingListItemSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Update Shopping List Items Success'\n)"
                }
            ],
            "src/app/core/store/reducers/app-state.reducers.ts": [
                {
                    "name": "appStateReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/reducers/app-state.reducers.ts",
                    "type": "",
                    "defaultValue": "createReducer<AppState, Action>(\n  initialAppState,\n  on(\n    I18nApiActions.getI18nSuccess,\n    (state, {i18n}: { i18n: I18n }) => {\n      return {\n        ...state,\n        i18n: {\n          ...state.i18n,\n          ...i18n\n        }\n      };\n    }),\n  on(\n    AuthApiActions.refreshTokenSuccess,\n    (state, {user}: { user: User }) => {\n      return {\n        ...state,\n        user: {\n          ...user\n        }\n      };\n    }),\n  on(\n    AuthApiActions.refreshTokenFailed,\n    ErrorInterceptorActions.logout,\n    AuthApiActions.deleteAccountSuccess,\n    NavigationActions.logout,\n    (state) => {\n      return {\n        ...state,\n        user: null\n      };\n    }),\n  on(\n    AuthApiActions.loginSuccess,\n    AuthApiActions.registerSuccess,\n    AuthApiActions.restPasswordSuccess,\n    (state, {user}: { user: User }) => {\n      return {\n        ...state,\n        user: {\n          ...user\n        },\n      };\n    }),\n  on(\n    AuthenticatedGuardActions.setRequestedUrlBeforeLoginWasRequired,\n    (state, {url}: { url: string }) => {\n      return {\n        ...state,\n        requestedUrlBeforeLoginWasRequired: url\n      };\n    }),\n  on(\n    AppInitializationActions.setLanguage,\n    NavigationActions.changeLanguage,\n    (state: AppState, {language}: { language: Language }) => {\n      return {\n        ...state,\n        language,\n      };\n    }),\n  on(\n    SyncServiceActions.setOfflineMode,\n    (state: AppState, {isOffline}: { isOffline: boolean }) => {\n      return {\n        ...state,\n        isOffline\n      };\n    })\n)"
                }
            ],
            "src/app/core/components/teaser/teaser.stories.ts": [
                {
                    "name": "betaTeaserData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/teaser/teaser.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  currentLang: 'de',\n  translations: {\n    de: {\n      'beta.teaser': 'Beta Teaser',\n    }\n  }\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/teaser/teaser.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/teaser/teaser.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: TeaserComponent) => ({\n  component: TeaserComponent,\n  props: args,\n})"
                }
            ],
            "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts": [
                {
                    "name": "bulkUpdateShoppingListItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Effect] Bulk Update ShoppingList',\n  props<{ shoppingListId: string, shoppingListItems: ShoppingListItem[] }>()\n)"
                },
                {
                    "name": "registerShoppingListItemDeleteForSync",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Effect] Offline Mode: DELETE Shopping List Item',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "registerShoppingListItemDeleteForSyncSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Effect] Offline Mode: DELETE Shopping List Item Registered For Sync Successfully'\n)"
                },
                {
                    "name": "registerShoppingListItemPostForSync",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Effect] Offline Mode: POST Shopping List Item',\n  props<{ basicShoppingListItem: BasicShoppingListItem, optimisticId: string}>()\n)"
                },
                {
                    "name": "registerShoppingListItemPostForSyncSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Effect] Offline Mode: POST Shopping List Item Registered For Sync Successfully'\n)"
                },
                {
                    "name": "registerShoppingListItemUpdatesForSync",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Effect] Offline Mode: UPDATE Shopping List Item',\n  props<{ shoppingListItems: ShoppingListItem[] }>()\n)"
                },
                {
                    "name": "registerShoppingListItemUpdatesForSyncSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Effect] Offline Mode: UPDATE Shopping List Item Registered For Sync Successfully'\n)"
                },
                {
                    "name": "retryAddShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Retry add Shopping List Items',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>()\n)"
                },
                {
                    "name": "retryCreateShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Retry create Shopping list ',\n  props<{ title: string }>()\n)"
                },
                {
                    "name": "retryDeleteShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Retry delete Shopping List',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "retryDeleteShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Retry delete Shopping List Items',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "retryEditShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Retry edit Shopping List',\n  props<{ shoppingList: ShoppingList, changes: ShoppingList }>()\n)"
                },
                {
                    "name": "retryUpdateShoppingListItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Retry update Shopping List Items',\n  props<{ shoppingListItems: ShoppingListItem[] }>()\n)"
                },
                {
                    "name": "setActiveShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List Effect] Set Active ShoppingList',\n  props<{ shoppingListId: string }>()\n)"
                },
                {
                    "name": "undoOptimisticAddShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Undo Optimistic add Shopping List Items',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>()\n)"
                },
                {
                    "name": "undoOptimisticDeleteShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Undo Optimistic delete Shopping',\n  props<{ shoppingList: ShoppingList }>()\n)"
                },
                {
                    "name": "undoOptimisticDeleteShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Undo Optimistic delete Shopping List Items Success',\n  props<{ shoppingListItem: ShoppingListItem }>()\n)"
                },
                {
                    "name": "undoOptimisticEditShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Shopping List API] Undo Optimistic edit Shopping',\n  props<{ shoppingList: ShoppingList }>()\n)"
                }
            ],
            "src/app/core/store/actions/navigation.actions.ts": [
                {
                    "name": "changeLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/navigation.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Navigation Actions] Change Language', props<{ language: Language }>())"
                },
                {
                    "name": "logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/navigation.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Navigation Action] Logout')"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/features/cookbook/store/reducers/cookbook-state.reducers.ts": [
                {
                    "name": "cookbookStateReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/reducers/cookbook-state.reducers.ts",
                    "type": "",
                    "defaultValue": "createReducer<CookbookState, Action>(\n  initialCookbookState,\n  on(CookbookApiActions.loadCookbookSuccess,\n    (state: CookbookState, {cookbooks}: { cookbooks: Cookbook[] }) => ({\n      ...state,\n      cookbooks\n    })\n  ),\n  on(\n    CookbookApiActions.loadRecipesSuccess,\n    CookbookApiActions.loadSpecificRecipesSuccess,\n    (state: CookbookState, {cookbookId, recipes}: LoadRecipesSuccessAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state?.recipes,\n        [cookbookId]: recipes\n      }\n    };\n  }),\n  on(RecipeContainerActions.createRecipe, (state: CookbookState, {optimisticId, recipeToSave}: CreateRecipeAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipeToSave.cookbookId]: [...copyOrCreateArray(state.recipes, recipeToSave.cookbookId), {...recipeToSave, id: optimisticId}]\n      }\n    };\n  }),\n  on(RecipeApiActions.createRecipeSuccess, (state: CookbookState, {optimisticId, recipe}: CreateRecipeSuccessAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: state.recipes[recipe.cookbookId]?.map((item: Recipe) => {\n          return item.id === optimisticId ? recipe : item;\n        })\n      }\n    };\n  }),\n  on(RecipeApiActions.createRecipeFailure, (state: CookbookState, {optimisticId, cookbookId}: CreateRecipeSuccessFailureAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [cookbookId]: state.recipes[cookbookId].filter((recipe: Recipe) => recipe.id !== optimisticId)\n      }\n    };\n  }),\n  on(RecipeApiActions.editRecipeSuccess, (state: CookbookState, {recipe}: EditRecipeSuccessAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: state.recipes[recipe.cookbookId].map((item: Recipe) => {\n          return item.id === recipe.id ? recipe : item;\n        })\n      }\n    };\n  }),\n  on(CookbookContainerActions.deleteRecipeFromState, (state: CookbookState, {recipeToDelete}: DeleteRecipeFromStateAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipeToDelete.cookbookId]: state.recipes[recipeToDelete.cookbookId].filter((recipe: Recipe) => recipe.id !== recipeToDelete.id)\n      }\n    };\n  }),\n  on(CookbookApiActions.undoDeleteRecipeFromState, (state: CookbookState, {recipe}: UndoDeleteRecipeFromStateAction) => {\n    return {\n      ...state,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: addItemAlphabetically(recipe, state.recipes[recipe.cookbookId])\n      }\n    };\n  }),\n  on(CookbookContainerActions.selectCookbook, (state: CookbookState, {selectedCookbookId}: CookbookSelectedAction) => {\n    return {\n      ...state,\n      activeCookbookId: selectedCookbookId\n    };\n  }),\n  on(CookbookContainerActions.createCookbook, (state: CookbookState, {optimisticId, title}: CookbookCreatedAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks, {id: optimisticId, title}\n      ]\n    };\n  }),\n  on(CookbookApiActions.createCookbookSuccess, (state: CookbookState, {optimisticId, cookbook}: CookbookCreatedSuccessAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.map((item: Cookbook) => item.id === optimisticId ? cookbook : item)\n      ]\n    };\n  }),\n  on(CookbookApiActions.createCookbookFailure, (state: CookbookState, {optimisticId}: CookbookCreatedFailureAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.filter((item: Cookbook) => item.id !== optimisticId)\n      ]\n    };\n  }),\n  on(CookbookApiActions.editCookbookSuccess, (state: CookbookState, {cookbook}: CookbookEditedSuccessAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.map((item: Cookbook) => item.id === cookbook.id ? cookbook : item)\n      ]\n    };\n  }),\n  on(CookbookContainerActions.deleteCookbookFromState, (state: CookbookState, {cookbook}: CookbookDeletedFromStateAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...state.cookbooks.filter((item: Cookbook) => item.id !== cookbook.id)\n      ]\n    };\n  }),\n  on(CookbookApiActions.undoDeleteCookbookFromState, (state: CookbookState, {cookbook}: UndoCookbookDeletedFromStateAction) => {\n    return {\n      ...state,\n      cookbooks: [\n        ...addItemAlphabetically(cookbook, state.cookbooks)\n      ]\n    };\n  }),\n  on(RecipeApiActions.loadRecipeSuccess, (state: CookbookState, {recipe}: LoadRecipeSuccessAction) => {\n    return {\n      ...state,\n      activeCookbookId: recipe.cookbookId,\n      recipes: {\n        ...state.recipes,\n        [recipe.cookbookId]: addItemAlphabetically(recipe, state.recipes[recipe.cookbookId])\n      }\n    };\n  }),\n  on(CookbookApiActions.setActiveCookbookIdAsQueryParam, (state: CookbookState, {selectedCookbookId}: {selectedCookbookId: string}) => {\n    return {\n      ...state,\n      activeCookbookId: selectedCookbookId\n    };\n  }),\n)"
                }
            ],
            "src/app/features/cookbook/store/actions/cookbook-container.actions.ts": [
                {
                    "name": "copyIngredientsToShoppingList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[CookbookContainer]',\n  props<{ optimisticId: string, shoppingListItem: BasicShoppingListItem }>())"
                },
                {
                    "name": "copyRecipeToMealplaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[CookbookContainer]',\n  props<{ recipe: Recipe }>())"
                },
                {
                    "name": "createCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Create Cookbooks',\n  props<{ optimisticId: string, title: string }>()\n)"
                },
                {
                    "name": "deleteCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Delete Cookbooks',\n  props<{ cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "deleteCookbookFromState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Delete Cookbooks From State',\n  props<{ cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "deleteRecipe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Delete Recipe',\n  props<{ recipe: Recipe }>()\n)"
                },
                {
                    "name": "deleteRecipeFromState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Cookbook Container] Delete Recipe from State', props<{ recipeToDelete: Recipe }>())"
                },
                {
                    "name": "editCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Edit Cookbooks',\n  props<{ cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "loadCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Cookbook Container] Load Cookbooks')"
                },
                {
                    "name": "loadRecipes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Cookbook Container] Get Recipes')"
                },
                {
                    "name": "loadShoppingLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Cookbook Container] Load ShoppingLists from Cookbook Container')"
                },
                {
                    "name": "selectCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Select Cookbook',\n  props<{ selectedCookbookId: string }>()\n)"
                }
            ],
            "src/app/features/cookbook/store/actions/cookbook-api.actions.ts": [
                {
                    "name": "createCookbookFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[createCookbook Effect] Create Cookbooks Failure',\n  props<{ optimisticId: string }>()\n)"
                },
                {
                    "name": "createCookbookSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[createCookbook Effect] Create Cookbooks Success',\n  props<{ optimisticId: string, cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "deleteCookbookSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[deleteCookbook Effect] Delete Cookbooks Success',\n  props<{ cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "deleteRecipeFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[DeleteRecipe Effect] Delete Recipe Failure')"
                },
                {
                    "name": "deleteRecipeSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[DeleteRecipe Effect] Delete Recipe Success',\n  props<{ deletedRecipe: Recipe }>()\n)"
                },
                {
                    "name": "editCookbookFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[editCookbook Effect] Edit Cookbooks Failure')"
                },
                {
                    "name": "editCookbookSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[editCookbook Effect] Edit Cookbooks Success',\n  props<{ cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "loadCookbookFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[loadCookbook Effect] Load Cookbooks Failure')"
                },
                {
                    "name": "loadCookbookSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[loadCookbook Effect] Load Cookbooks Success',\n  props<{ cookbooks: Cookbook[] }>()\n)"
                },
                {
                    "name": "loadRecipesFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[LoadRecipe Effect] Get Recipes Failure')"
                },
                {
                    "name": "loadRecipesSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[LoadRecipe Effect] Get Recipes Success',\n  props<{ cookbookId: string, recipes: Recipe[] }>()\n)"
                },
                {
                    "name": "loadSpecificRecipesFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[LoadRecipe Effect] Get Specific Recipes Failure')"
                },
                {
                    "name": "loadSpecificRecipesSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[LoadRecipe Effect] Get Specific Recipes Success',\n  props<{ cookbookId: string, recipes: Recipe[] }>()\n)"
                },
                {
                    "name": "setActiveCookbookIdAsQueryParam",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[ChooseActiveCookbookId Effect] Set Active CookbookId As QueryParam',\n  props<{ selectedCookbookId: string }>()\n)"
                },
                {
                    "name": "undoDeleteCookbookFromState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Effect] Undo Delete Cookbooks From State',\n  props<{ cookbook: Cookbook }>()\n)"
                },
                {
                    "name": "undoDeleteRecipeFromState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[DeleteRecipe Effect] Undo delete Recipe from State',\n  props<{ recipe: Recipe }>())"
                }
            ],
            "src/app/features/cookbook/store/actions/recipe-container.actions.ts": [
                {
                    "name": "createRecipe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/recipe-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Create Recipe',\n  props<{ optimisticId: string, recipeToSave: Recipe }>()\n)"
                },
                {
                    "name": "editRecipe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/recipe-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Cookbook Container] Edit Recipe',\n  props<{ recipeToEdit: Recipe }>()\n)"
                },
                {
                    "name": "loadRecipe",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/recipe-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Recipe Container] Get Recipe', props<{ id: string }>())"
                }
            ],
            "src/app/features/cookbook/store/actions/recipe-api.actions.ts": [
                {
                    "name": "createRecipeFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[CreateRecipe Effect] Create Recipe Failure',\n  props<{ optimisticId: string, cookbookId: string }>())"
                },
                {
                    "name": "createRecipeSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[CreateRecipe Effect] Create Recipe Success',\n  props<{ optimisticId: string, recipe: Recipe }>()\n)"
                },
                {
                    "name": "editRecipeFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[EditRecipe Effect] Edit Recipe Failure')"
                },
                {
                    "name": "editRecipeSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[EditRecipe Effect] Edit Recipe Success',\n  props<{ recipe: Recipe }>()\n)"
                },
                {
                    "name": "loadRecipeFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Recipe Api] Load Recipe Failure')"
                },
                {
                    "name": "loadRecipeSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Recipe Api] Load Recipe Success', props<{recipe: Recipe}>())"
                }
            ],
            "src/app/shared/shared.module.ts": [
                {
                    "name": "declarations",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/shared.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  ButtonComponent,\n  InputComponent,\n  SelectComponent,\n  ListHeaderComponent,\n  ListPickerDialogComponent,\n  EditListDialogComponent,\n  TranslatePipe,\n  ButtonLinkComponent,\n]"
                }
            ],
            "src/app/shared/components/edit-list-dialog/edit-list-dialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/edit-list-dialog/edit-list-dialog.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "listData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/edit-list-dialog/edit-list-dialog.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  linkText: 'Primary',\n  buttonType: 'button',\n  isDisabled: false,\n  hasErrors: false,\n  color: 'primary',\n  e2eTestName: 'buttonTest',\n  iconLeft: '',\n  iconRight: '',\n  clicked: action('clicked')\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/edit-list-dialog/edit-list-dialog.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: EditListDialogComponent) => ({\n  component: EditListDialogComponent,\n  props: args,\n  template: `<app-edit-list-dialog>Test</app-edit-list-dialog>`,\n})"
                }
            ],
            "src/app/shared/components/input/input.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "inputData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  isDisabled: false,\n  e2eTestName: 'test',\n  label: 'Label',\n  errors: [],\n  placeholder: 'Placeholder',\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: InputComponent) => ({\n  component: InputComponent,\n  props: args,\n})"
                },
                {
                    "name": "WithErros",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithoutLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/input/input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/shared/components/list-picker-dialog/list-picker-dialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-picker-dialog/list-picker-dialog.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "listData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-picker-dialog/list-picker-dialog.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  linkText: 'Primary',\n  buttonType: 'button',\n  isDisabled: false,\n  hasErrors: false,\n  color: 'primary',\n  e2eTestName: 'buttonTest',\n  iconLeft: '',\n  iconRight: '',\n  clicked: action('clicked')\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-picker-dialog/list-picker-dialog.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: ListPickerDialogComponent) => ({\n  component: ListPickerDialogComponent,\n  props: args,\n})"
                }
            ],
            "src/app/shared/components/list-header/list-header.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-header/list-header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DefaultTitle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-header/list-header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {\n    selectedList: {id: 'test', title: ''},\n    lists: [{id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}],\n    defaultTitle: 'Dafault Title',\n    addListLabel: 'Liste Hinufügen',\n    buttonLabel: 'Meine Listen'\n  }\n})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-header/list-header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {}\n})"
                },
                {
                    "name": "MultipleList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-header/list-header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {\n    selectedList: {id: 'test', title: 'My ShoppingList'},\n    lists: [{id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}, {id: 'test', title: 'My ShoppingList'}],\n    defaultTitle: 'Dafault Title',\n    addListLabel: 'Liste Hinufügen',\n    buttonLabel: 'Meine Listen'\n  }\n})"
                },
                {
                    "name": "OneList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-header/list-header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: ListHeaderComponent,\n  props: {\n    selectedList: {id: 'test', title: 'My ShoppingList'},\n    lists: [{id: 'test', title: 'My ShoppingList'}],\n    defaultTitle: 'Dafault Title',\n    addListLabel: 'Liste Hinufügen',\n    buttonLabel: 'Meine Listen'\n  }\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/components/list-header/list-header.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: ListHeaderComponent) => ({\n  component: ListHeaderComponent,\n  props: args,\n})"
                }
            ],
            "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: AddRecipeDialogComponent,\n  props: {}\n})"
                }
            ],
            "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "formData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n  translations: {\n    de: {\n      'shoppingList.addForm.amount': 'Menge',\n      'shoppingList.addForm.product': 'Zucker',\n      'shoppingList.addForm.piece': 'Stück',\n      'shoppingList.addForm.pack': 'Packung',\n      'shoppingList.addForm.addLabel': 'Hinzufügen',\n    }\n  },\n  currentLang: 'de',\n  itemAdded: action('itemAdded'),\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: ShoppingListFormComponent) => ({\n  component: ShoppingListFormComponent,\n  props: args,\n})"
                }
            ],
            "src/app/core/constants/constants.ts": [
                {
                    "name": "DEFAULT_LANGUAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "Language",
                    "defaultValue": "'de'"
                },
                {
                    "name": "DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "string",
                    "defaultValue": "'shopping-list'"
                },
                {
                    "name": "DELETION_DELAY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "number",
                    "defaultValue": "1500"
                },
                {
                    "name": "EMAIL_PATTERN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "",
                    "defaultValue": "/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/"
                },
                {
                    "name": "INPUT_DEBOUNCE_TIME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "number",
                    "defaultValue": "300"
                },
                {
                    "name": "REDIRECT_URL_WHEN_LOGOUT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "string",
                    "defaultValue": "'/'"
                },
                {
                    "name": "STORAGE_SELECTED_COOKBOOK_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "string",
                    "defaultValue": "'selectedCookbookId'"
                },
                {
                    "name": "STORAGE_SELECTED_SHOPPING_LIST_ID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "string",
                    "defaultValue": "'selectedShoppingListId'"
                },
                {
                    "name": "SUPPORTED_LANGUAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/constants/constants.ts",
                    "type": "",
                    "defaultValue": "StringUnion('de', 'en')"
                }
            ],
            "src/app/features/auth/store/actions/account-container.actions.ts": [
                {
                    "name": "deleteAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/account-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Account Container] Delete Account',\n  props<{ user: User }>())"
                }
            ],
            "src/app/features/auth/store/actions/auth-api.actions.ts": [
                {
                    "name": "deleteAccountFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Delete Account Failure', props<{ user: User }>())"
                },
                {
                    "name": "deleteAccountSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Delete Account Success', props<{}>())"
                },
                {
                    "name": "forgotPasswordFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Forgot Password Failure')"
                },
                {
                    "name": "forgotPasswordSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Forgot Password Success')"
                },
                {
                    "name": "loginFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth] Login Failure',  props<{ error: string }>())"
                },
                {
                    "name": "loginSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Login Success', props<{ user: User }>())"
                },
                {
                    "name": "logoutFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Logout Failure')"
                },
                {
                    "name": "logoutSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Logout Success')"
                },
                {
                    "name": "refreshTokenFailed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth App] Refresh Token Failed')"
                },
                {
                    "name": "refreshTokenSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Refresh Token Success', props<{ user: User }>())"
                },
                {
                    "name": "registerFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Register Failure', props<{ error: string }>())"
                },
                {
                    "name": "registerSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Register Success', props<{ user: User }>())"
                },
                {
                    "name": "restPasswordFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Rest Password Failure', props<{ error: string }>())"
                },
                {
                    "name": "restPasswordSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth API] Rest Password Success', props<{ user: User }>())"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  showBetaTeaser: false,\n  apiUrl: 'https://mealplaner.app/api',\n  authUrl: 'https://mealplaner.app/api',\n}"
                }
            ],
            "src/environments/environment.qa.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.qa.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  showBetaTeaser: true,\n  apiUrl: 'https://beta.mealplaner.app/api',\n  authUrl: 'https://beta.mealplaner.app/api',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  showBetaTeaser: false,\n  apiUrl: 'http://localhost:4200/api',\n  authUrl: 'http://localhost:4200',\n}"
                }
            ],
            "src/app/core/store/actions/i18n-api.actions.ts": [
                {
                    "name": "getI18n",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/i18n-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Initialize App] Get i18n')"
                },
                {
                    "name": "getI18nFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/i18n-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Initialize App] Get i18n Failure')"
                },
                {
                    "name": "getI18nSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/i18n-api.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Initialize App] Get i18n Success', props<{ i18n: I18n }>())"
                }
            ],
            "src/app/core/store/state/app-state.ts": [
                {
                    "name": "initialAppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/state/app-state.ts",
                    "type": "AppState",
                    "defaultValue": "{\n  language: DEFAULT_LANGUAGE,\n  i18n: null,\n  user: null,\n  requestedUrlBeforeLoginWasRequired: null,\n  isOffline: false,\n}"
                }
            ],
            "src/app/features/cookbook/store/state/cookbook-state.ts": [
                {
                    "name": "initialCookbookState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/cookbook/store/state/cookbook-state.ts",
                    "type": "CookbookState",
                    "defaultValue": "{\n  activeCookbookId: '',\n  cookbooks: [],\n  recipes: {}\n}"
                }
            ],
            "src/app/core/store/actions/app-initialization.actions.ts": [
                {
                    "name": "initialized",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/app-initialization.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[App Initialization] App Initialized')"
                },
                {
                    "name": "refreshToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/app-initialization.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[App Initialization] Refresh JWT Token')"
                },
                {
                    "name": "setLanguage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/app-initialization.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[App Initialization] Set Application Startup Language',\n  props<{ language: Language }>())"
                }
            ],
            "src/app/features/meal-planer/store/state/meal-planer-state.ts": [
                {
                    "name": "initialMealPlanerState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/state/meal-planer-state.ts",
                    "type": "MealPlanerState",
                    "defaultValue": "{\n  selectedDate: new Date(),\n  mealPlaners: mealPlanerAdapter.getInitialState(),\n  meals: {},\n  activeMealPlaner: undefined,\n}"
                },
                {
                    "name": "mealPlanerAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/state/meal-planer-state.ts",
                    "type": "",
                    "defaultValue": "createEntityAdapter<MealPlaner>({\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n})"
                }
            ],
            "src/app/features/shopping-list/store/state/shopping-list-state.ts": [
                {
                    "name": "initialShoppingListState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                    "type": "ShoppingListState",
                    "defaultValue": "{\n  shoppingLists: shoppingListAdapter.getInitialState(),\n  shoppingListItems: {},\n  activeShoppingList: undefined,\n}"
                },
                {
                    "name": "shoppingListAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                    "type": "",
                    "defaultValue": "createEntityAdapter<ShoppingList>({\n  sortComparer: (a, b) => a.title.localeCompare(b.title),\n})"
                },
                {
                    "name": "shoppingListItemAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                    "type": "",
                    "defaultValue": "createEntityAdapter<ShoppingListItem>({\n  sortComparer: ((a, b) => (b.order || Number.MAX_VALUE) - (a.order || Number.MAX_VALUE)),\n})"
                }
            ],
            "src/app/features/meal-planer/store/actions/add-meal-dialog.actions.ts": [
                {
                    "name": "loadCookbooks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/add-meal-dialog.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Add Meal Dialog] Load Cookbooks')"
                },
                {
                    "name": "loadRecipesForSelectedCookbook",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/add-meal-dialog.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Add Meal Dialog] Load Recipes for Selected Cookbook', props<{ id: string }>())"
                },
                {
                    "name": "loadShoppingLists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/add-meal-dialog.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Add Meal Dialog] Load ShoppingLists')"
                }
            ],
            "src/app/features/auth/store/actions/login-container.actions.ts": [
                {
                    "name": "login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/login-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Login Page] Login',\n  props<{ credentials: LoginCredentials }>())"
                }
            ],
            "src/app/core/store/actions/error-interceptor.actions.ts": [
                {
                    "name": "logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/error-interceptor.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Error Interceptor] Logout')"
                }
            ],
            "src/app/features/meal-planer/store/reducers/meal-paner-state.reducers.ts": [
                {
                    "name": "mealPlanerStateReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/reducers/meal-paner-state.reducers.ts",
                    "type": "",
                    "defaultValue": "createReducer<MealPlanerState, Action>(\n  initialMealPlanerState,\n  on(MealPlanerContainerActions.selectedDateChanged, (state: MealPlanerState, {selectedDate}: { selectedDate: Date }) => {\n    return {\n      ...state,\n      selectedDate\n    };\n  }),\n  on(\n    MealPlanerApiActions.loadMealPlanersSuccess,\n    (state: MealPlanerState, {mealPlaners}) => {\n      return {\n        ...state,\n        mealPlaners: mealPlanerAdapter.addMany(mealPlaners, state.mealPlaners),\n      };\n    }),\n  on(\n    MealPlanerEffectActions.setActiveMealPlaner,\n    MealPlanerContainerActions.changeSelectedMealPlaner,\n    (state: MealPlanerState, {mealPlanerId}) => {\n      return {\n        ...state,\n        activeMealPlaner: mealPlanerId || undefined,\n      };\n    }),\n  on(\n    MealPlanerApiActions.createMealPlanerSuccess,\n    (state: MealPlanerState, {mealPlaner}) => {\n      return {\n        ...state,\n        mealPlaners: mealPlanerAdapter.addOne(mealPlaner, state.mealPlaners),\n        meals: {\n          ...state.meals,\n          [mealPlaner.id]: {},\n        },\n        activeMealPlaner: mealPlaner.id,\n      };\n    }\n  ),\n  on(\n    MealPlanerContainerActions.editMealPlaner,\n    (state: MealPlanerState, {changes}) => {\n      return {\n        ...state,\n        mealPlaners: mealPlanerAdapter.updateOne({id: changes.id, changes}, state.mealPlaners),\n      };\n    }\n  ),\n  on(\n    MealPlanerEffectActions.undoOptimisticEditMealPlaner,\n    (state: MealPlanerState, {mealPlaner}) => {\n      return {\n        ...state,\n        mealPlaners: mealPlanerAdapter.updateOne({id: mealPlaner.id, changes: mealPlaner}, state.mealPlaners),\n      };\n    }\n  ),\n  on(\n    MealPlanerContainerActions.deleteMealPlaner,\n    (state: MealPlanerState, {mealPlaner}) => {\n      return {\n        ...state,\n        mealPlaners: mealPlanerAdapter.removeOne(mealPlaner.id, state.mealPlaners),\n      };\n    }\n  ),\n  on(\n    MealPlanerContainerActions.undoDeleteMealPlaner,\n    MealPlanerEffectActions.undoOptimisticDeleteMealPlaner,\n    (state: MealPlanerState, {mealPlaner}) => {\n      return {\n        ...state,\n        mealPlaners: mealPlanerAdapter.addOne(mealPlaner, state.mealPlaners),\n      };\n    }\n  ),\n  on(\n    MealPlanerApiActions.deleteMealPlanerSuccess,\n    (state: MealPlanerState, {mealPlaner}) => {\n      const copyMeals = {...state.meals};\n\n      if (copyMeals.hasOwnProperty(mealPlaner.id)) {\n        delete copyMeals[mealPlaner.id];\n      }\n\n      return {\n        ...state,\n        meals: copyMeals,\n      };\n    }\n  ),\n  on(MealPlanerApiActions.loadMealsSuccess,\n    (state: MealPlanerState, {date, dayPlan, mealPlanerId}) => {\n      return {\n        ...state,\n        meals: {\n          ...state.meals,\n          [mealPlanerId]: {\n            ...state.meals[mealPlanerId],\n            [format(date, 'yyyy-MM-dd')]: dayPlan\n          }\n        }\n      };\n    }\n  ),\n  on(MealPlanerContainerActions.addMeal,\n    (state: MealPlanerState, {optimisticId, mealType, recipe}) => {\n      if (!state.activeMealPlaner) {\n        return state;\n      }\n\n      const date = format(state.selectedDate, 'yyyy-MM-dd');\n\n      return {\n        ...state,\n        meals: {\n          ...state.meals,\n          [state.activeMealPlaner]: {\n            ...state.meals[state.activeMealPlaner],\n            [date]: {\n              ...state.meals[state.activeMealPlaner][date],\n              [mealType]: [{id: optimisticId, type: mealType, recipe, date}]\n            }\n          }\n        }\n      };\n    }\n  ),\n  on(MealPlanerContainerActions.removeMeal,\n    (state: MealPlanerState, {meal}) => {\n      if (!state.activeMealPlaner) {\n        return state;\n      }\n\n      const date = format(state.selectedDate, 'yyyy-MM-dd');\n      const copyDayPlan = {...state.meals[state.activeMealPlaner][date]};\n\n\n      if (copyDayPlan.hasOwnProperty(meal.type)) {\n        delete copyDayPlan[meal.type];\n      }\n\n      return {\n        ...state,\n        meals: {\n          ...state.meals,\n          [state.activeMealPlaner]: {\n            ...state.meals[state.activeMealPlaner],\n            [date]: copyDayPlan\n          }\n        }\n      };\n    }\n  ),\n  on(MealPlanerApiActions.addMealsSuccess,\n    (state: MealPlanerState, {optimisticId, mealApi}) => {\n      if (!state.activeMealPlaner) {\n        return state;\n      }\n\n      const date = format(state.selectedDate, 'yyyy-MM-dd');\n\n      return {\n        ...state,\n        meals: {\n          ...state.meals,\n          [state.activeMealPlaner]: {\n            ...state.meals[state.activeMealPlaner],\n            [date]: {\n              ...state.meals[state.activeMealPlaner][date],\n              [mealApi.type]: state.meals[state.activeMealPlaner][date][mealApi.type].map(meal => {\n                return meal.id === optimisticId ? {...meal, id: mealApi.id} : meal;\n              })\n            }\n          }\n        }\n      };\n    }\n  ),\n  on(MealPlanerEffectActions.undoOptimisticAddMeal,\n    (state: MealPlanerState, {optimisticId, mealType}) => {\n      if (!state.activeMealPlaner) {\n        return state;\n      }\n\n      const date = format(state.selectedDate, 'yyyy-MM-dd');\n\n      return {\n        ...state,\n        meals: {\n          ...state.meals,\n          [state.activeMealPlaner]: {\n            ...state.meals[state.activeMealPlaner],\n            [date]: {\n              ...state.meals[state.activeMealPlaner][date],\n              [mealType]: state.meals[state.activeMealPlaner][date][mealType].filter(meal => {\n                return meal.id !== optimisticId;\n              })\n            }\n          }\n        }\n      };\n    }\n  ),\n  on(MealPlanerContainerActions.undoRemoveMeal,\n    MealPlanerEffectActions.undoOptimisticRemoveMeal,\n    (state: MealPlanerState, {meal}) => {\n      if (!state.activeMealPlaner) {\n        return state;\n      }\n\n      const date = format(state.selectedDate, 'yyyy-MM-dd');\n\n      return {\n        ...state,\n        meals: {\n          ...state.meals,\n          [state.activeMealPlaner]: {\n            ...state.meals[state.activeMealPlaner],\n            [date]: {\n              ...state.meals[state.activeMealPlaner][date],\n              [meal.type]: [...(state.meals[state.activeMealPlaner][date][meal.type] || []), meal]\n            }\n          }\n        }\n      };\n    }\n  )\n)"
                }
            ],
            "src/app/core/components/not-found/not-found.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/not-found/not-found.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/components/not-found/not-found.stories.ts",
                    "type": "any",
                    "defaultValue": "(args: NotFoundComponent) => ({\n  component: NotFoundComponent,\n  props: args,\n})"
                }
            ],
            "src/app/features/auth/store/actions/login-service.actions.ts": [
                {
                    "name": "refreshToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/login-service.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth Service] Refresh Jwt Token')"
                }
            ],
            "src/app/features/auth/store/actions/register-container.actions.ts": [
                {
                    "name": "register",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/register-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Register Container] Register',\n  props<{ credentials: RegisterCredentials }>())"
                }
            ],
            "src/app/features/auth/store/actions/forgot-password-container.actions.ts": [
                {
                    "name": "requestEmail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/forgot-password-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Forgot Password Container] Request Reset Email',\n  props<{ email: string }>())"
                }
            ],
            "src/app/features/auth/store/actions/reset-password-container.actions.ts": [
                {
                    "name": "resetPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/reset-password-container.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Reset Password Container] Reset Password',\n  props<{ password: string, resetPasswordToken: string }>())"
                }
            ],
            "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts": [
                {
                    "name": "retryAddMeal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Effects] Retry Add Meal',\n  props<{ mealType: MealType, recipe: Recipe, optimisticId: string }>()\n)"
                },
                {
                    "name": "retryCreateMealPlaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Effects] Retry Create Meal Planer',\n  props<{ title: string }>()\n)"
                },
                {
                    "name": "retryDeleteMealPlaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Effects] Retry Delete Meal Planer',\n  props<{ mealPlaner: MealPlaner }>()\n)"
                },
                {
                    "name": "retryEditMealPlaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Effects] Retry Edit Meal Planer',\n  props<{ mealPlaner: MealPlaner, changes: MealPlaner }>()\n)"
                },
                {
                    "name": "retryRemoveMeal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Effects] Retry Delete Meal',\n  props<{ meal: Meal }>()\n)"
                },
                {
                    "name": "setActiveMealPlaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Effects] Set Active Meal Planer',\n  props<{ mealPlanerId: string }>()\n)"
                },
                {
                    "name": "undoOptimisticAddMeal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Effects] Undo Optimistic Add Meal',\n  props<{ mealType: MealType, optimisticId: string }>()\n)"
                },
                {
                    "name": "undoOptimisticDeleteMealPlaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Effects] Undo Optimistic Delete Meal Planer',\n  props<{ mealPlaner: MealPlaner }>()\n)"
                },
                {
                    "name": "undoOptimisticEditMealPlaner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Effects] Undo Optimistic Edit Meal Planer',\n  props<{ mealPlaner: MealPlaner }>()\n)"
                },
                {
                    "name": "undoOptimisticRemoveMeal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Meal Planer Effects] Undo Optimistic Remove Meal',\n  props<{ meal: Meal }>()\n)"
                }
            ],
            "src/app/features/auth/store/actions/auth-effects.actions.ts": [
                {
                    "name": "retryDeleteAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/actions/auth-effects.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[Auth Effects] Retry Delete Account', props<{ user: User }>())"
                }
            ],
            "src/app/core/store/actions/sync-service.actions.ts": [
                {
                    "name": "setOfflineMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/sync-service.actions.ts",
                    "type": "",
                    "defaultValue": "createAction('[SyncService] Set Offline Mode', props<{isOffline: boolean}>())"
                }
            ],
            "src/app/core/store/actions/auth-guard.actions.ts": [
                {
                    "name": "setRequestedUrlBeforeLoginWasRequired",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/store/actions/auth-guard.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth Guard] Set Requested Url Before Login Was Required',\n  props<{ url: string }>())"
                }
            ],
            "src/app/features/shopping-list/store/reducers/shopping-list.reducers.ts": [
                {
                    "name": "shoppingListReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/shopping-list/store/reducers/shopping-list.reducers.ts",
                    "type": "",
                    "defaultValue": "createReducer<ShoppingListState, Action>(\n  initialShoppingListState,\n  on(\n    ShoppingListApiActions.loadShoppingListsSuccess,\n    (state: ShoppingListState, {shoppingLists}: LoadShoppingListsSuccessAction) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.addMany(shoppingLists, state.shoppingLists),\n      };\n    }),\n  on(\n    ShoppingListEffectActions.setActiveShoppingList,\n    ShoppingListContainerActions.changeShoppingList,\n    (state: ShoppingListState, {shoppingListId}: ChangeShoppingListAction | SetActiveShoppingListAction) => {\n      return {\n        ...state,\n        activeShoppingList: shoppingListId || undefined,\n      };\n    }),\n  on(\n    ShoppingListApiActions.loadShoppingListItemsSuccess,\n    (state: ShoppingListState, {shoppingListId, shoppingListItems}: LoadShoppingListItemsSuccessAction) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.updateOne({id: shoppingListId, changes: {isInitialized: true}}, state.shoppingLists),\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListId]: shoppingListItemAdapter.addMany(shoppingListItems, shoppingListItemAdapter.getInitialState()),\n        }\n      };\n    }),\n  on(\n    ShoppingListContainerActions.addShoppingListItem,\n    (state: ShoppingListState, {optimisticId, shoppingListItem}: AddShoppingListItemAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.addOne(\n            {id: optimisticId, ...shoppingListItem},\n            state.shoppingListItems[shoppingListItem.shoppingList])\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.addShoppingListItemsSuccess,\n    (state: ShoppingListState, {shoppingListItems}) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItems[0].shoppingList]: shoppingListItemAdapter.addMany(\n            shoppingListItems,\n            state.shoppingListItems[shoppingListItems[0].shoppingList])\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.addShoppingListItemSuccess,\n    (state: ShoppingListState, action: AddShoppingListItemSuccessAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [action.shoppingListItem.shoppingList]: shoppingListItemAdapter.updateOne(\n            {id: action.optimisticId, changes: action.shoppingListItem},\n            state.shoppingListItems[action.shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListEffectActions.undoOptimisticAddShoppingListItem,\n    (state: ShoppingListState, {optimisticId, shoppingListItem}) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.removeOne(\n            optimisticId,\n            state.shoppingListItems[shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.deleteShoppingListItem,\n    (state: ShoppingListState, {shoppingListItem}: DeleteShoppingListItemAction) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.removeOne(\n            shoppingListItem.id,\n            state.shoppingListItems[shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.undoDeleteShoppingListItem,\n    ShoppingListEffectActions.undoOptimisticDeleteShoppingListItem,\n    (state: ShoppingListState, {shoppingListItem}) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListItem.shoppingList]: shoppingListItemAdapter.addOne(\n            shoppingListItem,\n            state.shoppingListItems[shoppingListItem.shoppingList]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListEffectActions.bulkUpdateShoppingListItems,\n    (state: ShoppingListState, {shoppingListItems, shoppingListId}) => {\n      return {\n        ...state,\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingListId]: shoppingListItemAdapter.updateMany(\n            shoppingListItems.map(shoppingListItem => ({id: shoppingListItem.id, changes: shoppingListItem})),\n            state.shoppingListItems[shoppingListId]\n          )\n        }\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.createShoppingListSuccess,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.addOne(shoppingList, state.shoppingLists),\n        shoppingListItems: {\n          ...state.shoppingListItems,\n          [shoppingList.id]: shoppingListItemAdapter.getInitialState(),\n        },\n        activeShoppingList: shoppingList.id,\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.editShoppingList,\n    (state: ShoppingListState, {changes}) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.updateOne({id: changes.id, changes}, state.shoppingLists),\n      };\n    }\n  ),\n  on(\n    ShoppingListEffectActions.undoOptimisticEditShoppingList,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.updateOne({id: shoppingList.id, changes: shoppingList}, state.shoppingLists),\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.deleteShoppingList,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.removeOne(shoppingList.id, state.shoppingLists),\n      };\n    }\n  ),\n  on(\n    ShoppingListContainerActions.undoDeleteShoppingList,\n    ShoppingListEffectActions.undoOptimisticDeleteShoppingList,\n    (state: ShoppingListState, {shoppingList}) => {\n      return {\n        ...state,\n        shoppingLists: shoppingListAdapter.addOne(shoppingList, state.shoppingLists),\n      };\n    }\n  ),\n  on(\n    ShoppingListApiActions.deleteShoppingListSuccess,\n    (state: ShoppingListState, {shoppingList}) => {\n      const copyShoppingListsItems = {...state.shoppingListItems};\n\n      if (copyShoppingListsItems.hasOwnProperty(shoppingList.id)) {\n        delete copyShoppingListsItems[shoppingList.id];\n      }\n\n      return {\n        ...state,\n        shoppingListItems: copyShoppingListsItems,\n      };\n    }\n  )\n)"
                }
            ],
            "src/app/core/models/model.ts": [
                {
                    "name": "StringUnion",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/models/model.ts",
                    "type": "",
                    "defaultValue": "<UnionType extends string>(...values: UnionType[]) => {\n  Object.freeze(values);\n  const valueSet: Set<string> = new Set(values);\n\n  const guard = (value: string): value is UnionType => {\n    return valueSet.has(value);\n  };\n\n  const check = (value: string): UnionType => {\n    if (!guard(value)) {\n      const actual = JSON.stringify(value);\n      const expected = values.map(s => JSON.stringify(s)).join(' | ');\n      throw new TypeError(`Value '${actual}' is not assignable to type '${expected}'.`);\n    }\n    return value;\n  };\n\n  const unionNamespace = {guard, check, values};\n  return Object.freeze(unionNamespace as typeof unionNamespace & { type: UnionType });\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/helpers/helpers.ts": [
                {
                    "name": "addItemAlphabetically",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "newItem"
                        },
                        {
                            "name": "items"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "newItem",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "items",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "copyOrCreateArray",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "arrayMap"
                        },
                        {
                            "name": "arrayId"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "arrayMap",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "arrayId",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decodeJwtToken",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "token"
                        }
                    ],
                    "returnType": "JwtPayload",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFirstDateOfWeek",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "date"
                        }
                    ],
                    "returnType": "Date",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getWeekDayIndex",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "date"
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFormTouchedOrDirty",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "formGroup"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "formGroup",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isJwtTokenExpired",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "token"
                        },
                        {
                            "name": "now"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "now",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapI18nApiToI18nClient",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "i18nApi"
                        }
                    ],
                    "returnType": "I18nClient",
                    "jsdoctags": [
                        {
                            "name": "i18nApi",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapSelectedIngredientToBasicShoppingListItem",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "ingredient"
                        },
                        {
                            "name": "shoppingListId"
                        }
                    ],
                    "returnType": "BasicShoppingListItem",
                    "jsdoctags": [
                        {
                            "name": "ingredient",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shoppingListId",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapUserApiToUserClient",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "userApi"
                        }
                    ],
                    "returnType": "User",
                    "jsdoctags": [
                        {
                            "name": "userApi",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "moveItemInArray",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "array"
                        },
                        {
                            "name": "previousIndex"
                        },
                        {
                            "name": "currentIndex"
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "array",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "previousIndex",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentIndex",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stringBetweenChars",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "str"
                        },
                        {
                            "name": "charStart"
                        },
                        {
                            "name": "charEnd"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "str",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "charStart",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "charEnd",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "translateValidationErrors",
                    "file": "src/app/core/helpers/helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "formControl"
                        },
                        {
                            "name": "translatePipe"
                        },
                        {
                            "name": "translations"
                        },
                        {
                            "name": "language"
                        }
                    ],
                    "returnType": "string[]",
                    "jsdoctags": [
                        {
                            "name": "formControl",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "translatePipe",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "translations",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "language",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/app.initializer.ts": [
                {
                    "name": "appInitializer",
                    "file": "src/app/app.initializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "authService"
                        },
                        {
                            "name": "i18nService"
                        },
                        {
                            "name": "store"
                        },
                        {
                            "name": "actions$"
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "authService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "i18nService",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "store",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actions$",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBrowserLanguage",
                    "file": "src/app/app.initializer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "string"
                }
            ],
            "src/app/core/validators/custom-validators.validator.ts": [
                {
                    "name": "email",
                    "file": "src/app/core/validators/custom-validators.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "control"
                        }
                    ],
                    "returnType": "literal type | null",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/core/models/model.ts": [
                {
                    "name": "BasicShoppingListItem",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Omit<ShoppingListItem | \"id\" | \"order\">",
                    "file": "src/app/core/models/model.ts",
                    "description": "",
                    "kind": 161
                },
                {
                    "name": "DayPlan",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/models/model.ts",
                    "description": "",
                    "kind": 176
                },
                {
                    "name": "I18n",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/models/model.ts",
                    "description": "",
                    "kind": 165
                },
                {
                    "name": "Language",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/app/core/models/model.ts",
                    "description": "",
                    "kind": 164
                },
                {
                    "name": "MealType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"breakfast\" | \"lunch\" | \"dinner\"",
                    "file": "src/app/core/models/model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "SyncMethod",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"POST\" | \"PUT\" | \"DELETE\"",
                    "file": "src/app/core/models/model.ts",
                    "description": "",
                    "kind": 168
                },
                {
                    "name": "Unit",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"kg\" | \"g\" | \"tableSpoon\" | \"coffeeSpoon\" | \"l\" | \"dl\" | \"ml\" | \"pinch\" | \"piece\" | \"pack\"",
                    "file": "src/app/core/models/model.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/app/core/models/model-api.ts": [
                {
                    "name": "I18n",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/core/models/model-api.ts",
                    "description": "",
                    "kind": 165
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/features/auth/auth-routing.module.ts",
                "module": "AuthRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginContainerComponent",
                        "canActivate": [
                            "LoggedOutGuard"
                        ]
                    },
                    {
                        "path": "register",
                        "component": "RegisterContainerComponent",
                        "canActivate": [
                            "LoggedOutGuard"
                        ]
                    },
                    {
                        "path": "forgot",
                        "component": "ForgotPasswordContainerComponent",
                        "canActivate": [
                            "LoggedOutGuard"
                        ]
                    },
                    {
                        "path": "reset",
                        "component": "ResetPasswordContainerComponent",
                        "canActivate": [
                            "LoggedOutGuard"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "dist/mealplaner-gzip/shared/components/button-link/button-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/app.initializer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "appInitializer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.initializer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getBrowserLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "navigationData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/navigation/navigation.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/not-found/not-found.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/not-found/not-found.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/teaser/teaser.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeaserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/teaser/teaser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "betaTeaserData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/teaser/teaser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/teaser/teaser.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_LANGUAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_REDIRECT_URL_FOR_LOGGED_IN_USER",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETION_DELAY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMAIL_PATTERN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INPUT_DEBOUNCE_TIME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "REDIRECT_URL_WHEN_LOGOUT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORAGE_SELECTED_COOKBOOK_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORAGE_SELECTED_SHOPPING_LIST_ID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/constants/constants.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SUPPORTED_LANGUAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/authenticated.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthenticatedGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/logged-out.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "LoggedOutGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "addItemAlphabetically",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "copyOrCreateArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "decodeJwtToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getFirstDateOfWeek",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getWeekDayIndex",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isFormTouchedOrDirty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "isJwtTokenExpired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapI18nApiToI18nClient",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapSelectedIngredientToBasicShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "mapUserApiToUserClient",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "moveItemInArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "stringBetweenChars",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/helpers/helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "translateValidationErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/jwt.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "JwtInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddShoppingListItemAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddShoppingListItemSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChangeShoppingListAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookCreatedAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookCreatedFailureAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookCreatedSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookDeletedFromStateAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookEditedSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookSelectedAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateRecipeAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateRecipeSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateRecipeSuccessFailureAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteRecipeFromStateAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteRecipeSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteShoppingListItemAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EditRecipeSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadRecipesSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadRecipeSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadShoppingListItemsSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadShoppingListsSuccessAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginFailureAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SetActiveCookbookIdAsQueryParamAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SetActiveShoppingListAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SetActiveShoppingListAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SetLanguageAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListItemMovedAction",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UndoCookbookDeletedFromStateAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-action.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UndoDeleteRecipeFromStateAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Translations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserApi",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model-api.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserDetailApi",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddMealDialogEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AddShoppingListItemEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ArrayItemMovedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Cookbook",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CreateListDialogEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DeleteShoppingListItemEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EditListDialogEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Ingredient",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JwtPayload",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "JwtRefreshResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Link",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "List",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ListPickerDialogEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginCredentials",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Meal",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MealPlanerAddEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Recipe",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RecipeIngredient",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RecipeViewDialogEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterCredentials",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectedIngredient",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListItemDB",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListItemMovedEvent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SyncItem",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Translations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/model.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "StringUnion",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/custom-preloading-strategy.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomPreloadingStrategyService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/db.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DBService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/i18n.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "I18nService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/snackbar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SnackbarService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/sync.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SyncService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/app-initialization.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialized",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/app-initialization.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/app-initialization.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/auth-guard.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setRequestedUrlBeforeLoginWasRequired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/error-interceptor.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/i18n-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getI18n",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/i18n-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getI18nFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/i18n-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getI18nSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/navigation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changeLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/navigation.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/actions/sync-service.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setOfflineMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/effects/app.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GlobalState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activeDayPlan",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activeMealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activeMealPlanerId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activeShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "activeShoppingListId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isActiveMealPlanerLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isActiveShoppingListLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isOffline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveCookbookId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveCookbookRecipes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCookbooks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCookbookState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentLanguage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentShoppingListEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentShoppingListItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectedCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectedRecipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMealPlanerEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMealPlaners",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMealPlanerState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRecipes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRequestedUrlBeforeLoginWasRequired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShoppingLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShoppingListsEntity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectShoppingListState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTranslations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/reducers/app-state.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appStateReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/app-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/store/state/app-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/validators/custom-validators.validator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "email",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/auth-form/auth-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/auth-form/auth-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Register",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/containers/account-container/account-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/containers/forgot-password-container/forgot-password-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/containers/login-container/login-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/containers/register-container/register-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/containers/reset-password-container/reset-password-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/pages/account-page/account-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/pages/delete-account-confirmation-dialog-page/delete-account-confirmation-dialog-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DeleteAccountConfirmationDialogPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/pages/forgot-password-page/forgot-password-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/pages/login-page/login-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/pages/regsiter-page/register-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/pages/reset-password-page/reset-password-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/account-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteAccountFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteAccountSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "forgotPasswordFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "forgotPasswordSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logoutFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logoutSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshTokenFailed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshTokenSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "restPasswordFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "restPasswordSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/auth-effects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "retryDeleteAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/forgot-password-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "requestEmail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/login-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/login-service.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/register-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "register",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/actions/reset-password-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/effects/auth-api.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthApiEffects",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddRecipeDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/add-recipe-dialog/add-recipe-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/recipe-list/recipe-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/components/recipe-list/recipe-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/containers/cookbook-container/cookbook-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CookbookContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/containers/recipe-container/recipe-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipeContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/pages/cookbook-page/cookbook-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CookbookPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/pages/recipe-page/recipe-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RecipePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/services/cookbook.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CookbookService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/services/recipe.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RecipeService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createCookbookFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createCookbookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteCookbookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteRecipeFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteRecipeSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editCookbookFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editCookbookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCookbookFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCookbookSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRecipesFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRecipesSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadSpecificRecipesFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadSpecificRecipesSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setActiveCookbookIdAsQueryParam",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoDeleteCookbookFromState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoDeleteRecipeFromState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "copyIngredientsToShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "copyRecipeToMealplaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteCookbookFromState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteRecipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteRecipeFromState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRecipes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/cookbook-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createRecipeFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createRecipeSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editRecipeFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editRecipeSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRecipeFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/recipe-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRecipeSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/recipe-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createRecipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/recipe-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editRecipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/actions/recipe-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRecipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/effects/cookbook.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CookbookEffects",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/reducers/cookbook-state.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cookbookStateReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/state/cookbook-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CookbookState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/cookbook/store/state/cookbook-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialCookbookState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IngredientsPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/ingredients-picker/ingredients-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/meal-picker/meal-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MealPickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/meal-picker/meal-picker.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule-controlls/schedule-controlls.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleControllsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule-controlls/schedule-controls.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controlls.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleDaysControllsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "daysData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NotCurrentDaySelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule-days-controlls/schedule-days-controls.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule/schedule.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScheduleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/components/schedule/schedule.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/containers/add-meal-dialog/add-meal-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddMealDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/containers/mealplaner-container/mealplaner-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MealplanerContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/pages/add-meal-dialog-page/add-meal-dialog-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddMealDialogPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/pages/mealplaner-page/mealplaner-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MealplanerPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/services/meal-planer.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MealPlanerService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/add-meal-dialog.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCookbooks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/add-meal-dialog.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadRecipesForSelectedCookbook",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/add-meal-dialog.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addMealsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addMealsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMealPlanerFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMealPlanerSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteMealPlanerFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteMealPlanerSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editMealPlanerFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editMealPlanerSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadMealPlanersFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadMealPlanersSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadMealsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadMealsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeMealsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeMealsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addMeal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changeSelectedMealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createMealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteMealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editMealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadCookBooks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadMealPlaners",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "removeMeal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectedDateChanged",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoDeleteMealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoRemoveMeal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "retryAddMeal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "retryCreateMealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "retryDeleteMealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "retryEditMealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "retryRemoveMeal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setActiveMealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoOptimisticAddMeal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoOptimisticDeleteMealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoOptimisticEditMealPlaner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/actions/meal-planer-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoOptimisticRemoveMeal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/effects/meal-planers.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MealPlanersEffects",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/reducers/meal-paner-state.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mealPlanerStateReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/state/meal-planer-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MealPlanerState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/state/meal-planer-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialMealPlanerState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/meal-planer/store/state/meal-planer-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mealPlanerAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/product-info/containers/product-page-container/product-page-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductPageContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/product-info/pages/product-page/product-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list-form/shopping-list-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list/shopping-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "taskData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/components/shopping-list/shopping-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/containers/shopping-list-container/shopping-list-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/pages/shopping-list-page/shopping-list-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShoppingListPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/service/shopping-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingListService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShoppingListItemFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShoppingListItemsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShoppingListItemsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShoppingListItemSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createShoppingListFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createShoppingListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListItemFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListItemSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editShoppingListFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editShoppingListSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingListItemsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingListItemsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingListsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingListsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateShoppingListItemFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-api.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateShoppingListItemSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "changeShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "editShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadShoppingLists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moveShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoDeleteShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-container.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoDeleteShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bulkUpdateShoppingListItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerShoppingListItemDeleteForSync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerShoppingListItemDeleteForSyncSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerShoppingListItemPostForSync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerShoppingListItemPostForSyncSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerShoppingListItemUpdatesForSync",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerShoppingListItemUpdatesForSyncSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "retryAddShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "retryCreateShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "retryDeleteShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "retryDeleteShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "retryEditShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "retryUpdateShoppingListItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setActiveShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoOptimisticAddShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoOptimisticDeleteShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoOptimisticDeleteShoppingListItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/actions/shopping-list-effect.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "undoOptimisticEditShoppingList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/effects/shopping-list.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ShoppingListEffects",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/reducers/shopping-list.reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shoppingListReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ShoppingListState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialShoppingListState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shoppingListAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/shopping-list/store/state/shopping-list-state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shoppingListItemAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Accent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonLinkData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-link/butto-link.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button-link/button-link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonLinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Accent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "buttonData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/edit-list-dialog/edit-list-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditListDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/edit-list-dialog/edit-list-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/edit-list-dialog/edit-list-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "listData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/edit-list-dialog/edit-list-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "inputData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithErros",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultipleList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OneList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-header/list-header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-picker-dialog/list-picker-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListPickerDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-picker-dialog/list-picker-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-picker-dialog/list-picker-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "listData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/list-picker-dialog/list-picker-dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionsData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "inputData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithErrors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithObjectValues",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/translate.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TranslatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "declarations",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.qa.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "testing/router-link-directive.stub.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RouterLinkDirectiveStub",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            }
        ]
    }
}
